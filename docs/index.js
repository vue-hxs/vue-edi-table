/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/vue-edi-table/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 9);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

eval("/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanM/MTU5ZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLGdCQUFnQjtBQUNuRCxJQUFJO0FBQ0o7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGlCQUFpQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxjQUFjOztBQUVsRTtBQUNBIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odXNlU291cmNlTWFwKSB7XG5cdHZhciBsaXN0ID0gW107XG5cblx0Ly8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXHRsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHR2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblx0XHRcdGlmKGl0ZW1bMl0pIHtcblx0XHRcdFx0cmV0dXJuIFwiQG1lZGlhIFwiICsgaXRlbVsyXSArIFwie1wiICsgY29udGVudCArIFwifVwiO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdFx0XHR9XG5cdFx0fSkuam9pbihcIlwiKTtcblx0fTtcblxuXHQvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG5cdFx0aWYodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpXG5cdFx0XHRtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGlkID0gdGhpc1tpXVswXTtcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcblx0XHRcdFx0YWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuXHRcdH1cblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IG1vZHVsZXNbaV07XG5cdFx0XHQvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuXHRcdFx0Ly8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cblx0XHRcdC8vICBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuXHRcdFx0XHRpZihtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IG1lZGlhUXVlcnk7XG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IFwiKFwiICsgaXRlbVsyXSArIFwiKSBhbmQgKFwiICsgbWVkaWFRdWVyeSArIFwiKVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcblx0dmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnO1xuXHR2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cdGlmICghY3NzTWFwcGluZykge1xuXHRcdHJldHVybiBjb250ZW50O1xuXHR9XG5cblx0aWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuXHRcdHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG5cdFx0XHRyZXR1cm4gJy8qIyBzb3VyY2VVUkw9JyArIGNzc01hcHBpbmcuc291cmNlUm9vdCArIHNvdXJjZSArICcgKi8nXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcblx0fVxuXG5cdHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59XG5cbi8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG5cdHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuXHR2YXIgZGF0YSA9ICdzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwnICsgYmFzZTY0O1xuXG5cdHJldHVybiAnLyojICcgKyBkYXRhICsgJyAqLyc7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1xuLy8gbW9kdWxlIGlkID0gMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

eval("/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n  Modified by Evan You @yyx990803\n*/\n\nvar hasDocument = typeof document !== 'undefined'\n\nif (typeof DEBUG !== 'undefined' && DEBUG) {\n  if (!hasDocument) {\n    throw new Error(\n    'vue-style-loader cannot be used in a non-browser environment. ' +\n    \"Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\"\n  ) }\n}\n\nvar listToStyles = __webpack_require__(15)\n\n/*\ntype StyleObject = {\n  id: number;\n  parts: Array<StyleObjectPart>\n}\n\ntype StyleObjectPart = {\n  css: string;\n  media: string;\n  sourceMap: ?string\n}\n*/\n\nvar stylesInDom = {/*\n  [id: number]: {\n    id: number,\n    refs: number,\n    parts: Array<(obj?: StyleObjectPart) => void>\n  }\n*/}\n\nvar head = hasDocument && (document.head || document.getElementsByTagName('head')[0])\nvar singletonElement = null\nvar singletonCounter = 0\nvar isProduction = false\nvar noop = function () {}\n\n// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n// tags it will allow on a page\nvar isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase())\n\nmodule.exports = function (parentId, list, _isProduction) {\n  isProduction = _isProduction\n\n  var styles = listToStyles(parentId, list)\n  addStylesToDom(styles)\n\n  return function update (newList) {\n    var mayRemove = []\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i]\n      var domStyle = stylesInDom[item.id]\n      domStyle.refs--\n      mayRemove.push(domStyle)\n    }\n    if (newList) {\n      styles = listToStyles(parentId, newList)\n      addStylesToDom(styles)\n    } else {\n      styles = []\n    }\n    for (var i = 0; i < mayRemove.length; i++) {\n      var domStyle = mayRemove[i]\n      if (domStyle.refs === 0) {\n        for (var j = 0; j < domStyle.parts.length; j++) {\n          domStyle.parts[j]()\n        }\n        delete stylesInDom[domStyle.id]\n      }\n    }\n  }\n}\n\nfunction addStylesToDom (styles /* Array<StyleObject> */) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i]\n    var domStyle = stylesInDom[item.id]\n    if (domStyle) {\n      domStyle.refs++\n      for (var j = 0; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j])\n      }\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j]))\n      }\n      if (domStyle.parts.length > item.parts.length) {\n        domStyle.parts.length = item.parts.length\n      }\n    } else {\n      var parts = []\n      for (var j = 0; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j]))\n      }\n      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }\n    }\n  }\n}\n\nfunction createStyleElement () {\n  var styleElement = document.createElement('style')\n  styleElement.type = 'text/css'\n  head.appendChild(styleElement)\n  return styleElement\n}\n\nfunction addStyle (obj /* StyleObjectPart */) {\n  var update, remove\n  var styleElement = document.querySelector('style[data-vue-ssr-id~=\"' + obj.id + '\"]')\n\n  if (styleElement) {\n    if (isProduction) {\n      // has SSR styles and in production mode.\n      // simply do nothing.\n      return noop\n    } else {\n      // has SSR styles but in dev mode.\n      // for some reason Chrome can't handle source map in server-rendered\n      // style tags - source maps in <style> only works if the style tag is\n      // created and inserted dynamically. So we remove the server rendered\n      // styles and inject new ones.\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  if (isOldIE) {\n    // use singleton mode for IE9.\n    var styleIndex = singletonCounter++\n    styleElement = singletonElement || (singletonElement = createStyleElement())\n    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)\n    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)\n  } else {\n    // use multi-style-tag mode in all other cases\n    styleElement = createStyleElement()\n    update = applyToTag.bind(null, styleElement)\n    remove = function () {\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  update(obj)\n\n  return function updateStyle (newObj /* StyleObjectPart */) {\n    if (newObj) {\n      if (newObj.css === obj.css &&\n          newObj.media === obj.media &&\n          newObj.sourceMap === obj.sourceMap) {\n        return\n      }\n      update(obj = newObj)\n    } else {\n      remove()\n    }\n  }\n}\n\nvar replaceText = (function () {\n  var textStore = []\n\n  return function (index, replacement) {\n    textStore[index] = replacement\n    return textStore.filter(Boolean).join('\\n')\n  }\n})()\n\nfunction applyToSingletonTag (styleElement, index, remove, obj) {\n  var css = remove ? '' : obj.css\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = replaceText(index, css)\n  } else {\n    var cssNode = document.createTextNode(css)\n    var childNodes = styleElement.childNodes\n    if (childNodes[index]) styleElement.removeChild(childNodes[index])\n    if (childNodes.length) {\n      styleElement.insertBefore(cssNode, childNodes[index])\n    } else {\n      styleElement.appendChild(cssNode)\n    }\n  }\n}\n\nfunction applyToTag (styleElement, obj) {\n  var css = obj.css\n  var media = obj.media\n  var sourceMap = obj.sourceMap\n\n  if (media) {\n    styleElement.setAttribute('media', media)\n  }\n\n  if (sourceMap) {\n    // https://developer.chrome.com/devtools/docs/javascript-debugging\n    // this makes source maps inside style tags work properly in Chrome\n    css += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */'\n    // http://stackoverflow.com/a/26603875\n    css += '\\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'\n  }\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild)\n    }\n    styleElement.appendChild(document.createTextNode(css))\n  }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

eval("/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file.\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nmodule.exports = function normalizeComponent (\n  rawScriptExports,\n  compiledTemplate,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier /* server only */\n) {\n  var esModule\n  var scriptExports = rawScriptExports = rawScriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof rawScriptExports.default\n  if (type === 'object' || type === 'function') {\n    esModule = rawScriptExports\n    scriptExports = rawScriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (compiledTemplate) {\n    options.render = compiledTemplate.render\n    options.staticRenderFns = compiledTemplate.staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = injectStyles\n  }\n\n  if (hook) {\n    var functional = options.functional\n    var existing = functional\n      ? options.render\n      : options.beforeCreate\n\n    if (!functional) {\n      // inject component registration as beforeCreate hook\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    } else {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return existing(h, context)\n      }\n    }\n  }\n\n  return {\n    esModule: esModule,\n    exports: scriptExports,\n    options: options\n  }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXIuanM/NTU0ZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbHMgX19WVUVfU1NSX0NPTlRFWFRfXyAqL1xuXG4vLyBJTVBPUlRBTlQ6IERvIE5PVCB1c2UgRVMyMDE1IGZlYXR1cmVzIGluIHRoaXMgZmlsZS5cbi8vIFRoaXMgbW9kdWxlIGlzIGEgcnVudGltZSB1dGlsaXR5IGZvciBjbGVhbmVyIGNvbXBvbmVudCBtb2R1bGUgb3V0cHV0IGFuZCB3aWxsXG4vLyBiZSBpbmNsdWRlZCBpbiB0aGUgZmluYWwgd2VicGFjayB1c2VyIGJ1bmRsZS5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVDb21wb25lbnQgKFxuICByYXdTY3JpcHRFeHBvcnRzLFxuICBjb21waWxlZFRlbXBsYXRlLFxuICBmdW5jdGlvbmFsVGVtcGxhdGUsXG4gIGluamVjdFN0eWxlcyxcbiAgc2NvcGVJZCxcbiAgbW9kdWxlSWRlbnRpZmllciAvKiBzZXJ2ZXIgb25seSAqL1xuKSB7XG4gIHZhciBlc01vZHVsZVxuICB2YXIgc2NyaXB0RXhwb3J0cyA9IHJhd1NjcmlwdEV4cG9ydHMgPSByYXdTY3JpcHRFeHBvcnRzIHx8IHt9XG5cbiAgLy8gRVM2IG1vZHVsZXMgaW50ZXJvcFxuICB2YXIgdHlwZSA9IHR5cGVvZiByYXdTY3JpcHRFeHBvcnRzLmRlZmF1bHRcbiAgaWYgKHR5cGUgPT09ICdvYmplY3QnIHx8IHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBlc01vZHVsZSA9IHJhd1NjcmlwdEV4cG9ydHNcbiAgICBzY3JpcHRFeHBvcnRzID0gcmF3U2NyaXB0RXhwb3J0cy5kZWZhdWx0XG4gIH1cblxuICAvLyBWdWUuZXh0ZW5kIGNvbnN0cnVjdG9yIGV4cG9ydCBpbnRlcm9wXG4gIHZhciBvcHRpb25zID0gdHlwZW9mIHNjcmlwdEV4cG9ydHMgPT09ICdmdW5jdGlvbidcbiAgICA/IHNjcmlwdEV4cG9ydHMub3B0aW9uc1xuICAgIDogc2NyaXB0RXhwb3J0c1xuXG4gIC8vIHJlbmRlciBmdW5jdGlvbnNcbiAgaWYgKGNvbXBpbGVkVGVtcGxhdGUpIHtcbiAgICBvcHRpb25zLnJlbmRlciA9IGNvbXBpbGVkVGVtcGxhdGUucmVuZGVyXG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBjb21waWxlZFRlbXBsYXRlLnN0YXRpY1JlbmRlckZuc1xuICAgIG9wdGlvbnMuX2NvbXBpbGVkID0gdHJ1ZVxuICB9XG5cbiAgLy8gZnVuY3Rpb25hbCB0ZW1wbGF0ZVxuICBpZiAoZnVuY3Rpb25hbFRlbXBsYXRlKSB7XG4gICAgb3B0aW9ucy5mdW5jdGlvbmFsID0gdHJ1ZVxuICB9XG5cbiAgLy8gc2NvcGVkSWRcbiAgaWYgKHNjb3BlSWQpIHtcbiAgICBvcHRpb25zLl9zY29wZUlkID0gc2NvcGVJZFxuICB9XG5cbiAgdmFyIGhvb2tcbiAgaWYgKG1vZHVsZUlkZW50aWZpZXIpIHsgLy8gc2VydmVyIGJ1aWxkXG4gICAgaG9vayA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAvLyAyLjMgaW5qZWN0aW9uXG4gICAgICBjb250ZXh0ID1cbiAgICAgICAgY29udGV4dCB8fCAvLyBjYWNoZWQgY2FsbFxuICAgICAgICAodGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dCkgfHwgLy8gc3RhdGVmdWxcbiAgICAgICAgKHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LiR2bm9kZSAmJiB0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCkgLy8gZnVuY3Rpb25hbFxuICAgICAgLy8gMi4yIHdpdGggcnVuSW5OZXdDb250ZXh0OiB0cnVlXG4gICAgICBpZiAoIWNvbnRleHQgJiYgdHlwZW9mIF9fVlVFX1NTUl9DT05URVhUX18gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnRleHQgPSBfX1ZVRV9TU1JfQ09OVEVYVF9fXG4gICAgICB9XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHN0eWxlc1xuICAgICAgaWYgKGluamVjdFN0eWxlcykge1xuICAgICAgICBpbmplY3RTdHlsZXMuY2FsbCh0aGlzLCBjb250ZXh0KVxuICAgICAgfVxuICAgICAgLy8gcmVnaXN0ZXIgY29tcG9uZW50IG1vZHVsZSBpZGVudGlmaWVyIGZvciBhc3luYyBjaHVuayBpbmZlcnJlbmNlXG4gICAgICBpZiAoY29udGV4dCAmJiBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cykge1xuICAgICAgICBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQobW9kdWxlSWRlbnRpZmllcilcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdXNlZCBieSBzc3IgaW4gY2FzZSBjb21wb25lbnQgaXMgY2FjaGVkIGFuZCBiZWZvcmVDcmVhdGVcbiAgICAvLyBuZXZlciBnZXRzIGNhbGxlZFxuICAgIG9wdGlvbnMuX3NzclJlZ2lzdGVyID0gaG9va1xuICB9IGVsc2UgaWYgKGluamVjdFN0eWxlcykge1xuICAgIGhvb2sgPSBpbmplY3RTdHlsZXNcbiAgfVxuXG4gIGlmIChob29rKSB7XG4gICAgdmFyIGZ1bmN0aW9uYWwgPSBvcHRpb25zLmZ1bmN0aW9uYWxcbiAgICB2YXIgZXhpc3RpbmcgPSBmdW5jdGlvbmFsXG4gICAgICA/IG9wdGlvbnMucmVuZGVyXG4gICAgICA6IG9wdGlvbnMuYmVmb3JlQ3JlYXRlXG5cbiAgICBpZiAoIWZ1bmN0aW9uYWwpIHtcbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgcmVnaXN0cmF0aW9uIGFzIGJlZm9yZUNyZWF0ZSBob29rXG4gICAgICBvcHRpb25zLmJlZm9yZUNyZWF0ZSA9IGV4aXN0aW5nXG4gICAgICAgID8gW10uY29uY2F0KGV4aXN0aW5nLCBob29rKVxuICAgICAgICA6IFtob29rXVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBmb3IgdGVtcGxhdGUtb25seSBob3QtcmVsb2FkIGJlY2F1c2UgaW4gdGhhdCBjYXNlIHRoZSByZW5kZXIgZm4gZG9lc24ndFxuICAgICAgLy8gZ28gdGhyb3VnaCB0aGUgbm9ybWFsaXplclxuICAgICAgb3B0aW9ucy5faW5qZWN0U3R5bGVzID0gaG9va1xuICAgICAgLy8gcmVnaXN0ZXIgZm9yIGZ1bmN0aW9hbCBjb21wb25lbnQgaW4gdnVlIGZpbGVcbiAgICAgIG9wdGlvbnMucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyV2l0aFN0eWxlSW5qZWN0aW9uIChoLCBjb250ZXh0KSB7XG4gICAgICAgIGhvb2suY2FsbChjb250ZXh0KVxuICAgICAgICByZXR1cm4gZXhpc3RpbmcoaCwgY29udGV4dClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGVzTW9kdWxlOiBlc01vZHVsZSxcbiAgICBleHBvcnRzOiBzY3JpcHRFeHBvcnRzLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfVxufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXIuanNcbi8vIG1vZHVsZSBpZCA9IDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* WEBPACK VAR INJECTION */(function(process, global, setImmediate) {/*!\n * Vue.js v2.5.13\n * (c) 2014-2017 Evan You\n * Released under the MIT License.\n */\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n// these helpers produces better vm code in JS engines due to their\n// explicitness and function inlining\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    // $flow-disable-line\n    typeof value === 'symbol' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Get the raw type string of a value e.g. [object Object]\n */\nvar _toString = Object.prototype.toString;\n\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(String(val));\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : typeof val === 'object'\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert a input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if a attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n\n/**\n * Remove an item from an array\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether the object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind, faster than native\n */\nfunction bind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n  // record original fn length\n  boundFn._length = fn.length;\n  return boundFn\n}\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/)\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/**\n * Return same value\n */\nvar identity = function (_) { return _; };\n\n/**\n * Generate a static keys string from compiler modules.\n */\nfunction genStaticKeys (modules) {\n  return modules.reduce(function (keys, m) {\n    return keys.concat(m.staticKeys || [])\n  }, []).join(',')\n}\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar SSR_ATTR = 'data-server-rendered';\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated',\n  'errorCaptured'\n];\n\n/*  */\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  // $flow-disable-line\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: process.env.NODE_ENV !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: process.env.NODE_ENV !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  // $flow-disable-line\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n});\n\n/*  */\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = /[^\\w.$]/;\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\nvar weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');\nvar isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\n\nvar supportsPassive = false;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n        /* istanbul ignore next */\n        supportsPassive = true;\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\nvar _Set;\n/* istanbul ignore if */ // $flow-disable-line\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = (function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar generateComponentTrace = (noop); // work around flow check\nvar formatComponentName = (noop);\n\nif (process.env.NODE_ENV !== 'production') {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    var trace = vm ? generateComponentTrace(vm) : '';\n\n    if (config.warnHandler) {\n      config.warnHandler.call(null, msg, vm, trace);\n    } else if (hasConsole && (!config.silent)) {\n      console.error((\"[Vue warn]: \" + msg + trace));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var options = typeof vm === 'function' && vm.cid != null\n      ? vm.options\n      : vm._isVue\n        ? vm.$options || vm.constructor.options\n        : vm || {};\n    var name = options.name || options._componentTag;\n    var file = options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.target) {\n    Dep.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// the current target watcher being evaluated.\n// this is globally unique because there could be only one\n// watcher being evaluated at any time.\nDep.target = null;\nvar targetStack = [];\n\nfunction pushTarget (_target) {\n  if (Dep.target) { targetStack.push(Dep.target); }\n  Dep.target = _target;\n}\n\nfunction popTarget () {\n  Dep.target = targetStack.pop();\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.fnContext = undefined;\n  this.fnOptions = undefined;\n  this.fnScopeId = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: { configurable: true } };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode, deep) {\n  var componentOptions = vnode.componentOptions;\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    vnode.children,\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.fnContext = vnode.fnContext;\n  cloned.fnOptions = vnode.fnOptions;\n  cloned.fnScopeId = vnode.fnScopeId;\n  cloned.isCloned = true;\n  if (deep) {\n    if (vnode.children) {\n      cloned.children = cloneVNodes(vnode.children, true);\n    }\n    if (componentOptions && componentOptions.children) {\n      componentOptions.children = cloneVNodes(componentOptions.children, true);\n    }\n  }\n  return cloned\n}\n\nfunction cloneVNodes (vnodes, deep) {\n  var len = vnodes.length;\n  var res = new Array(len);\n  for (var i = 0; i < len; i++) {\n    res[i] = cloneVNode(vnodes[i], deep);\n  }\n  return res\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);[\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n].forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * By default, when a reactive property is set, the new value is\n * also converted to become reactive. However when passing down props,\n * we don't want to force conversion because the value may be a nested value\n * under a frozen data structure. Converting it would defeat the optimization.\n */\nvar observerState = {\n  shouldConvert: true\n};\n\n/**\n * Observer class that are attached to each observed\n * object. Once attached, the observer converts target\n * object's property keys into getter/setters that\n * collect dependencies and dispatches updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    var augment = hasProto\n      ? protoAugment\n      : copyAugment;\n    augment(value, arrayMethods, arrayKeys);\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through each property and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive(obj, keys[i], obj[keys[i]]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment an target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src, keys) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment an target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    observerState.shouldConvert &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (process.env.NODE_ENV !== 'production' && customSetter) {\n        customSetter();\n      }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (process.env.NODE_ENV !== 'production') {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n  var keys = Object.keys(from);\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this, this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\n      )\n    }\n  } else {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm, vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm, vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n      process.env.NODE_ENV !== 'production' && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  return childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  var res = Object.create(parentVal || null);\n  if (childVal) {\n    process.env.NODE_ENV !== 'production' && assertObjectType(key, childVal, vm);\n    return extend(res, childVal)\n  } else {\n    return res\n  }\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (process.env.NODE_ENV !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  if (childVal && process.env.NODE_ENV !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    validateComponentName(key);\n  }\n}\n\nfunction validateComponentName (name) {\n  if (!/^[a-zA-Z][\\w-]*$/.test(name)) {\n    warn(\n      'Invalid component name: \"' + name + '\". Component names ' +\n      'can only contain alphanumeric characters and the hyphen, ' +\n      'and must start with a letter.'\n    );\n  }\n  if (isBuiltInTag(name) || config.isReservedTag(name)) {\n    warn(\n      'Do not use built-in or reserved HTML elements as component ' +\n      'id: ' + name\n    );\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options, vm) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (process.env.NODE_ENV !== 'production') {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn(\n      \"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(props)) + \".\",\n      vm\n    );\n  }\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options, vm) {\n  var inject = options.inject;\n  if (!inject) { return }\n  var normalized = options.inject = {};\n  if (Array.isArray(inject)) {\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = { from: inject[i] };\n    }\n  } else if (isPlainObject(inject)) {\n    for (var key in inject) {\n      var val = inject[key];\n      normalized[key] = isPlainObject(val)\n        ? extend({ from: key }, val)\n        : { from: val };\n    }\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn(\n      \"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(inject)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def = dirs[key];\n      if (typeof def === 'function') {\n        dirs[key] = { bind: def, update: def };\n      }\n    }\n  }\n}\n\nfunction assertObjectType (name, value, vm) {\n  if (!isPlainObject(value)) {\n    warn(\n      \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\n      \"but got \" + (toRawType(value)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child, vm);\n  normalizeInject(child, vm);\n  normalizeDirectives(child);\n  var extendsFrom = child.extends;\n  if (extendsFrom) {\n    parent = mergeOptions(parent, extendsFrom, vm);\n  }\n  if (child.mixins) {\n    for (var i = 0, l = child.mixins.length; i < l; i++) {\n      parent = mergeOptions(parent, child.mixins[i], vm);\n    }\n  }\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // handle boolean props\n  if (isType(Boolean, prop.type)) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (!isType(String, prop.type) && (value === '' || value === hyphenate(key))) {\n      value = true;\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldConvert = observerState.shouldConvert;\n    observerState.shouldConvert = true;\n    observe(value);\n    observerState.shouldConvert = prevShouldConvert;\n  }\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    // skip validation for weex recycle-list child component props\n    !(false && isObject(value) && ('@binding' in value))\n  ) {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if (process.env.NODE_ENV !== 'production' && isObject(def)) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n  if (!valid) {\n    warn(\n      \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\n      \" Expected \" + (expectedTypes.map(capitalize).join(', ')) +\n      \", got \" + (toRawType(value)) + \".\",\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isType (type, fn) {\n  if (!Array.isArray(fn)) {\n    return getType(fn) === getType(type)\n  }\n  for (var i = 0, len = fn.length; i < len; i++) {\n    if (getType(fn[i]) === getType(type)) {\n      return true\n    }\n  }\n  /* istanbul ignore next */\n  return false\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  if (vm) {\n    var cur = vm;\n    while ((cur = cur.$parent)) {\n      var hooks = cur.$options.errorCaptured;\n      if (hooks) {\n        for (var i = 0; i < hooks.length; i++) {\n          try {\n            var capture = hooks[i].call(cur, err, vm, info) === false;\n            if (capture) { return }\n          } catch (e) {\n            globalHandleError(e, cur, 'errorCaptured hook');\n          }\n        }\n      }\n    }\n  }\n  globalHandleError(err, vm, info);\n}\n\nfunction globalHandleError (err, vm, info) {\n  if (config.errorHandler) {\n    try {\n      return config.errorHandler.call(null, err, vm, info)\n    } catch (e) {\n      logError(e, null, 'config.errorHandler');\n    }\n  }\n  logError(err, vm, info);\n}\n\nfunction logError (err, vm, info) {\n  if (process.env.NODE_ENV !== 'production') {\n    warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n  }\n  /* istanbul ignore else */\n  if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n    console.error(err);\n  } else {\n    throw err\n  }\n}\n\n/*  */\n/* globals MessageChannel */\n\nvar callbacks = [];\nvar pending = false;\n\nfunction flushCallbacks () {\n  pending = false;\n  var copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (var i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// Here we have async deferring wrappers using both micro and macro tasks.\n// In < 2.4 we used micro tasks everywhere, but there are some scenarios where\n// micro tasks have too high a priority and fires in between supposedly\n// sequential events (e.g. #4521, #6690) or even between bubbling of the same\n// event (#6566). However, using macro tasks everywhere also has subtle problems\n// when state is changed right before repaint (e.g. #6813, out-in transitions).\n// Here we use micro task by default, but expose a way to force macro task when\n// needed (e.g. in event handlers attached by v-on).\nvar microTimerFunc;\nvar macroTimerFunc;\nvar useMacroTask = false;\n\n// Determine (macro) Task defer implementation.\n// Technically setImmediate should be the ideal choice, but it's only available\n// in IE. The only polyfill that consistently queues the callback after all DOM\n// events triggered in the same loop is by using MessageChannel.\n/* istanbul ignore if */\nif (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  macroTimerFunc = function () {\n    setImmediate(flushCallbacks);\n  };\n} else if (typeof MessageChannel !== 'undefined' && (\n  isNative(MessageChannel) ||\n  // PhantomJS\n  MessageChannel.toString() === '[object MessageChannelConstructor]'\n)) {\n  var channel = new MessageChannel();\n  var port = channel.port2;\n  channel.port1.onmessage = flushCallbacks;\n  macroTimerFunc = function () {\n    port.postMessage(1);\n  };\n} else {\n  /* istanbul ignore next */\n  macroTimerFunc = function () {\n    setTimeout(flushCallbacks, 0);\n  };\n}\n\n// Determine MicroTask defer implementation.\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  var p = Promise.resolve();\n  microTimerFunc = function () {\n    p.then(flushCallbacks);\n    // in problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) { setTimeout(noop); }\n  };\n} else {\n  // fallback to macro\n  microTimerFunc = macroTimerFunc;\n}\n\n/**\n * Wrap a function so that if any code inside triggers state change,\n * the changes are queued using a Task instead of a MicroTask.\n */\nfunction withMacroTask (fn) {\n  return fn._withTask || (fn._withTask = function () {\n    useMacroTask = true;\n    var res = fn.apply(null, arguments);\n    useMacroTask = false;\n    return res\n  })\n}\n\nfunction nextTick (cb, ctx) {\n  var _resolve;\n  callbacks.push(function () {\n    if (cb) {\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n  if (!pending) {\n    pending = true;\n    if (useMacroTask) {\n      macroTimerFunc();\n    } else {\n      microTimerFunc();\n    }\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve) {\n      _resolve = resolve;\n    })\n  }\n}\n\n/*  */\n\nvar mark;\nvar measure;\n\nif (process.env.NODE_ENV !== 'production') {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      perf.clearMeasures(name);\n    };\n  }\n}\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (process.env.NODE_ENV !== 'production') {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      'referenced during render. Make sure that this property is reactive, ' +\n      'either in the data option, or for class-based components, by ' +\n      'initializing the property. ' +\n      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' &&\n    Proxy.toString().match(/native code/);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';\n      if (!has && !isAllowed) {\n        warnNonPresent(target, key);\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        warnNonPresent(target, key);\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar seenObjects = new _Set();\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nfunction traverse (val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || Object.isFrozen(val)) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        cloned[i].apply(null, arguments$1);\n      }\n    } else {\n      // return handler return value for single handlers\n      return fns.apply(null, arguments)\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  vm\n) {\n  var name, def, cur, old, event;\n  for (name in on) {\n    def = cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    /* istanbul ignore if */\n    if (isUndef(cur)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur);\n      }\n      add(event.name, cur, event.once, event.capture, event.passive, event.params);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\nfunction mergeVNodeHook (def, hookKey, hook) {\n  if (def instanceof VNode) {\n    def = def.data.hook || (def.data.hook = {});\n  }\n  var invoker;\n  var oldHook = def[hookKey];\n\n  function wrappedHook () {\n    hook.apply(this, arguments);\n    // important: remove merged hook to ensure it's called only once\n    // and prevent memory leak\n    remove(invoker.fns, wrappedHook);\n  }\n\n  if (isUndef(oldHook)) {\n    // no existing hook\n    invoker = createFnInvoker([wrappedHook]);\n  } else {\n    /* istanbul ignore if */\n    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {\n      // already a merged invoker\n      invoker = oldHook;\n      invoker.fns.push(wrappedHook);\n    } else {\n      // existing plain hook\n      invoker = createFnInvoker([oldHook, wrappedHook]);\n    }\n  }\n\n  invoker.merged = true;\n  def[hookKey] = invoker;\n}\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (process.env.NODE_ENV !== 'production') {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, lastIndex, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    lastIndex = res.length - 1;\n    last = res[lastIndex];\n    //  nested\n    if (Array.isArray(c)) {\n      if (c.length > 0) {\n        c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\n        // merge adjacent text nodes\n        if (isTextNode(c[0]) && isTextNode(last)) {\n          res[lastIndex] = createTextVNode(last.text + (c[0]).text);\n          c.shift();\n        }\n        res.push.apply(res, c);\n      }\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        res[lastIndex] = createTextVNode(last.text + c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[lastIndex] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (\n    comp.__esModule ||\n    (hasSymbol && comp[Symbol.toStringTag] === 'Module')\n  ) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor,\n  context\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (isDef(factory.contexts)) {\n    // already pending\n    factory.contexts.push(context);\n  } else {\n    var contexts = factory.contexts = [context];\n    var sync = true;\n\n    var forceRender = function () {\n      for (var i = 0, l = contexts.length; i < l; i++) {\n        contexts[i].$forceUpdate();\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender();\n      }\n    });\n\n    var reject = once(function (reason) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender();\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (typeof res.then === 'function') {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isDef(res.component) && typeof res.component.then === 'function') {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            setTimeout(function () {\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender();\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          setTimeout(function () {\n            if (isUndef(factory.resolved)) {\n              reject(\n                process.env.NODE_ENV !== 'production'\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : null\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn, once) {\n  if (once) {\n    target.$once(event, fn);\n  } else {\n    target.$on(event, fn);\n  }\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, vm);\n  target = undefined;\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        this$1.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        this$1.$off(event[i], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (!fn) {\n      vm._events[event] = null;\n      return vm\n    }\n    if (fn) {\n      // specific handler\n      var cb;\n      var i$1 = cbs.length;\n      while (i$1--) {\n        cb = cbs[i$1];\n        if (cb === fn || cb.fn === fn) {\n          cbs.splice(i$1, 1);\n          break\n        }\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (process.env.NODE_ENV !== 'production') {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        try {\n          cbs[i].apply(vm, args);\n        } catch (e) {\n          handleError(e, vm, (\"event handler for \\\"\" + event + \"\\\"\"));\n        }\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\n\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  var slots = {};\n  if (!children) {\n    return slots\n  }\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.fnContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children || []);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      (slots.default || (slots.default = [])).push(child);\n    }\n  }\n  // ignore slots that contains only whitespace\n  for (var name$1 in slots) {\n    if (slots[name$1].every(isWhitespace)) {\n      delete slots[name$1];\n    }\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return (node.isComment && !node.asyncFactory) || node.text === ' '\n}\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res\n) {\n  res = res || {};\n  for (var i = 0; i < fns.length; i++) {\n    if (Array.isArray(fns[i])) {\n      resolveScopedSlots(fns[i], res);\n    } else {\n      res[fns[i].key] = fns[i].fn;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    if (vm._isMounted) {\n      callHook(vm, 'beforeUpdate');\n    }\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var prevActiveInstance = activeInstance;\n    activeInstance = vm;\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(\n        vm.$el, vnode, hydrating, false /* removeOnly */,\n        vm.$options._parentElm,\n        vm.$options._refElm\n      );\n      // no need for the ref nodes after initial patch\n      // this prevents keeping a detached DOM tree in memory (#5851)\n      vm.$options._parentElm = vm.$options._refElm = null;\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    activeInstance = prevActiveInstance;\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // release circular reference (#6759)\n    if (vm.$vnode) {\n      vm.$vnode.parent = null;\n    }\n  };\n}\n\nfunction mountComponent (\n  vm,\n  el,\n  hydrating\n) {\n  vm.$el = el;\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyVNode;\n    if (process.env.NODE_ENV !== 'production') {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  callHook(vm, 'beforeMount');\n\n  var updateComponent;\n  /* istanbul ignore if */\n  if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n    updateComponent = function () {\n      var name = vm._name;\n      var id = vm._uid;\n      var startTag = \"vue-perf-start:\" + id;\n      var endTag = \"vue-perf-end:\" + id;\n\n      mark(startTag);\n      var vnode = vm._render();\n      mark(endTag);\n      measure((\"vue \" + name + \" render\"), startTag, endTag);\n\n      mark(startTag);\n      vm._update(vnode, hydrating);\n      mark(endTag);\n      measure((\"vue \" + name + \" patch\"), startTag, endTag);\n    };\n  } else {\n    updateComponent = function () {\n      vm._update(vm._render(), hydrating);\n    };\n  }\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, null, true /* isRenderWatcher */);\n  hydrating = false;\n\n  // manually mounted instance, call mounted on self\n  // mounted is called for render-created child components in its inserted hook\n  if (vm.$vnode == null) {\n    vm._isMounted = true;\n    callHook(vm, 'mounted');\n  }\n  return vm\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  if (process.env.NODE_ENV !== 'production') {\n    isUpdatingChildComponent = true;\n  }\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren\n  var hasChildren = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    parentVnode.data.scopedSlots || // has new scoped slots\n    vm.$scopedSlots !== emptyObject // has old scoped slots\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = (parentVnode.data && parentVnode.data.attrs) || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    observerState.shouldConvert = false;\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      props[key] = validateProp(key, vm.$options.props, propsData, vm);\n    }\n    observerState.shouldConvert = true;\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n\n  // update listeners\n  if (listeners) {\n    var oldListeners = vm.$options._parentListeners;\n    vm.$options._parentListeners = listeners;\n    updateComponentListeners(vm, listeners, oldListeners);\n  }\n  // resolve slots + force update if has children\n  if (hasChildren) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    isUpdatingChildComponent = false;\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  var handlers = vm.$options[hook];\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      try {\n        handlers[i].call(vm);\n      } catch (e) {\n        handleError(e, vm, (hook + \" hook\"));\n      }\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n}\n\n/*  */\n\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (process.env.NODE_ENV !== 'production') {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if (process.env.NODE_ENV !== 'production' && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression = process.env.NODE_ENV !== 'production'\n    ? expOrFn.toString()\n    : '';\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = function () {};\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this$1.deps[i];\n    if (!this$1.newDepIds.has(dep.id)) {\n      dep.removeSub(this$1);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    this$1.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n    var this$1 = this;\n\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this$1.deps[i].removeSub(this$1);\n    }\n    this.active = false;\n  }\n};\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  observerState.shouldConvert = isRoot;\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      var hyphenatedKey = hyphenate(key);\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive(props, key, value, function () {\n        if (vm.$parent && !isUpdatingChildComponent) {\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {\n      defineReactive(props, key, value);\n    }\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  observerState.shouldConvert = true;\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n    process.env.NODE_ENV !== 'production' && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (process.env.NODE_ENV !== 'production') {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  try {\n    return data.call(vm, vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if (process.env.NODE_ENV !== 'production' && getter == null) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (process.env.NODE_ENV !== 'production') {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : userDef;\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : userDef.get\n      : noop;\n    sharedPropertyDefinition.set = userDef.set\n      ? userDef.set\n      : noop;\n  }\n  if (process.env.NODE_ENV !== 'production' &&\n      sharedPropertyDefinition.set === noop) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\n        this\n      );\n    };\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (methods[key] == null) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has an undefined value in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  keyOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(keyOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (process.env.NODE_ENV !== 'production') {\n    dataDef.set = function (newData) {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      cb.call(vm, watcher.value);\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    observerState.shouldConvert = false;\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production') {\n        defineReactive(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {\n        defineReactive(vm, key, result[key]);\n      }\n    });\n    observerState.shouldConvert = true;\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n      ? Reflect.ownKeys(inject).filter(function (key) {\n        /* istanbul ignore next */\n        return Object.getOwnPropertyDescriptor(inject, key).enumerable\n      })\n      : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var provideKey = inject[key].from;\n      var source = vm;\n      while (source) {\n        if (source._provided && provideKey in source._provided) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          var provideDefault = inject[key].default;\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault;\n        } else if (process.env.NODE_ENV !== 'production') {\n          warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n        }\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    keys = Object.keys(val);\n    ret = new Array(keys.length);\n    for (i = 0, l = keys.length; i < l; i++) {\n      key = keys[i];\n      ret[i] = render(val[key], key, i);\n    }\n  }\n  if (isDef(ret)) {\n    (ret)._isVList = true;\n  }\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  var nodes;\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      if (process.env.NODE_ENV !== 'production' && !isObject(bindObject)) {\n        warn(\n          'slot v-bind without argument expects an Object',\n          this\n        );\n      }\n      props = extend(extend({}, bindObject), props);\n    }\n    nodes = scopedSlotFn(props) || fallback;\n  } else {\n    var slotNodes = this.$slots[name];\n    // warn duplicate slot usage\n    if (slotNodes) {\n      if (process.env.NODE_ENV !== 'production' && slotNodes._rendered) {\n        warn(\n          \"Duplicate presence of slot \\\"\" + name + \"\\\" found in the same render tree \" +\n          \"- this will likely cause render errors.\",\n          this\n        );\n      }\n      slotNodes._rendered = true;\n    }\n    nodes = slotNodes || fallback;\n  }\n\n  var target = props && props.slot;\n  if (target) {\n    return this.$createElement('template', { slot: target }, nodes)\n  } else {\n    return nodes\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\n/**\n * Runtime helper for checking keyCodes from config.\n * exposed as Vue.prototype._k\n * passing in eventKeyName as last argument separately for backwards compat\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInAlias,\n  eventKeyName\n) {\n  var keyCodes = config.keyCodes[key] || builtInAlias;\n  if (keyCodes) {\n    if (Array.isArray(keyCodes)) {\n      return keyCodes.indexOf(eventKeyCode) === -1\n    } else {\n      return keyCodes !== eventKeyCode\n    }\n  } else if (eventKeyName) {\n    return hyphenate(eventKeyName) !== key\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        if (!(key in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var cached = this._staticTrees || (this._staticTrees = []);\n  var tree = cached[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree by doing a shallow clone.\n  if (tree && !isInFor) {\n    return Array.isArray(tree)\n      ? cloneVNodes(tree)\n      : cloneVNode(tree)\n  }\n  // otherwise, render a fresh tree.\n  tree = cached[index] = this.$options.staticRenderFns[index].call(\n    this._renderProxy,\n    null,\n    this // for render fns generated for functional component templates\n  );\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        'v-on without argument expects an Object value',\n        this\n      );\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(existing, ours) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction installRenderHelpers (target) {\n  target._o = markOnce;\n  target._n = toNumber;\n  target._s = toString;\n  target._l = renderList;\n  target._t = renderSlot;\n  target._q = looseEqual;\n  target._i = looseIndexOf;\n  target._m = renderStatic;\n  target._f = resolveFilter;\n  target._k = checkKeyCodes;\n  target._b = bindObjectProps;\n  target._v = createTextVNode;\n  target._e = createEmptyVNode;\n  target._u = resolveScopedSlots;\n  target._g = bindObjectListeners;\n}\n\n/*  */\n\nfunction FunctionalRenderContext (\n  data,\n  props,\n  children,\n  parent,\n  Ctor\n) {\n  var options = Ctor.options;\n  this.data = data;\n  this.props = props;\n  this.children = children;\n  this.parent = parent;\n  this.listeners = data.on || emptyObject;\n  this.injections = resolveInject(options.inject, parent);\n  this.slots = function () { return resolveSlots(children, parent); };\n\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var contextVm = Object.create(parent);\n  var isCompiled = isTrue(options._compiled);\n  var needNormalization = !isCompiled;\n\n  // support for compiled functional template\n  if (isCompiled) {\n    // exposing $options for renderStatic()\n    this.$options = options;\n    // pre-resolve slots for renderSlot()\n    this.$slots = this.slots();\n    this.$scopedSlots = data.scopedSlots || emptyObject;\n  }\n\n  if (options._scopeId) {\n    this._c = function (a, b, c, d) {\n      var vnode = createElement(contextVm, a, b, c, d, needNormalization);\n      if (vnode) {\n        vnode.fnScopeId = options._scopeId;\n        vnode.fnContext = parent;\n      }\n      return vnode\n    };\n  } else {\n    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };\n  }\n}\n\ninstallRenderHelpers(FunctionalRenderContext.prototype);\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  contextVm,\n  children\n) {\n  var options = Ctor.options;\n  var props = {};\n  var propOptions = options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n\n  var renderContext = new FunctionalRenderContext(\n    data,\n    props,\n    children,\n    contextVm,\n    Ctor\n  );\n\n  var vnode = options.render.call(null, renderContext._c, renderContext);\n\n  if (vnode instanceof VNode) {\n    vnode.fnContext = contextVm;\n    vnode.fnOptions = options;\n    if (data.slot) {\n      (vnode.data || (vnode.data = {})).slot = data.slot;\n    }\n  }\n\n  return vnode\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n\n\n\n// Register the component hook to weex native render engine.\n// The hook will be triggered by native, not javascript.\n\n\n// Updates the state of the component to weex native render engine.\n\n/*  */\n\n// https://github.com/Hanks10100/weex-native-directive/tree/master/component\n\n// listening on native callback\n\n/*  */\n\n/*  */\n\n// hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (\n    vnode,\n    hydrating,\n    parentElm,\n    refElm\n  ) {\n    if (!vnode.componentInstance || vnode.componentInstance._isDestroyed) {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance,\n        parentElm,\n        refElm\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    } else if (vnode.data.keepAlive) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // merge component management hooks onto the placeholder node\n  mergeHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n\n  // Weex specific: invoke recycle-list optimized @render function for\n  // extracting cell-slot template.\n  // https://github.com/Hanks10100/weex-native-directive/tree/master/component\n  /* istanbul ignore if */\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent, // activeInstance in lifecycle state\n  parentElm,\n  refElm\n) {\n  var options = {\n    _isComponent: true,\n    parent: parent,\n    _parentVnode: vnode,\n    _parentElm: parentElm || null,\n    _refElm: refElm || null\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnode.componentOptions.Ctor(options)\n}\n\nfunction mergeHooks (data) {\n  if (!data.hook) {\n    data.hook = {};\n  }\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var fromParent = data.hook[key];\n    var ours = componentVNodeHooks[key];\n    data.hook[key] = fromParent ? mergeHook$1(ours, fromParent) : ours;\n  }\n}\n\nfunction mergeHook$1 (one, two) {\n  return function (a, b, c, d) {\n    one(a, b, c, d);\n    two(a, b, c, d);\n  }\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input';(data.props || (data.props = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  if (isDef(on[event])) {\n    on[event] = [data.model.callback].concat(on[event]);\n  } else {\n    on[event] = data.model.callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if (process.env.NODE_ENV !== 'production' &&\n    isDef(data) && isDef(data.key) && !isPrimitive(data.key)\n  ) {\n    {\n      warn(\n        'Avoid using non-primitive value as key, ' +\n        'use string/number value instead.',\n        context\n      );\n    }\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (isDef(vnode)) {\n    if (ns) { applyNS(vnode, ns); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns, force) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    ns = undefined;\n    force = true;\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && (isUndef(child.ns) || isTrue(force))) {\n        applyNS(child, ns, force);\n      }\n    }\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (process.env.NODE_ENV !== 'production') {\n    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  } else {\n    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true);\n    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, null, true);\n  }\n}\n\nfunction renderMixin (Vue) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype);\n\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    if (vm._isMounted) {\n      // if the parent didn't update, the slot nodes will be the ones from\n      // last render. They need to be cloned to ensure \"freshness\" for this render.\n      for (var key in vm.$slots) {\n        var slot = vm.$slots[key];\n        // _rendered is a flag added by renderSlot, but may not be present\n        // if the slot is passed from manually written render functions\n        if (slot._rendered || (slot[0] && slot[0].elm)) {\n          vm.$slots[key] = cloneVNodes(slot, true /* deep */);\n        }\n      }\n    }\n\n    vm.$scopedSlots = (_parentVnode && _parentVnode.data.scopedSlots) || emptyObject;\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production') {\n        if (vm.$options.renderError) {\n          try {\n            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n          } catch (e) {\n            handleError(e, vm, \"renderError\");\n            vnode = vm._vnode;\n          }\n        } else {\n          vnode = vm._vnode;\n        }\n      } else {\n        vnode = vm._vnode;\n      }\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n}\n\n/*  */\n\nvar uid$1 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$1++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      startTag = \"vue-perf-start:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      initProxy(vm);\n    } else {\n      vm._renderProxy = vm;\n    }\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    initInjections(vm); // resolve injections before data/props\n    initState(vm);\n    initProvide(vm); // resolve provide after data/props\n    callHook(vm, 'created');\n\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure((\"vue \" + (vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  var parentVnode = options._parentVnode;\n  opts.parent = options.parent;\n  opts._parentVnode = parentVnode;\n  opts._parentElm = options._parentElm;\n  opts._refElm = options._refElm;\n\n  var vnodeComponentOptions = parentVnode.componentOptions;\n  opts.propsData = vnodeComponentOptions.propsData;\n  opts._parentListeners = vnodeComponentOptions.listeners;\n  opts._renderChildren = vnodeComponentOptions.children;\n  opts._componentTag = vnodeComponentOptions.tag;\n\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var extended = Ctor.extendOptions;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = dedupe(latest[key], extended[key], sealed[key]);\n    }\n  }\n  return modified\n}\n\nfunction dedupe (latest, extended, sealed) {\n  // compare latest and sealed to ensure lifecycle hooks won't be duplicated\n  // between merges\n  if (Array.isArray(latest)) {\n    var res = [];\n    sealed = Array.isArray(sealed) ? sealed : [sealed];\n    extended = Array.isArray(extended) ? extended : [extended];\n    for (var i = 0; i < latest.length; i++) {\n      // push original options and not sealed options to exclude duplicated options\n      if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {\n        res.push(latest[i]);\n      }\n    }\n    return res\n  } else {\n    return latest\n  }\n}\n\nfunction Vue$3 (options) {\n  if (process.env.NODE_ENV !== 'production' &&\n    !(this instanceof Vue$3)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue$3);\nstateMixin(Vue$3);\neventsMixin(Vue$3);\nlifecycleMixin(Vue$3);\nrenderMixin(Vue$3);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if (process.env.NODE_ENV !== 'production' && name) {\n      validateComponentName(name);\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV !== 'production' && type === 'component') {\n          validateComponentName(id);\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (keepAliveInstance, filter) {\n  var cache = keepAliveInstance.cache;\n  var keys = keepAliveInstance.keys;\n  var _vnode = keepAliveInstance._vnode;\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode);\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (\n  cache,\n  key,\n  keys,\n  current\n) {\n  var cached$$1 = cache[key];\n  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\n    cached$$1.componentInstance.$destroy();\n  }\n  cache[key] = null;\n  remove(keys, key);\n}\n\nvar patternTypes = [String, RegExp, Array];\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n    this.keys = [];\n  },\n\n  destroyed: function destroyed () {\n    var this$1 = this;\n\n    for (var key in this$1.cache) {\n      pruneCacheEntry(this$1.cache, key, this$1.keys);\n    }\n  },\n\n  watch: {\n    include: function include (val) {\n      pruneCache(this, function (name) { return matches(val, name); });\n    },\n    exclude: function exclude (val) {\n      pruneCache(this, function (name) { return !matches(val, name); });\n    }\n  },\n\n  render: function render () {\n    var slot = this.$slots.default;\n    var vnode = getFirstComponentChild(slot);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      var ref = this;\n      var include = ref.include;\n      var exclude = ref.exclude;\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      var ref$1 = this;\n      var cache = ref$1.cache;\n      var keys = ref$1.keys;\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance;\n        // make current key freshest\n        remove(keys, key);\n        keys.push(key);\n      } else {\n        cache[key] = vnode;\n        keys.push(key);\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode);\n        }\n      }\n\n      vnode.data.keepAlive = true;\n    }\n    return vnode || (slot && slot[0])\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (process.env.NODE_ENV !== 'production') {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue$3);\n\nObject.defineProperty(Vue$3.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue$3.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\nVue$3.version = '2.5.13';\n\n/*  */\n\n// these are reserved for web because they are directly compiled away\n// during template compilation\nvar isReservedAttr = makeMap('style,class');\n\n// attributes that should be using props for binding\nvar acceptValue = makeMap('input,textarea,option,select,progress');\nvar mustUseProp = function (tag, type, attr) {\n  return (\n    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||\n    (attr === 'selected' && tag === 'option') ||\n    (attr === 'checked' && tag === 'input') ||\n    (attr === 'muted' && tag === 'video')\n  )\n};\n\nvar isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\n\nvar isBooleanAttr = makeMap(\n  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +\n  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +\n  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +\n  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +\n  'required,reversed,scoped,seamless,selected,sortable,translate,' +\n  'truespeed,typemustmatch,visible'\n);\n\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\n\nvar isXlink = function (name) {\n  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'\n};\n\nvar getXlinkProp = function (name) {\n  return isXlink(name) ? name.slice(6, name.length) : ''\n};\n\nvar isFalsyAttrValue = function (val) {\n  return val == null || val === false\n};\n\n/*  */\n\nfunction genClassForVnode (vnode) {\n  var data = vnode.data;\n  var parentNode = vnode;\n  var childNode = vnode;\n  while (isDef(childNode.componentInstance)) {\n    childNode = childNode.componentInstance._vnode;\n    if (childNode && childNode.data) {\n      data = mergeClassData(childNode.data, data);\n    }\n  }\n  while (isDef(parentNode = parentNode.parent)) {\n    if (parentNode && parentNode.data) {\n      data = mergeClassData(data, parentNode.data);\n    }\n  }\n  return renderClass(data.staticClass, data.class)\n}\n\nfunction mergeClassData (child, parent) {\n  return {\n    staticClass: concat(child.staticClass, parent.staticClass),\n    class: isDef(child.class)\n      ? [child.class, parent.class]\n      : parent.class\n  }\n}\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar namespaceMap = {\n  svg: 'http://www.w3.org/2000/svg',\n  math: 'http://www.w3.org/1998/Math/MathML'\n};\n\nvar isHTMLTag = makeMap(\n  'html,body,base,head,link,meta,style,title,' +\n  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +\n  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +\n  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +\n  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +\n  'embed,object,param,source,canvas,script,noscript,del,ins,' +\n  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +\n  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +\n  'output,progress,select,textarea,' +\n  'details,dialog,menu,menuitem,summary,' +\n  'content,element,shadow,template,blockquote,iframe,tfoot'\n);\n\n// this map is intentionally selective, only covering SVG elements that may\n// contain child elements.\nvar isSVG = makeMap(\n  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +\n  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +\n  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',\n  true\n);\n\nvar isPreTag = function (tag) { return tag === 'pre'; };\n\nvar isReservedTag = function (tag) {\n  return isHTMLTag(tag) || isSVG(tag)\n};\n\nfunction getTagNamespace (tag) {\n  if (isSVG(tag)) {\n    return 'svg'\n  }\n  // basic support for MathML\n  // note it doesn't support other MathML elements being component roots\n  if (tag === 'math') {\n    return 'math'\n  }\n}\n\nvar unknownElementCache = Object.create(null);\nfunction isUnknownElement (tag) {\n  /* istanbul ignore if */\n  if (!inBrowser) {\n    return true\n  }\n  if (isReservedTag(tag)) {\n    return false\n  }\n  tag = tag.toLowerCase();\n  /* istanbul ignore if */\n  if (unknownElementCache[tag] != null) {\n    return unknownElementCache[tag]\n  }\n  var el = document.createElement(tag);\n  if (tag.indexOf('-') > -1) {\n    // http://stackoverflow.com/a/28210364/1070244\n    return (unknownElementCache[tag] = (\n      el.constructor === window.HTMLUnknownElement ||\n      el.constructor === window.HTMLElement\n    ))\n  } else {\n    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))\n  }\n}\n\nvar isTextInputType = makeMap('text,number,password,search,email,tel,url');\n\n/*  */\n\n/**\n * Query an element selector if it's not an element already.\n */\nfunction query (el) {\n  if (typeof el === 'string') {\n    var selected = document.querySelector(el);\n    if (!selected) {\n      process.env.NODE_ENV !== 'production' && warn(\n        'Cannot find element: ' + el\n      );\n      return document.createElement('div')\n    }\n    return selected\n  } else {\n    return el\n  }\n}\n\n/*  */\n\nfunction createElement$1 (tagName, vnode) {\n  var elm = document.createElement(tagName);\n  if (tagName !== 'select') {\n    return elm\n  }\n  // false or null will remove the attribute but undefined will not\n  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {\n    elm.setAttribute('multiple', 'multiple');\n  }\n  return elm\n}\n\nfunction createElementNS (namespace, tagName) {\n  return document.createElementNS(namespaceMap[namespace], tagName)\n}\n\nfunction createTextNode (text) {\n  return document.createTextNode(text)\n}\n\nfunction createComment (text) {\n  return document.createComment(text)\n}\n\nfunction insertBefore (parentNode, newNode, referenceNode) {\n  parentNode.insertBefore(newNode, referenceNode);\n}\n\nfunction removeChild (node, child) {\n  node.removeChild(child);\n}\n\nfunction appendChild (node, child) {\n  node.appendChild(child);\n}\n\nfunction parentNode (node) {\n  return node.parentNode\n}\n\nfunction nextSibling (node) {\n  return node.nextSibling\n}\n\nfunction tagName (node) {\n  return node.tagName\n}\n\nfunction setTextContent (node, text) {\n  node.textContent = text;\n}\n\nfunction setAttribute (node, key, val) {\n  node.setAttribute(key, val);\n}\n\n\nvar nodeOps = Object.freeze({\n\tcreateElement: createElement$1,\n\tcreateElementNS: createElementNS,\n\tcreateTextNode: createTextNode,\n\tcreateComment: createComment,\n\tinsertBefore: insertBefore,\n\tremoveChild: removeChild,\n\tappendChild: appendChild,\n\tparentNode: parentNode,\n\tnextSibling: nextSibling,\n\ttagName: tagName,\n\tsetTextContent: setTextContent,\n\tsetAttribute: setAttribute\n});\n\n/*  */\n\nvar ref = {\n  create: function create (_, vnode) {\n    registerRef(vnode);\n  },\n  update: function update (oldVnode, vnode) {\n    if (oldVnode.data.ref !== vnode.data.ref) {\n      registerRef(oldVnode, true);\n      registerRef(vnode);\n    }\n  },\n  destroy: function destroy (vnode) {\n    registerRef(vnode, true);\n  }\n};\n\nfunction registerRef (vnode, isRemoval) {\n  var key = vnode.data.ref;\n  if (!key) { return }\n\n  var vm = vnode.context;\n  var ref = vnode.componentInstance || vnode.elm;\n  var refs = vm.$refs;\n  if (isRemoval) {\n    if (Array.isArray(refs[key])) {\n      remove(refs[key], ref);\n    } else if (refs[key] === ref) {\n      refs[key] = undefined;\n    }\n  } else {\n    if (vnode.data.refInFor) {\n      if (!Array.isArray(refs[key])) {\n        refs[key] = [ref];\n      } else if (refs[key].indexOf(ref) < 0) {\n        // $flow-disable-line\n        refs[key].push(ref);\n      }\n    } else {\n      refs[key] = ref;\n    }\n  }\n}\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/paldepind/snabbdom/blob/master/LICENSE\n *\n * modified by Evan You (@yyx990803)\n *\n * Not type-checking this because this file is perf-critical and the cost\n * of making flow understand it is not worth it.\n */\n\nvar emptyNode = new VNode('', {}, []);\n\nvar hooks = ['create', 'activate', 'update', 'remove', 'destroy'];\n\nfunction sameVnode (a, b) {\n  return (\n    a.key === b.key && (\n      (\n        a.tag === b.tag &&\n        a.isComment === b.isComment &&\n        isDef(a.data) === isDef(b.data) &&\n        sameInputType(a, b)\n      ) || (\n        isTrue(a.isAsyncPlaceholder) &&\n        a.asyncFactory === b.asyncFactory &&\n        isUndef(b.asyncFactory.error)\n      )\n    )\n  )\n}\n\nfunction sameInputType (a, b) {\n  if (a.tag !== 'input') { return true }\n  var i;\n  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;\n  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;\n  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)\n}\n\nfunction createKeyToOldIdx (children, beginIdx, endIdx) {\n  var i, key;\n  var map = {};\n  for (i = beginIdx; i <= endIdx; ++i) {\n    key = children[i].key;\n    if (isDef(key)) { map[key] = i; }\n  }\n  return map\n}\n\nfunction createPatchFunction (backend) {\n  var i, j;\n  var cbs = {};\n\n  var modules = backend.modules;\n  var nodeOps = backend.nodeOps;\n\n  for (i = 0; i < hooks.length; ++i) {\n    cbs[hooks[i]] = [];\n    for (j = 0; j < modules.length; ++j) {\n      if (isDef(modules[j][hooks[i]])) {\n        cbs[hooks[i]].push(modules[j][hooks[i]]);\n      }\n    }\n  }\n\n  function emptyNodeAt (elm) {\n    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)\n  }\n\n  function createRmCb (childElm, listeners) {\n    function remove () {\n      if (--remove.listeners === 0) {\n        removeNode(childElm);\n      }\n    }\n    remove.listeners = listeners;\n    return remove\n  }\n\n  function removeNode (el) {\n    var parent = nodeOps.parentNode(el);\n    // element may have already been removed due to v-html / v-text\n    if (isDef(parent)) {\n      nodeOps.removeChild(parent, el);\n    }\n  }\n\n  function isUnknownElement$$1 (vnode, inVPre) {\n    return (\n      !inVPre &&\n      !vnode.ns &&\n      !(\n        config.ignoredElements.length &&\n        config.ignoredElements.some(function (ignore) {\n          return isRegExp(ignore)\n            ? ignore.test(vnode.tag)\n            : ignore === vnode.tag\n        })\n      ) &&\n      config.isUnknownElement(vnode.tag)\n    )\n  }\n\n  var creatingElmInVPre = 0;\n  function createElm (vnode, insertedVnodeQueue, parentElm, refElm, nested) {\n    vnode.isRootInsert = !nested; // for transition enter check\n    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\n      return\n    }\n\n    var data = vnode.data;\n    var children = vnode.children;\n    var tag = vnode.tag;\n    if (isDef(tag)) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (data && data.pre) {\n          creatingElmInVPre++;\n        }\n        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {\n          warn(\n            'Unknown custom element: <' + tag + '> - did you ' +\n            'register the component correctly? For recursive components, ' +\n            'make sure to provide the \"name\" option.',\n            vnode.context\n          );\n        }\n      }\n      vnode.elm = vnode.ns\n        ? nodeOps.createElementNS(vnode.ns, tag)\n        : nodeOps.createElement(tag, vnode);\n      setScope(vnode);\n\n      /* istanbul ignore if */\n      {\n        createChildren(vnode, children, insertedVnodeQueue);\n        if (isDef(data)) {\n          invokeCreateHooks(vnode, insertedVnodeQueue);\n        }\n        insert(parentElm, vnode.elm, refElm);\n      }\n\n      if (process.env.NODE_ENV !== 'production' && data && data.pre) {\n        creatingElmInVPre--;\n      }\n    } else if (isTrue(vnode.isComment)) {\n      vnode.elm = nodeOps.createComment(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    } else {\n      vnode.elm = nodeOps.createTextNode(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    }\n  }\n\n  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i = vnode.data;\n    if (isDef(i)) {\n      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\n      if (isDef(i = i.hook) && isDef(i = i.init)) {\n        i(vnode, false /* hydrating */, parentElm, refElm);\n      }\n      // after calling the init hook, if the vnode is a child component\n      // it should've created a child instance and mounted it. the child\n      // component also has set the placeholder vnode's elm.\n      // in that case we can just return the element and be done.\n      if (isDef(vnode.componentInstance)) {\n        initComponent(vnode, insertedVnodeQueue);\n        if (isTrue(isReactivated)) {\n          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\n        }\n        return true\n      }\n    }\n  }\n\n  function initComponent (vnode, insertedVnodeQueue) {\n    if (isDef(vnode.data.pendingInsert)) {\n      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\n      vnode.data.pendingInsert = null;\n    }\n    vnode.elm = vnode.componentInstance.$el;\n    if (isPatchable(vnode)) {\n      invokeCreateHooks(vnode, insertedVnodeQueue);\n      setScope(vnode);\n    } else {\n      // empty component root.\n      // skip all element-related modules except for ref (#3455)\n      registerRef(vnode);\n      // make sure to invoke the insert hook\n      insertedVnodeQueue.push(vnode);\n    }\n  }\n\n  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i;\n    // hack for #4339: a reactivated component with inner transition\n    // does not trigger because the inner node's created hooks are not called\n    // again. It's not ideal to involve module-specific logic in here but\n    // there doesn't seem to be a better way to do it.\n    var innerNode = vnode;\n    while (innerNode.componentInstance) {\n      innerNode = innerNode.componentInstance._vnode;\n      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {\n        for (i = 0; i < cbs.activate.length; ++i) {\n          cbs.activate[i](emptyNode, innerNode);\n        }\n        insertedVnodeQueue.push(innerNode);\n        break\n      }\n    }\n    // unlike a newly created component,\n    // a reactivated keep-alive component doesn't insert itself\n    insert(parentElm, vnode.elm, refElm);\n  }\n\n  function insert (parent, elm, ref$$1) {\n    if (isDef(parent)) {\n      if (isDef(ref$$1)) {\n        if (ref$$1.parentNode === parent) {\n          nodeOps.insertBefore(parent, elm, ref$$1);\n        }\n      } else {\n        nodeOps.appendChild(parent, elm);\n      }\n    }\n  }\n\n  function createChildren (vnode, children, insertedVnodeQueue) {\n    if (Array.isArray(children)) {\n      if (process.env.NODE_ENV !== 'production') {\n        checkDuplicateKeys(children);\n      }\n      for (var i = 0; i < children.length; ++i) {\n        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true);\n      }\n    } else if (isPrimitive(vnode.text)) {\n      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));\n    }\n  }\n\n  function isPatchable (vnode) {\n    while (vnode.componentInstance) {\n      vnode = vnode.componentInstance._vnode;\n    }\n    return isDef(vnode.tag)\n  }\n\n  function invokeCreateHooks (vnode, insertedVnodeQueue) {\n    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n      cbs.create[i$1](emptyNode, vnode);\n    }\n    i = vnode.data.hook; // Reuse variable\n    if (isDef(i)) {\n      if (isDef(i.create)) { i.create(emptyNode, vnode); }\n      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }\n    }\n  }\n\n  // set scope id attribute for scoped CSS.\n  // this is implemented as a special case to avoid the overhead\n  // of going through the normal attribute patching process.\n  function setScope (vnode) {\n    var i;\n    if (isDef(i = vnode.fnScopeId)) {\n      nodeOps.setAttribute(vnode.elm, i, '');\n    } else {\n      var ancestor = vnode;\n      while (ancestor) {\n        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {\n          nodeOps.setAttribute(vnode.elm, i, '');\n        }\n        ancestor = ancestor.parent;\n      }\n    }\n    // for slot content they should also get the scopeId from the host instance.\n    if (isDef(i = activeInstance) &&\n      i !== vnode.context &&\n      i !== vnode.fnContext &&\n      isDef(i = i.$options._scopeId)\n    ) {\n      nodeOps.setAttribute(vnode.elm, i, '');\n    }\n  }\n\n  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm);\n    }\n  }\n\n  function invokeDestroyHook (vnode) {\n    var i, j;\n    var data = vnode.data;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }\n      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }\n    }\n    if (isDef(i = vnode.children)) {\n      for (j = 0; j < vnode.children.length; ++j) {\n        invokeDestroyHook(vnode.children[j]);\n      }\n    }\n  }\n\n  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      var ch = vnodes[startIdx];\n      if (isDef(ch)) {\n        if (isDef(ch.tag)) {\n          removeAndInvokeRemoveHook(ch);\n          invokeDestroyHook(ch);\n        } else { // Text node\n          removeNode(ch.elm);\n        }\n      }\n    }\n  }\n\n  function removeAndInvokeRemoveHook (vnode, rm) {\n    if (isDef(rm) || isDef(vnode.data)) {\n      var i;\n      var listeners = cbs.remove.length + 1;\n      if (isDef(rm)) {\n        // we have a recursively passed down rm callback\n        // increase the listeners count\n        rm.listeners += listeners;\n      } else {\n        // directly removing\n        rm = createRmCb(vnode.elm, listeners);\n      }\n      // recursively invoke hooks on child component root node\n      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {\n        removeAndInvokeRemoveHook(i, rm);\n      }\n      for (i = 0; i < cbs.remove.length; ++i) {\n        cbs.remove[i](vnode, rm);\n      }\n      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {\n        i(vnode, rm);\n      } else {\n        rm();\n      }\n    } else {\n      removeNode(vnode.elm);\n    }\n  }\n\n  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    var oldStartIdx = 0;\n    var newStartIdx = 0;\n    var oldEndIdx = oldCh.length - 1;\n    var oldStartVnode = oldCh[0];\n    var oldEndVnode = oldCh[oldEndIdx];\n    var newEndIdx = newCh.length - 1;\n    var newStartVnode = newCh[0];\n    var newEndVnode = newCh[newEndIdx];\n    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;\n\n    // removeOnly is a special flag used only by <transition-group>\n    // to ensure removed elements stay in correct relative positions\n    // during leaving transitions\n    var canMove = !removeOnly;\n\n    if (process.env.NODE_ENV !== 'production') {\n      checkDuplicateKeys(newCh);\n    }\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n      } else if (isUndef(oldEndVnode)) {\n        oldEndVnode = oldCh[--oldEndIdx];\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n        oldStartVnode = oldCh[++oldStartIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n        oldStartVnode = oldCh[++oldStartIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }\n        idxInOld = isDef(newStartVnode.key)\n          ? oldKeyToIdx[newStartVnode.key]\n          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);\n        if (isUndef(idxInOld)) { // New element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);\n        } else {\n          vnodeToMove = oldCh[idxInOld];\n          if (sameVnode(vnodeToMove, newStartVnode)) {\n            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue);\n            oldCh[idxInOld] = undefined;\n            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);\n          }\n        }\n        newStartVnode = newCh[++newStartIdx];\n      }\n    }\n    if (oldStartIdx > oldEndIdx) {\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n    } else if (newStartIdx > newEndIdx) {\n      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n    }\n  }\n\n  function checkDuplicateKeys (children) {\n    var seenKeys = {};\n    for (var i = 0; i < children.length; i++) {\n      var vnode = children[i];\n      var key = vnode.key;\n      if (isDef(key)) {\n        if (seenKeys[key]) {\n          warn(\n            (\"Duplicate keys detected: '\" + key + \"'. This may cause an update error.\"),\n            vnode.context\n          );\n        } else {\n          seenKeys[key] = true;\n        }\n      }\n    }\n  }\n\n  function findIdxInOld (node, oldCh, start, end) {\n    for (var i = start; i < end; i++) {\n      var c = oldCh[i];\n      if (isDef(c) && sameVnode(node, c)) { return i }\n    }\n  }\n\n  function patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) {\n    if (oldVnode === vnode) {\n      return\n    }\n\n    var elm = vnode.elm = oldVnode.elm;\n\n    if (isTrue(oldVnode.isAsyncPlaceholder)) {\n      if (isDef(vnode.asyncFactory.resolved)) {\n        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);\n      } else {\n        vnode.isAsyncPlaceholder = true;\n      }\n      return\n    }\n\n    // reuse element for static trees.\n    // note we only do this if the vnode is cloned -\n    // if the new node is not cloned it means the render functions have been\n    // reset by the hot-reload-api and we need to do a proper re-render.\n    if (isTrue(vnode.isStatic) &&\n      isTrue(oldVnode.isStatic) &&\n      vnode.key === oldVnode.key &&\n      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))\n    ) {\n      vnode.componentInstance = oldVnode.componentInstance;\n      return\n    }\n\n    var i;\n    var data = vnode.data;\n    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {\n      i(oldVnode, vnode);\n    }\n\n    var oldCh = oldVnode.children;\n    var ch = vnode.children;\n    if (isDef(data) && isPatchable(vnode)) {\n      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }\n      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }\n    }\n    if (isUndef(vnode.text)) {\n      if (isDef(oldCh) && isDef(ch)) {\n        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }\n      } else if (isDef(ch)) {\n        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n      } else if (isDef(oldCh)) {\n        removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n      } else if (isDef(oldVnode.text)) {\n        nodeOps.setTextContent(elm, '');\n      }\n    } else if (oldVnode.text !== vnode.text) {\n      nodeOps.setTextContent(elm, vnode.text);\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }\n    }\n  }\n\n  function invokeInsertHook (vnode, queue, initial) {\n    // delay insert hooks for component root nodes, invoke them after the\n    // element is really inserted\n    if (isTrue(initial) && isDef(vnode.parent)) {\n      vnode.parent.data.pendingInsert = queue;\n    } else {\n      for (var i = 0; i < queue.length; ++i) {\n        queue[i].data.hook.insert(queue[i]);\n      }\n    }\n  }\n\n  var hydrationBailed = false;\n  // list of modules that can skip create hook during hydration because they\n  // are already rendered on the client or has no need for initialization\n  // Note: style is excluded because it relies on initial clone for future\n  // deep updates (#7063).\n  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');\n\n  // Note: this is a browser-only function so we can assume elms are DOM nodes.\n  function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {\n    var i;\n    var tag = vnode.tag;\n    var data = vnode.data;\n    var children = vnode.children;\n    inVPre = inVPre || (data && data.pre);\n    vnode.elm = elm;\n\n    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {\n      vnode.isAsyncPlaceholder = true;\n      return true\n    }\n    // assert node match\n    if (process.env.NODE_ENV !== 'production') {\n      if (!assertNodeMatch(elm, vnode, inVPre)) {\n        return false\n      }\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }\n      if (isDef(i = vnode.componentInstance)) {\n        // child component. it should have hydrated its own tree.\n        initComponent(vnode, insertedVnodeQueue);\n        return true\n      }\n    }\n    if (isDef(tag)) {\n      if (isDef(children)) {\n        // empty element, allow client to pick up and populate children\n        if (!elm.hasChildNodes()) {\n          createChildren(vnode, children, insertedVnodeQueue);\n        } else {\n          // v-html and domProps: innerHTML\n          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {\n            if (i !== elm.innerHTML) {\n              /* istanbul ignore if */\n              if (process.env.NODE_ENV !== 'production' &&\n                typeof console !== 'undefined' &&\n                !hydrationBailed\n              ) {\n                hydrationBailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('server innerHTML: ', i);\n                console.warn('client innerHTML: ', elm.innerHTML);\n              }\n              return false\n            }\n          } else {\n            // iterate and compare children lists\n            var childrenMatch = true;\n            var childNode = elm.firstChild;\n            for (var i$1 = 0; i$1 < children.length; i$1++) {\n              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {\n                childrenMatch = false;\n                break\n              }\n              childNode = childNode.nextSibling;\n            }\n            // if childNode is not null, it means the actual childNodes list is\n            // longer than the virtual children list.\n            if (!childrenMatch || childNode) {\n              /* istanbul ignore if */\n              if (process.env.NODE_ENV !== 'production' &&\n                typeof console !== 'undefined' &&\n                !hydrationBailed\n              ) {\n                hydrationBailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);\n              }\n              return false\n            }\n          }\n        }\n      }\n      if (isDef(data)) {\n        var fullInvoke = false;\n        for (var key in data) {\n          if (!isRenderedModule(key)) {\n            fullInvoke = true;\n            invokeCreateHooks(vnode, insertedVnodeQueue);\n            break\n          }\n        }\n        if (!fullInvoke && data['class']) {\n          // ensure collecting deps for deep class bindings for future updates\n          traverse(data['class']);\n        }\n      }\n    } else if (elm.data !== vnode.text) {\n      elm.data = vnode.text;\n    }\n    return true\n  }\n\n  function assertNodeMatch (node, vnode, inVPre) {\n    if (isDef(vnode.tag)) {\n      return vnode.tag.indexOf('vue-component') === 0 || (\n        !isUnknownElement$$1(vnode, inVPre) &&\n        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())\n      )\n    } else {\n      return node.nodeType === (vnode.isComment ? 8 : 3)\n    }\n  }\n\n  return function patch (oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {\n    if (isUndef(vnode)) {\n      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }\n      return\n    }\n\n    var isInitialPatch = false;\n    var insertedVnodeQueue = [];\n\n    if (isUndef(oldVnode)) {\n      // empty mount (likely as component), create new root element\n      isInitialPatch = true;\n      createElm(vnode, insertedVnodeQueue, parentElm, refElm);\n    } else {\n      var isRealElement = isDef(oldVnode.nodeType);\n      if (!isRealElement && sameVnode(oldVnode, vnode)) {\n        // patch existing root node\n        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);\n      } else {\n        if (isRealElement) {\n          // mounting to a real element\n          // check if this is server-rendered content and if we can perform\n          // a successful hydration.\n          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\n            oldVnode.removeAttribute(SSR_ATTR);\n            hydrating = true;\n          }\n          if (isTrue(hydrating)) {\n            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n              invokeInsertHook(vnode, insertedVnodeQueue, true);\n              return oldVnode\n            } else if (process.env.NODE_ENV !== 'production') {\n              warn(\n                'The client-side rendered virtual DOM tree is not matching ' +\n                'server-rendered content. This is likely caused by incorrect ' +\n                'HTML markup, for example nesting block-level elements inside ' +\n                '<p>, or missing <tbody>. Bailing hydration and performing ' +\n                'full client-side render.'\n              );\n            }\n          }\n          // either not server-rendered, or hydration failed.\n          // create an empty node and replace it\n          oldVnode = emptyNodeAt(oldVnode);\n        }\n\n        // replacing existing element\n        var oldElm = oldVnode.elm;\n        var parentElm$1 = nodeOps.parentNode(oldElm);\n\n        // create new node\n        createElm(\n          vnode,\n          insertedVnodeQueue,\n          // extremely rare edge case: do not insert if old element is in a\n          // leaving transition. Only happens when combining transition +\n          // keep-alive + HOCs. (#4590)\n          oldElm._leaveCb ? null : parentElm$1,\n          nodeOps.nextSibling(oldElm)\n        );\n\n        // update parent placeholder node element, recursively\n        if (isDef(vnode.parent)) {\n          var ancestor = vnode.parent;\n          var patchable = isPatchable(vnode);\n          while (ancestor) {\n            for (var i = 0; i < cbs.destroy.length; ++i) {\n              cbs.destroy[i](ancestor);\n            }\n            ancestor.elm = vnode.elm;\n            if (patchable) {\n              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n                cbs.create[i$1](emptyNode, ancestor);\n              }\n              // #6513\n              // invoke insert hooks that may have been merged by create hooks.\n              // e.g. for directives that uses the \"inserted\" hook.\n              var insert = ancestor.data.hook.insert;\n              if (insert.merged) {\n                // start at index 1 to avoid re-invoking component mounted hook\n                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {\n                  insert.fns[i$2]();\n                }\n              }\n            } else {\n              registerRef(ancestor);\n            }\n            ancestor = ancestor.parent;\n          }\n        }\n\n        // destroy old node\n        if (isDef(parentElm$1)) {\n          removeVnodes(parentElm$1, [oldVnode], 0, 0);\n        } else if (isDef(oldVnode.tag)) {\n          invokeDestroyHook(oldVnode);\n        }\n      }\n    }\n\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n    return vnode.elm\n  }\n}\n\n/*  */\n\nvar directives = {\n  create: updateDirectives,\n  update: updateDirectives,\n  destroy: function unbindDirectives (vnode) {\n    updateDirectives(vnode, emptyNode);\n  }\n};\n\nfunction updateDirectives (oldVnode, vnode) {\n  if (oldVnode.data.directives || vnode.data.directives) {\n    _update(oldVnode, vnode);\n  }\n}\n\nfunction _update (oldVnode, vnode) {\n  var isCreate = oldVnode === emptyNode;\n  var isDestroy = vnode === emptyNode;\n  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);\n  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);\n\n  var dirsWithInsert = [];\n  var dirsWithPostpatch = [];\n\n  var key, oldDir, dir;\n  for (key in newDirs) {\n    oldDir = oldDirs[key];\n    dir = newDirs[key];\n    if (!oldDir) {\n      // new directive, bind\n      callHook$1(dir, 'bind', vnode, oldVnode);\n      if (dir.def && dir.def.inserted) {\n        dirsWithInsert.push(dir);\n      }\n    } else {\n      // existing directive, update\n      dir.oldValue = oldDir.value;\n      callHook$1(dir, 'update', vnode, oldVnode);\n      if (dir.def && dir.def.componentUpdated) {\n        dirsWithPostpatch.push(dir);\n      }\n    }\n  }\n\n  if (dirsWithInsert.length) {\n    var callInsert = function () {\n      for (var i = 0; i < dirsWithInsert.length; i++) {\n        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);\n      }\n    };\n    if (isCreate) {\n      mergeVNodeHook(vnode, 'insert', callInsert);\n    } else {\n      callInsert();\n    }\n  }\n\n  if (dirsWithPostpatch.length) {\n    mergeVNodeHook(vnode, 'postpatch', function () {\n      for (var i = 0; i < dirsWithPostpatch.length; i++) {\n        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\n      }\n    });\n  }\n\n  if (!isCreate) {\n    for (key in oldDirs) {\n      if (!newDirs[key]) {\n        // no longer present, unbind\n        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\n      }\n    }\n  }\n}\n\nvar emptyModifiers = Object.create(null);\n\nfunction normalizeDirectives$1 (\n  dirs,\n  vm\n) {\n  var res = Object.create(null);\n  if (!dirs) {\n    // $flow-disable-line\n    return res\n  }\n  var i, dir;\n  for (i = 0; i < dirs.length; i++) {\n    dir = dirs[i];\n    if (!dir.modifiers) {\n      // $flow-disable-line\n      dir.modifiers = emptyModifiers;\n    }\n    res[getRawDirName(dir)] = dir;\n    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);\n  }\n  // $flow-disable-line\n  return res\n}\n\nfunction getRawDirName (dir) {\n  return dir.rawName || ((dir.name) + \".\" + (Object.keys(dir.modifiers || {}).join('.')))\n}\n\nfunction callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {\n  var fn = dir.def && dir.def[hook];\n  if (fn) {\n    try {\n      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\n    } catch (e) {\n      handleError(e, vnode.context, (\"directive \" + (dir.name) + \" \" + hook + \" hook\"));\n    }\n  }\n}\n\nvar baseModules = [\n  ref,\n  directives\n];\n\n/*  */\n\nfunction updateAttrs (oldVnode, vnode) {\n  var opts = vnode.componentOptions;\n  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {\n    return\n  }\n  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {\n    return\n  }\n  var key, cur, old;\n  var elm = vnode.elm;\n  var oldAttrs = oldVnode.data.attrs || {};\n  var attrs = vnode.data.attrs || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(attrs.__ob__)) {\n    attrs = vnode.data.attrs = extend({}, attrs);\n  }\n\n  for (key in attrs) {\n    cur = attrs[key];\n    old = oldAttrs[key];\n    if (old !== cur) {\n      setAttr(elm, key, cur);\n    }\n  }\n  // #4391: in IE9, setting type can reset value for input[type=radio]\n  // #6666: IE/Edge forces progress value down to 1 before setting a max\n  /* istanbul ignore if */\n  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {\n    setAttr(elm, 'value', attrs.value);\n  }\n  for (key in oldAttrs) {\n    if (isUndef(attrs[key])) {\n      if (isXlink(key)) {\n        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\n      } else if (!isEnumeratedAttr(key)) {\n        elm.removeAttribute(key);\n      }\n    }\n  }\n}\n\nfunction setAttr (el, key, value) {\n  if (isBooleanAttr(key)) {\n    // set attribute for blank value\n    // e.g. <option disabled>Select one</option>\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      // technically allowfullscreen is a boolean attribute for <iframe>,\n      // but Flash expects a value of \"true\" when used on <embed> tag\n      value = key === 'allowfullscreen' && el.tagName === 'EMBED'\n        ? 'true'\n        : key;\n      el.setAttribute(key, value);\n    }\n  } else if (isEnumeratedAttr(key)) {\n    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');\n  } else if (isXlink(key)) {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttributeNS(xlinkNS, getXlinkProp(key));\n    } else {\n      el.setAttributeNS(xlinkNS, key, value);\n    }\n  } else {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      // #7138: IE10 & 11 fires input event when setting placeholder on\n      // <textarea>... block the first input event and remove the blocker\n      // immediately.\n      /* istanbul ignore if */\n      if (\n        isIE && !isIE9 &&\n        el.tagName === 'TEXTAREA' &&\n        key === 'placeholder' && !el.__ieph\n      ) {\n        var blocker = function (e) {\n          e.stopImmediatePropagation();\n          el.removeEventListener('input', blocker);\n        };\n        el.addEventListener('input', blocker);\n        // $flow-disable-line\n        el.__ieph = true; /* IE placeholder patched */\n      }\n      el.setAttribute(key, value);\n    }\n  }\n}\n\nvar attrs = {\n  create: updateAttrs,\n  update: updateAttrs\n};\n\n/*  */\n\nfunction updateClass (oldVnode, vnode) {\n  var el = vnode.elm;\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n  if (\n    isUndef(data.staticClass) &&\n    isUndef(data.class) && (\n      isUndef(oldData) || (\n        isUndef(oldData.staticClass) &&\n        isUndef(oldData.class)\n      )\n    )\n  ) {\n    return\n  }\n\n  var cls = genClassForVnode(vnode);\n\n  // handle transition classes\n  var transitionClass = el._transitionClasses;\n  if (isDef(transitionClass)) {\n    cls = concat(cls, stringifyClass(transitionClass));\n  }\n\n  // set the class\n  if (cls !== el._prevClass) {\n    el.setAttribute('class', cls);\n    el._prevClass = cls;\n  }\n}\n\nvar klass = {\n  create: updateClass,\n  update: updateClass\n};\n\n/*  */\n\nvar validDivisionCharRE = /[\\w).+\\-_$\\]]/;\n\nfunction parseFilters (exp) {\n  var inSingle = false;\n  var inDouble = false;\n  var inTemplateString = false;\n  var inRegex = false;\n  var curly = 0;\n  var square = 0;\n  var paren = 0;\n  var lastFilterIndex = 0;\n  var c, prev, i, expression, filters;\n\n  for (i = 0; i < exp.length; i++) {\n    prev = c;\n    c = exp.charCodeAt(i);\n    if (inSingle) {\n      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }\n    } else if (inDouble) {\n      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }\n    } else if (inTemplateString) {\n      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }\n    } else if (inRegex) {\n      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }\n    } else if (\n      c === 0x7C && // pipe\n      exp.charCodeAt(i + 1) !== 0x7C &&\n      exp.charCodeAt(i - 1) !== 0x7C &&\n      !curly && !square && !paren\n    ) {\n      if (expression === undefined) {\n        // first filter, end of expression\n        lastFilterIndex = i + 1;\n        expression = exp.slice(0, i).trim();\n      } else {\n        pushFilter();\n      }\n    } else {\n      switch (c) {\n        case 0x22: inDouble = true; break         // \"\n        case 0x27: inSingle = true; break         // '\n        case 0x60: inTemplateString = true; break // `\n        case 0x28: paren++; break                 // (\n        case 0x29: paren--; break                 // )\n        case 0x5B: square++; break                // [\n        case 0x5D: square--; break                // ]\n        case 0x7B: curly++; break                 // {\n        case 0x7D: curly--; break                 // }\n      }\n      if (c === 0x2f) { // /\n        var j = i - 1;\n        var p = (void 0);\n        // find first non-whitespace prev char\n        for (; j >= 0; j--) {\n          p = exp.charAt(j);\n          if (p !== ' ') { break }\n        }\n        if (!p || !validDivisionCharRE.test(p)) {\n          inRegex = true;\n        }\n      }\n    }\n  }\n\n  if (expression === undefined) {\n    expression = exp.slice(0, i).trim();\n  } else if (lastFilterIndex !== 0) {\n    pushFilter();\n  }\n\n  function pushFilter () {\n    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());\n    lastFilterIndex = i + 1;\n  }\n\n  if (filters) {\n    for (i = 0; i < filters.length; i++) {\n      expression = wrapFilter(expression, filters[i]);\n    }\n  }\n\n  return expression\n}\n\nfunction wrapFilter (exp, filter) {\n  var i = filter.indexOf('(');\n  if (i < 0) {\n    // _f: resolveFilter\n    return (\"_f(\\\"\" + filter + \"\\\")(\" + exp + \")\")\n  } else {\n    var name = filter.slice(0, i);\n    var args = filter.slice(i + 1);\n    return (\"_f(\\\"\" + name + \"\\\")(\" + exp + \",\" + args)\n  }\n}\n\n/*  */\n\nfunction baseWarn (msg) {\n  console.error((\"[Vue compiler]: \" + msg));\n}\n\nfunction pluckModuleFunction (\n  modules,\n  key\n) {\n  return modules\n    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })\n    : []\n}\n\nfunction addProp (el, name, value) {\n  (el.props || (el.props = [])).push({ name: name, value: value });\n  el.plain = false;\n}\n\nfunction addAttr (el, name, value) {\n  (el.attrs || (el.attrs = [])).push({ name: name, value: value });\n  el.plain = false;\n}\n\n// add a raw attr (use this in preTransforms)\nfunction addRawAttr (el, name, value) {\n  el.attrsMap[name] = value;\n  el.attrsList.push({ name: name, value: value });\n}\n\nfunction addDirective (\n  el,\n  name,\n  rawName,\n  value,\n  arg,\n  modifiers\n) {\n  (el.directives || (el.directives = [])).push({ name: name, rawName: rawName, value: value, arg: arg, modifiers: modifiers });\n  el.plain = false;\n}\n\nfunction addHandler (\n  el,\n  name,\n  value,\n  modifiers,\n  important,\n  warn\n) {\n  modifiers = modifiers || emptyObject;\n  // warn prevent and passive modifier\n  /* istanbul ignore if */\n  if (\n    process.env.NODE_ENV !== 'production' && warn &&\n    modifiers.prevent && modifiers.passive\n  ) {\n    warn(\n      'passive and prevent can\\'t be used together. ' +\n      'Passive handler can\\'t prevent default event.'\n    );\n  }\n\n  // check capture modifier\n  if (modifiers.capture) {\n    delete modifiers.capture;\n    name = '!' + name; // mark the event as captured\n  }\n  if (modifiers.once) {\n    delete modifiers.once;\n    name = '~' + name; // mark the event as once\n  }\n  /* istanbul ignore if */\n  if (modifiers.passive) {\n    delete modifiers.passive;\n    name = '&' + name; // mark the event as passive\n  }\n\n  // normalize click.right and click.middle since they don't actually fire\n  // this is technically browser-specific, but at least for now browsers are\n  // the only target envs that have right/middle clicks.\n  if (name === 'click') {\n    if (modifiers.right) {\n      name = 'contextmenu';\n      delete modifiers.right;\n    } else if (modifiers.middle) {\n      name = 'mouseup';\n    }\n  }\n\n  var events;\n  if (modifiers.native) {\n    delete modifiers.native;\n    events = el.nativeEvents || (el.nativeEvents = {});\n  } else {\n    events = el.events || (el.events = {});\n  }\n\n  var newHandler = { value: value };\n  if (modifiers !== emptyObject) {\n    newHandler.modifiers = modifiers;\n  }\n\n  var handlers = events[name];\n  /* istanbul ignore if */\n  if (Array.isArray(handlers)) {\n    important ? handlers.unshift(newHandler) : handlers.push(newHandler);\n  } else if (handlers) {\n    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];\n  } else {\n    events[name] = newHandler;\n  }\n\n  el.plain = false;\n}\n\nfunction getBindingAttr (\n  el,\n  name,\n  getStatic\n) {\n  var dynamicValue =\n    getAndRemoveAttr(el, ':' + name) ||\n    getAndRemoveAttr(el, 'v-bind:' + name);\n  if (dynamicValue != null) {\n    return parseFilters(dynamicValue)\n  } else if (getStatic !== false) {\n    var staticValue = getAndRemoveAttr(el, name);\n    if (staticValue != null) {\n      return JSON.stringify(staticValue)\n    }\n  }\n}\n\n// note: this only removes the attr from the Array (attrsList) so that it\n// doesn't get processed by processAttrs.\n// By default it does NOT remove it from the map (attrsMap) because the map is\n// needed during codegen.\nfunction getAndRemoveAttr (\n  el,\n  name,\n  removeFromMap\n) {\n  var val;\n  if ((val = el.attrsMap[name]) != null) {\n    var list = el.attrsList;\n    for (var i = 0, l = list.length; i < l; i++) {\n      if (list[i].name === name) {\n        list.splice(i, 1);\n        break\n      }\n    }\n  }\n  if (removeFromMap) {\n    delete el.attrsMap[name];\n  }\n  return val\n}\n\n/*  */\n\n/**\n * Cross-platform code generation for component v-model\n */\nfunction genComponentModel (\n  el,\n  value,\n  modifiers\n) {\n  var ref = modifiers || {};\n  var number = ref.number;\n  var trim = ref.trim;\n\n  var baseValueExpression = '$$v';\n  var valueExpression = baseValueExpression;\n  if (trim) {\n    valueExpression =\n      \"(typeof \" + baseValueExpression + \" === 'string'\" +\n        \"? \" + baseValueExpression + \".trim()\" +\n        \": \" + baseValueExpression + \")\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n  var assignment = genAssignmentCode(value, valueExpression);\n\n  el.model = {\n    value: (\"(\" + value + \")\"),\n    expression: (\"\\\"\" + value + \"\\\"\"),\n    callback: (\"function (\" + baseValueExpression + \") {\" + assignment + \"}\")\n  };\n}\n\n/**\n * Cross-platform codegen helper for generating v-model value assignment code.\n */\nfunction genAssignmentCode (\n  value,\n  assignment\n) {\n  var res = parseModel(value);\n  if (res.key === null) {\n    return (value + \"=\" + assignment)\n  } else {\n    return (\"$set(\" + (res.exp) + \", \" + (res.key) + \", \" + assignment + \")\")\n  }\n}\n\n/**\n * Parse a v-model expression into a base path and a final key segment.\n * Handles both dot-path and possible square brackets.\n *\n * Possible cases:\n *\n * - test\n * - test[key]\n * - test[test1[key]]\n * - test[\"a\"][key]\n * - xxx.test[a[a].test1[key]]\n * - test.xxx.a[\"asa\"][test1[key]]\n *\n */\n\nvar len;\nvar str;\nvar chr;\nvar index$1;\nvar expressionPos;\nvar expressionEndPos;\n\n\n\nfunction parseModel (val) {\n  len = val.length;\n\n  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {\n    index$1 = val.lastIndexOf('.');\n    if (index$1 > -1) {\n      return {\n        exp: val.slice(0, index$1),\n        key: '\"' + val.slice(index$1 + 1) + '\"'\n      }\n    } else {\n      return {\n        exp: val,\n        key: null\n      }\n    }\n  }\n\n  str = val;\n  index$1 = expressionPos = expressionEndPos = 0;\n\n  while (!eof()) {\n    chr = next();\n    /* istanbul ignore if */\n    if (isStringStart(chr)) {\n      parseString(chr);\n    } else if (chr === 0x5B) {\n      parseBracket(chr);\n    }\n  }\n\n  return {\n    exp: val.slice(0, expressionPos),\n    key: val.slice(expressionPos + 1, expressionEndPos)\n  }\n}\n\nfunction next () {\n  return str.charCodeAt(++index$1)\n}\n\nfunction eof () {\n  return index$1 >= len\n}\n\nfunction isStringStart (chr) {\n  return chr === 0x22 || chr === 0x27\n}\n\nfunction parseBracket (chr) {\n  var inBracket = 1;\n  expressionPos = index$1;\n  while (!eof()) {\n    chr = next();\n    if (isStringStart(chr)) {\n      parseString(chr);\n      continue\n    }\n    if (chr === 0x5B) { inBracket++; }\n    if (chr === 0x5D) { inBracket--; }\n    if (inBracket === 0) {\n      expressionEndPos = index$1;\n      break\n    }\n  }\n}\n\nfunction parseString (chr) {\n  var stringQuote = chr;\n  while (!eof()) {\n    chr = next();\n    if (chr === stringQuote) {\n      break\n    }\n  }\n}\n\n/*  */\n\nvar warn$1;\n\n// in some cases, the event used has to be determined at runtime\n// so we used some reserved tokens during compile.\nvar RANGE_TOKEN = '__r';\nvar CHECKBOX_RADIO_TOKEN = '__c';\n\nfunction model (\n  el,\n  dir,\n  _warn\n) {\n  warn$1 = _warn;\n  var value = dir.value;\n  var modifiers = dir.modifiers;\n  var tag = el.tag;\n  var type = el.attrsMap.type;\n\n  if (process.env.NODE_ENV !== 'production') {\n    // inputs with type=\"file\" are read only and setting the input's\n    // value will throw an error.\n    if (tag === 'input' && type === 'file') {\n      warn$1(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\" type=\\\"file\\\">:\\n\" +\n        \"File inputs are read only. Use a v-on:change listener instead.\"\n      );\n    }\n  }\n\n  if (el.component) {\n    genComponentModel(el, value, modifiers);\n    // component v-model doesn't need extra runtime\n    return false\n  } else if (tag === 'select') {\n    genSelect(el, value, modifiers);\n  } else if (tag === 'input' && type === 'checkbox') {\n    genCheckboxModel(el, value, modifiers);\n  } else if (tag === 'input' && type === 'radio') {\n    genRadioModel(el, value, modifiers);\n  } else if (tag === 'input' || tag === 'textarea') {\n    genDefaultModel(el, value, modifiers);\n  } else if (!config.isReservedTag(tag)) {\n    genComponentModel(el, value, modifiers);\n    // component v-model doesn't need extra runtime\n    return false\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn$1(\n      \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n      \"v-model is not supported on this element type. \" +\n      'If you are working with contenteditable, it\\'s recommended to ' +\n      'wrap a library dedicated for that purpose inside a custom component.'\n    );\n  }\n\n  // ensure runtime directive metadata\n  return true\n}\n\nfunction genCheckboxModel (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';\n  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';\n  addProp(el, 'checked',\n    \"Array.isArray(\" + value + \")\" +\n    \"?_i(\" + value + \",\" + valueBinding + \")>-1\" + (\n      trueValueBinding === 'true'\n        ? (\":(\" + value + \")\")\n        : (\":_q(\" + value + \",\" + trueValueBinding + \")\")\n    )\n  );\n  addHandler(el, 'change',\n    \"var $$a=\" + value + \",\" +\n        '$$el=$event.target,' +\n        \"$$c=$$el.checked?(\" + trueValueBinding + \"):(\" + falseValueBinding + \");\" +\n    'if(Array.isArray($$a)){' +\n      \"var $$v=\" + (number ? '_n(' + valueBinding + ')' : valueBinding) + \",\" +\n          '$$i=_i($$a,$$v);' +\n      \"if($$el.checked){$$i<0&&(\" + value + \"=$$a.concat([$$v]))}\" +\n      \"else{$$i>-1&&(\" + value + \"=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}\" +\n    \"}else{\" + (genAssignmentCode(value, '$$c')) + \"}\",\n    null, true\n  );\n}\n\nfunction genRadioModel (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  valueBinding = number ? (\"_n(\" + valueBinding + \")\") : valueBinding;\n  addProp(el, 'checked', (\"_q(\" + value + \",\" + valueBinding + \")\"));\n  addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);\n}\n\nfunction genSelect (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var selectedVal = \"Array.prototype.filter\" +\n    \".call($event.target.options,function(o){return o.selected})\" +\n    \".map(function(o){var val = \\\"_value\\\" in o ? o._value : o.value;\" +\n    \"return \" + (number ? '_n(val)' : 'val') + \"})\";\n\n  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';\n  var code = \"var $$selectedVal = \" + selectedVal + \";\";\n  code = code + \" \" + (genAssignmentCode(value, assignment));\n  addHandler(el, 'change', code, null, true);\n}\n\nfunction genDefaultModel (\n  el,\n  value,\n  modifiers\n) {\n  var type = el.attrsMap.type;\n\n  // warn if v-bind:value conflicts with v-model\n  if (process.env.NODE_ENV !== 'production') {\n    var value$1 = el.attrsMap['v-bind:value'] || el.attrsMap[':value'];\n    if (value$1) {\n      var binding = el.attrsMap['v-bind:value'] ? 'v-bind:value' : ':value';\n      warn$1(\n        binding + \"=\\\"\" + value$1 + \"\\\" conflicts with v-model on the same element \" +\n        'because the latter already expands to a value binding internally'\n      );\n    }\n  }\n\n  var ref = modifiers || {};\n  var lazy = ref.lazy;\n  var number = ref.number;\n  var trim = ref.trim;\n  var needCompositionGuard = !lazy && type !== 'range';\n  var event = lazy\n    ? 'change'\n    : type === 'range'\n      ? RANGE_TOKEN\n      : 'input';\n\n  var valueExpression = '$event.target.value';\n  if (trim) {\n    valueExpression = \"$event.target.value.trim()\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n\n  var code = genAssignmentCode(value, valueExpression);\n  if (needCompositionGuard) {\n    code = \"if($event.target.composing)return;\" + code;\n  }\n\n  addProp(el, 'value', (\"(\" + value + \")\"));\n  addHandler(el, event, code, null, true);\n  if (trim || number) {\n    addHandler(el, 'blur', '$forceUpdate()');\n  }\n}\n\n/*  */\n\n// normalize v-model event tokens that can only be determined at runtime.\n// it's important to place the event as the first in the array because\n// the whole point is ensuring the v-model callback gets called before\n// user-attached handlers.\nfunction normalizeEvents (on) {\n  /* istanbul ignore if */\n  if (isDef(on[RANGE_TOKEN])) {\n    // IE input[type=range] only supports `change` event\n    var event = isIE ? 'change' : 'input';\n    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);\n    delete on[RANGE_TOKEN];\n  }\n  // This was originally intended to fix #4521 but no longer necessary\n  // after 2.5. Keeping it for backwards compat with generated code from < 2.4\n  /* istanbul ignore if */\n  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {\n    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);\n    delete on[CHECKBOX_RADIO_TOKEN];\n  }\n}\n\nvar target$1;\n\nfunction createOnceHandler (handler, event, capture) {\n  var _target = target$1; // save current target element in closure\n  return function onceHandler () {\n    var res = handler.apply(null, arguments);\n    if (res !== null) {\n      remove$2(event, onceHandler, capture, _target);\n    }\n  }\n}\n\nfunction add$1 (\n  event,\n  handler,\n  once$$1,\n  capture,\n  passive\n) {\n  handler = withMacroTask(handler);\n  if (once$$1) { handler = createOnceHandler(handler, event, capture); }\n  target$1.addEventListener(\n    event,\n    handler,\n    supportsPassive\n      ? { capture: capture, passive: passive }\n      : capture\n  );\n}\n\nfunction remove$2 (\n  event,\n  handler,\n  capture,\n  _target\n) {\n  (_target || target$1).removeEventListener(\n    event,\n    handler._withTask || handler,\n    capture\n  );\n}\n\nfunction updateDOMListeners (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\n    return\n  }\n  var on = vnode.data.on || {};\n  var oldOn = oldVnode.data.on || {};\n  target$1 = vnode.elm;\n  normalizeEvents(on);\n  updateListeners(on, oldOn, add$1, remove$2, vnode.context);\n  target$1 = undefined;\n}\n\nvar events = {\n  create: updateDOMListeners,\n  update: updateDOMListeners\n};\n\n/*  */\n\nfunction updateDOMProps (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {\n    return\n  }\n  var key, cur;\n  var elm = vnode.elm;\n  var oldProps = oldVnode.data.domProps || {};\n  var props = vnode.data.domProps || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(props.__ob__)) {\n    props = vnode.data.domProps = extend({}, props);\n  }\n\n  for (key in oldProps) {\n    if (isUndef(props[key])) {\n      elm[key] = '';\n    }\n  }\n  for (key in props) {\n    cur = props[key];\n    // ignore children if the node has textContent or innerHTML,\n    // as these will throw away existing DOM nodes and cause removal errors\n    // on subsequent patches (#3360)\n    if (key === 'textContent' || key === 'innerHTML') {\n      if (vnode.children) { vnode.children.length = 0; }\n      if (cur === oldProps[key]) { continue }\n      // #6601 work around Chrome version <= 55 bug where single textNode\n      // replaced by innerHTML/textContent retains its parentNode property\n      if (elm.childNodes.length === 1) {\n        elm.removeChild(elm.childNodes[0]);\n      }\n    }\n\n    if (key === 'value') {\n      // store value as _value as well since\n      // non-string values will be stringified\n      elm._value = cur;\n      // avoid resetting cursor position when value is the same\n      var strCur = isUndef(cur) ? '' : String(cur);\n      if (shouldUpdateValue(elm, strCur)) {\n        elm.value = strCur;\n      }\n    } else {\n      elm[key] = cur;\n    }\n  }\n}\n\n// check platforms/web/util/attrs.js acceptValue\n\n\nfunction shouldUpdateValue (elm, checkVal) {\n  return (!elm.composing && (\n    elm.tagName === 'OPTION' ||\n    isNotInFocusAndDirty(elm, checkVal) ||\n    isDirtyWithModifiers(elm, checkVal)\n  ))\n}\n\nfunction isNotInFocusAndDirty (elm, checkVal) {\n  // return true when textbox (.number and .trim) loses focus and its value is\n  // not equal to the updated value\n  var notInFocus = true;\n  // #6157\n  // work around IE bug when accessing document.activeElement in an iframe\n  try { notInFocus = document.activeElement !== elm; } catch (e) {}\n  return notInFocus && elm.value !== checkVal\n}\n\nfunction isDirtyWithModifiers (elm, newVal) {\n  var value = elm.value;\n  var modifiers = elm._vModifiers; // injected by v-model runtime\n  if (isDef(modifiers)) {\n    if (modifiers.lazy) {\n      // inputs with lazy should only be updated when not in focus\n      return false\n    }\n    if (modifiers.number) {\n      return toNumber(value) !== toNumber(newVal)\n    }\n    if (modifiers.trim) {\n      return value.trim() !== newVal.trim()\n    }\n  }\n  return value !== newVal\n}\n\nvar domProps = {\n  create: updateDOMProps,\n  update: updateDOMProps\n};\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// merge static and dynamic style data on the same vnode\nfunction normalizeStyleData (data) {\n  var style = normalizeStyleBinding(data.style);\n  // static style is pre-processed into an object during compilation\n  // and is always a fresh object, so it's safe to merge into it\n  return data.staticStyle\n    ? extend(data.staticStyle, style)\n    : style\n}\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/**\n * parent component style should be after child's\n * so that parent component's style could override it\n */\nfunction getStyle (vnode, checkChild) {\n  var res = {};\n  var styleData;\n\n  if (checkChild) {\n    var childNode = vnode;\n    while (childNode.componentInstance) {\n      childNode = childNode.componentInstance._vnode;\n      if (\n        childNode && childNode.data &&\n        (styleData = normalizeStyleData(childNode.data))\n      ) {\n        extend(res, styleData);\n      }\n    }\n  }\n\n  if ((styleData = normalizeStyleData(vnode.data))) {\n    extend(res, styleData);\n  }\n\n  var parentNode = vnode;\n  while ((parentNode = parentNode.parent)) {\n    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\n      extend(res, styleData);\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar cssVarRE = /^--/;\nvar importantRE = /\\s*!important$/;\nvar setProp = function (el, name, val) {\n  /* istanbul ignore if */\n  if (cssVarRE.test(name)) {\n    el.style.setProperty(name, val);\n  } else if (importantRE.test(val)) {\n    el.style.setProperty(name, val.replace(importantRE, ''), 'important');\n  } else {\n    var normalizedName = normalize(name);\n    if (Array.isArray(val)) {\n      // Support values array created by autoprefixer, e.g.\n      // {display: [\"-webkit-box\", \"-ms-flexbox\", \"flex\"]}\n      // Set them one by one, and the browser will only set those it can recognize\n      for (var i = 0, len = val.length; i < len; i++) {\n        el.style[normalizedName] = val[i];\n      }\n    } else {\n      el.style[normalizedName] = val;\n    }\n  }\n};\n\nvar vendorNames = ['Webkit', 'Moz', 'ms'];\n\nvar emptyStyle;\nvar normalize = cached(function (prop) {\n  emptyStyle = emptyStyle || document.createElement('div').style;\n  prop = camelize(prop);\n  if (prop !== 'filter' && (prop in emptyStyle)) {\n    return prop\n  }\n  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);\n  for (var i = 0; i < vendorNames.length; i++) {\n    var name = vendorNames[i] + capName;\n    if (name in emptyStyle) {\n      return name\n    }\n  }\n});\n\nfunction updateStyle (oldVnode, vnode) {\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n\n  if (isUndef(data.staticStyle) && isUndef(data.style) &&\n    isUndef(oldData.staticStyle) && isUndef(oldData.style)\n  ) {\n    return\n  }\n\n  var cur, name;\n  var el = vnode.elm;\n  var oldStaticStyle = oldData.staticStyle;\n  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};\n\n  // if static style exists, stylebinding already merged into it when doing normalizeStyleData\n  var oldStyle = oldStaticStyle || oldStyleBinding;\n\n  var style = normalizeStyleBinding(vnode.data.style) || {};\n\n  // store normalized style under a different key for next diff\n  // make sure to clone it if it's reactive, since the user likely wants\n  // to mutate it.\n  vnode.data.normalizedStyle = isDef(style.__ob__)\n    ? extend({}, style)\n    : style;\n\n  var newStyle = getStyle(vnode, true);\n\n  for (name in oldStyle) {\n    if (isUndef(newStyle[name])) {\n      setProp(el, name, '');\n    }\n  }\n  for (name in newStyle) {\n    cur = newStyle[name];\n    if (cur !== oldStyle[name]) {\n      // ie9 setting to null has no effect, must use empty string\n      setProp(el, name, cur == null ? '' : cur);\n    }\n  }\n}\n\nvar style = {\n  create: updateStyle,\n  update: updateStyle\n};\n\n/*  */\n\n/**\n * Add class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction addClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.add(c); });\n    } else {\n      el.classList.add(cls);\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      el.setAttribute('class', (cur + cls).trim());\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction removeClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.remove(c); });\n    } else {\n      el.classList.remove(cls);\n    }\n    if (!el.classList.length) {\n      el.removeAttribute('class');\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    var tar = ' ' + cls + ' ';\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ');\n    }\n    cur = cur.trim();\n    if (cur) {\n      el.setAttribute('class', cur);\n    } else {\n      el.removeAttribute('class');\n    }\n  }\n}\n\n/*  */\n\nfunction resolveTransition (def) {\n  if (!def) {\n    return\n  }\n  /* istanbul ignore else */\n  if (typeof def === 'object') {\n    var res = {};\n    if (def.css !== false) {\n      extend(res, autoCssTransition(def.name || 'v'));\n    }\n    extend(res, def);\n    return res\n  } else if (typeof def === 'string') {\n    return autoCssTransition(def)\n  }\n}\n\nvar autoCssTransition = cached(function (name) {\n  return {\n    enterClass: (name + \"-enter\"),\n    enterToClass: (name + \"-enter-to\"),\n    enterActiveClass: (name + \"-enter-active\"),\n    leaveClass: (name + \"-leave\"),\n    leaveToClass: (name + \"-leave-to\"),\n    leaveActiveClass: (name + \"-leave-active\")\n  }\n});\n\nvar hasTransition = inBrowser && !isIE9;\nvar TRANSITION = 'transition';\nvar ANIMATION = 'animation';\n\n// Transition property/event sniffing\nvar transitionProp = 'transition';\nvar transitionEndEvent = 'transitionend';\nvar animationProp = 'animation';\nvar animationEndEvent = 'animationend';\nif (hasTransition) {\n  /* istanbul ignore if */\n  if (window.ontransitionend === undefined &&\n    window.onwebkittransitionend !== undefined\n  ) {\n    transitionProp = 'WebkitTransition';\n    transitionEndEvent = 'webkitTransitionEnd';\n  }\n  if (window.onanimationend === undefined &&\n    window.onwebkitanimationend !== undefined\n  ) {\n    animationProp = 'WebkitAnimation';\n    animationEndEvent = 'webkitAnimationEnd';\n  }\n}\n\n// binding to window is necessary to make hot reload work in IE in strict mode\nvar raf = inBrowser\n  ? window.requestAnimationFrame\n    ? window.requestAnimationFrame.bind(window)\n    : setTimeout\n  : /* istanbul ignore next */ function (fn) { return fn(); };\n\nfunction nextFrame (fn) {\n  raf(function () {\n    raf(fn);\n  });\n}\n\nfunction addTransitionClass (el, cls) {\n  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);\n  if (transitionClasses.indexOf(cls) < 0) {\n    transitionClasses.push(cls);\n    addClass(el, cls);\n  }\n}\n\nfunction removeTransitionClass (el, cls) {\n  if (el._transitionClasses) {\n    remove(el._transitionClasses, cls);\n  }\n  removeClass(el, cls);\n}\n\nfunction whenTransitionEnds (\n  el,\n  expectedType,\n  cb\n) {\n  var ref = getTransitionInfo(el, expectedType);\n  var type = ref.type;\n  var timeout = ref.timeout;\n  var propCount = ref.propCount;\n  if (!type) { return cb() }\n  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\n  var ended = 0;\n  var end = function () {\n    el.removeEventListener(event, onEnd);\n    cb();\n  };\n  var onEnd = function (e) {\n    if (e.target === el) {\n      if (++ended >= propCount) {\n        end();\n      }\n    }\n  };\n  setTimeout(function () {\n    if (ended < propCount) {\n      end();\n    }\n  }, timeout + 1);\n  el.addEventListener(event, onEnd);\n}\n\nvar transformRE = /\\b(transform|all)(,|$)/;\n\nfunction getTransitionInfo (el, expectedType) {\n  var styles = window.getComputedStyle(el);\n  var transitionDelays = styles[transitionProp + 'Delay'].split(', ');\n  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');\n  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);\n  var animationDelays = styles[animationProp + 'Delay'].split(', ');\n  var animationDurations = styles[animationProp + 'Duration'].split(', ');\n  var animationTimeout = getTimeout(animationDelays, animationDurations);\n\n  var type;\n  var timeout = 0;\n  var propCount = 0;\n  /* istanbul ignore if */\n  if (expectedType === TRANSITION) {\n    if (transitionTimeout > 0) {\n      type = TRANSITION;\n      timeout = transitionTimeout;\n      propCount = transitionDurations.length;\n    }\n  } else if (expectedType === ANIMATION) {\n    if (animationTimeout > 0) {\n      type = ANIMATION;\n      timeout = animationTimeout;\n      propCount = animationDurations.length;\n    }\n  } else {\n    timeout = Math.max(transitionTimeout, animationTimeout);\n    type = timeout > 0\n      ? transitionTimeout > animationTimeout\n        ? TRANSITION\n        : ANIMATION\n      : null;\n    propCount = type\n      ? type === TRANSITION\n        ? transitionDurations.length\n        : animationDurations.length\n      : 0;\n  }\n  var hasTransform =\n    type === TRANSITION &&\n    transformRE.test(styles[transitionProp + 'Property']);\n  return {\n    type: type,\n    timeout: timeout,\n    propCount: propCount,\n    hasTransform: hasTransform\n  }\n}\n\nfunction getTimeout (delays, durations) {\n  /* istanbul ignore next */\n  while (delays.length < durations.length) {\n    delays = delays.concat(delays);\n  }\n\n  return Math.max.apply(null, durations.map(function (d, i) {\n    return toMs(d) + toMs(delays[i])\n  }))\n}\n\nfunction toMs (s) {\n  return Number(s.slice(0, -1)) * 1000\n}\n\n/*  */\n\nfunction enter (vnode, toggleDisplay) {\n  var el = vnode.elm;\n\n  // call leave callback now\n  if (isDef(el._leaveCb)) {\n    el._leaveCb.cancelled = true;\n    el._leaveCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data)) {\n    return\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._enterCb) || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var enterClass = data.enterClass;\n  var enterToClass = data.enterToClass;\n  var enterActiveClass = data.enterActiveClass;\n  var appearClass = data.appearClass;\n  var appearToClass = data.appearToClass;\n  var appearActiveClass = data.appearActiveClass;\n  var beforeEnter = data.beforeEnter;\n  var enter = data.enter;\n  var afterEnter = data.afterEnter;\n  var enterCancelled = data.enterCancelled;\n  var beforeAppear = data.beforeAppear;\n  var appear = data.appear;\n  var afterAppear = data.afterAppear;\n  var appearCancelled = data.appearCancelled;\n  var duration = data.duration;\n\n  // activeInstance will always be the <transition> component managing this\n  // transition. One edge case to check is when the <transition> is placed\n  // as the root node of a child component. In that case we need to check\n  // <transition>'s parent for appear check.\n  var context = activeInstance;\n  var transitionNode = activeInstance.$vnode;\n  while (transitionNode && transitionNode.parent) {\n    transitionNode = transitionNode.parent;\n    context = transitionNode.context;\n  }\n\n  var isAppear = !context._isMounted || !vnode.isRootInsert;\n\n  if (isAppear && !appear && appear !== '') {\n    return\n  }\n\n  var startClass = isAppear && appearClass\n    ? appearClass\n    : enterClass;\n  var activeClass = isAppear && appearActiveClass\n    ? appearActiveClass\n    : enterActiveClass;\n  var toClass = isAppear && appearToClass\n    ? appearToClass\n    : enterToClass;\n\n  var beforeEnterHook = isAppear\n    ? (beforeAppear || beforeEnter)\n    : beforeEnter;\n  var enterHook = isAppear\n    ? (typeof appear === 'function' ? appear : enter)\n    : enter;\n  var afterEnterHook = isAppear\n    ? (afterAppear || afterEnter)\n    : afterEnter;\n  var enterCancelledHook = isAppear\n    ? (appearCancelled || enterCancelled)\n    : enterCancelled;\n\n  var explicitEnterDuration = toNumber(\n    isObject(duration)\n      ? duration.enter\n      : duration\n  );\n\n  if (process.env.NODE_ENV !== 'production' && explicitEnterDuration != null) {\n    checkDuration(explicitEnterDuration, 'enter', vnode);\n  }\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(enterHook);\n\n  var cb = el._enterCb = once(function () {\n    if (expectsCSS) {\n      removeTransitionClass(el, toClass);\n      removeTransitionClass(el, activeClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, startClass);\n      }\n      enterCancelledHook && enterCancelledHook(el);\n    } else {\n      afterEnterHook && afterEnterHook(el);\n    }\n    el._enterCb = null;\n  });\n\n  if (!vnode.data.show) {\n    // remove pending leave element on enter by injecting an insert hook\n    mergeVNodeHook(vnode, 'insert', function () {\n      var parent = el.parentNode;\n      var pendingNode = parent && parent._pending && parent._pending[vnode.key];\n      if (pendingNode &&\n        pendingNode.tag === vnode.tag &&\n        pendingNode.elm._leaveCb\n      ) {\n        pendingNode.elm._leaveCb();\n      }\n      enterHook && enterHook(el, cb);\n    });\n  }\n\n  // start enter transition\n  beforeEnterHook && beforeEnterHook(el);\n  if (expectsCSS) {\n    addTransitionClass(el, startClass);\n    addTransitionClass(el, activeClass);\n    nextFrame(function () {\n      addTransitionClass(el, toClass);\n      removeTransitionClass(el, startClass);\n      if (!cb.cancelled && !userWantsControl) {\n        if (isValidDuration(explicitEnterDuration)) {\n          setTimeout(cb, explicitEnterDuration);\n        } else {\n          whenTransitionEnds(el, type, cb);\n        }\n      }\n    });\n  }\n\n  if (vnode.data.show) {\n    toggleDisplay && toggleDisplay();\n    enterHook && enterHook(el, cb);\n  }\n\n  if (!expectsCSS && !userWantsControl) {\n    cb();\n  }\n}\n\nfunction leave (vnode, rm) {\n  var el = vnode.elm;\n\n  // call enter callback now\n  if (isDef(el._enterCb)) {\n    el._enterCb.cancelled = true;\n    el._enterCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data) || el.nodeType !== 1) {\n    return rm()\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._leaveCb)) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var leaveClass = data.leaveClass;\n  var leaveToClass = data.leaveToClass;\n  var leaveActiveClass = data.leaveActiveClass;\n  var beforeLeave = data.beforeLeave;\n  var leave = data.leave;\n  var afterLeave = data.afterLeave;\n  var leaveCancelled = data.leaveCancelled;\n  var delayLeave = data.delayLeave;\n  var duration = data.duration;\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(leave);\n\n  var explicitLeaveDuration = toNumber(\n    isObject(duration)\n      ? duration.leave\n      : duration\n  );\n\n  if (process.env.NODE_ENV !== 'production' && isDef(explicitLeaveDuration)) {\n    checkDuration(explicitLeaveDuration, 'leave', vnode);\n  }\n\n  var cb = el._leaveCb = once(function () {\n    if (el.parentNode && el.parentNode._pending) {\n      el.parentNode._pending[vnode.key] = null;\n    }\n    if (expectsCSS) {\n      removeTransitionClass(el, leaveToClass);\n      removeTransitionClass(el, leaveActiveClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, leaveClass);\n      }\n      leaveCancelled && leaveCancelled(el);\n    } else {\n      rm();\n      afterLeave && afterLeave(el);\n    }\n    el._leaveCb = null;\n  });\n\n  if (delayLeave) {\n    delayLeave(performLeave);\n  } else {\n    performLeave();\n  }\n\n  function performLeave () {\n    // the delayed leave may have already been cancelled\n    if (cb.cancelled) {\n      return\n    }\n    // record leaving element\n    if (!vnode.data.show) {\n      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;\n    }\n    beforeLeave && beforeLeave(el);\n    if (expectsCSS) {\n      addTransitionClass(el, leaveClass);\n      addTransitionClass(el, leaveActiveClass);\n      nextFrame(function () {\n        addTransitionClass(el, leaveToClass);\n        removeTransitionClass(el, leaveClass);\n        if (!cb.cancelled && !userWantsControl) {\n          if (isValidDuration(explicitLeaveDuration)) {\n            setTimeout(cb, explicitLeaveDuration);\n          } else {\n            whenTransitionEnds(el, type, cb);\n          }\n        }\n      });\n    }\n    leave && leave(el, cb);\n    if (!expectsCSS && !userWantsControl) {\n      cb();\n    }\n  }\n}\n\n// only used in dev mode\nfunction checkDuration (val, name, vnode) {\n  if (typeof val !== 'number') {\n    warn(\n      \"<transition> explicit \" + name + \" duration is not a valid number - \" +\n      \"got \" + (JSON.stringify(val)) + \".\",\n      vnode.context\n    );\n  } else if (isNaN(val)) {\n    warn(\n      \"<transition> explicit \" + name + \" duration is NaN - \" +\n      'the duration expression might be incorrect.',\n      vnode.context\n    );\n  }\n}\n\nfunction isValidDuration (val) {\n  return typeof val === 'number' && !isNaN(val)\n}\n\n/**\n * Normalize a transition hook's argument length. The hook may be:\n * - a merged hook (invoker) with the original in .fns\n * - a wrapped component method (check ._length)\n * - a plain function (.length)\n */\nfunction getHookArgumentsLength (fn) {\n  if (isUndef(fn)) {\n    return false\n  }\n  var invokerFns = fn.fns;\n  if (isDef(invokerFns)) {\n    // invoker\n    return getHookArgumentsLength(\n      Array.isArray(invokerFns)\n        ? invokerFns[0]\n        : invokerFns\n    )\n  } else {\n    return (fn._length || fn.length) > 1\n  }\n}\n\nfunction _enter (_, vnode) {\n  if (vnode.data.show !== true) {\n    enter(vnode);\n  }\n}\n\nvar transition = inBrowser ? {\n  create: _enter,\n  activate: _enter,\n  remove: function remove$$1 (vnode, rm) {\n    /* istanbul ignore else */\n    if (vnode.data.show !== true) {\n      leave(vnode, rm);\n    } else {\n      rm();\n    }\n  }\n} : {};\n\nvar platformModules = [\n  attrs,\n  klass,\n  events,\n  domProps,\n  style,\n  transition\n];\n\n/*  */\n\n// the directive module should be applied last, after all\n// built-in modules have been applied.\nvar modules = platformModules.concat(baseModules);\n\nvar patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });\n\n/**\n * Not type checking this file because flow doesn't like attaching\n * properties to Elements.\n */\n\n/* istanbul ignore if */\nif (isIE9) {\n  // http://www.matts411.com/post/internet-explorer-9-oninput/\n  document.addEventListener('selectionchange', function () {\n    var el = document.activeElement;\n    if (el && el.vmodel) {\n      trigger(el, 'input');\n    }\n  });\n}\n\nvar directive = {\n  inserted: function inserted (el, binding, vnode, oldVnode) {\n    if (vnode.tag === 'select') {\n      // #6903\n      if (oldVnode.elm && !oldVnode.elm._vOptions) {\n        mergeVNodeHook(vnode, 'postpatch', function () {\n          directive.componentUpdated(el, binding, vnode);\n        });\n      } else {\n        setSelected(el, binding, vnode.context);\n      }\n      el._vOptions = [].map.call(el.options, getValue);\n    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {\n      el._vModifiers = binding.modifiers;\n      if (!binding.modifiers.lazy) {\n        // Safari < 10.2 & UIWebView doesn't fire compositionend when\n        // switching focus before confirming composition choice\n        // this also fixes the issue where some browsers e.g. iOS Chrome\n        // fires \"change\" instead of \"input\" on autocomplete.\n        el.addEventListener('change', onCompositionEnd);\n        if (!isAndroid) {\n          el.addEventListener('compositionstart', onCompositionStart);\n          el.addEventListener('compositionend', onCompositionEnd);\n        }\n        /* istanbul ignore if */\n        if (isIE9) {\n          el.vmodel = true;\n        }\n      }\n    }\n  },\n\n  componentUpdated: function componentUpdated (el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      setSelected(el, binding, vnode.context);\n      // in case the options rendered by v-for have changed,\n      // it's possible that the value is out-of-sync with the rendered options.\n      // detect such cases and filter out values that no longer has a matching\n      // option in the DOM.\n      var prevOptions = el._vOptions;\n      var curOptions = el._vOptions = [].map.call(el.options, getValue);\n      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {\n        // trigger change event if\n        // no matching option found for at least one value\n        var needReset = el.multiple\n          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })\n          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);\n        if (needReset) {\n          trigger(el, 'change');\n        }\n      }\n    }\n  }\n};\n\nfunction setSelected (el, binding, vm) {\n  actuallySetSelected(el, binding, vm);\n  /* istanbul ignore if */\n  if (isIE || isEdge) {\n    setTimeout(function () {\n      actuallySetSelected(el, binding, vm);\n    }, 0);\n  }\n}\n\nfunction actuallySetSelected (el, binding, vm) {\n  var value = binding.value;\n  var isMultiple = el.multiple;\n  if (isMultiple && !Array.isArray(value)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      \"<select multiple v-model=\\\"\" + (binding.expression) + \"\\\"> \" +\n      \"expects an Array value for its binding, but got \" + (Object.prototype.toString.call(value).slice(8, -1)),\n      vm\n    );\n    return\n  }\n  var selected, option;\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    option = el.options[i];\n    if (isMultiple) {\n      selected = looseIndexOf(value, getValue(option)) > -1;\n      if (option.selected !== selected) {\n        option.selected = selected;\n      }\n    } else {\n      if (looseEqual(getValue(option), value)) {\n        if (el.selectedIndex !== i) {\n          el.selectedIndex = i;\n        }\n        return\n      }\n    }\n  }\n  if (!isMultiple) {\n    el.selectedIndex = -1;\n  }\n}\n\nfunction hasNoMatchingOption (value, options) {\n  return options.every(function (o) { return !looseEqual(o, value); })\n}\n\nfunction getValue (option) {\n  return '_value' in option\n    ? option._value\n    : option.value\n}\n\nfunction onCompositionStart (e) {\n  e.target.composing = true;\n}\n\nfunction onCompositionEnd (e) {\n  // prevent triggering an input event for no reason\n  if (!e.target.composing) { return }\n  e.target.composing = false;\n  trigger(e.target, 'input');\n}\n\nfunction trigger (el, type) {\n  var e = document.createEvent('HTMLEvents');\n  e.initEvent(type, true, true);\n  el.dispatchEvent(e);\n}\n\n/*  */\n\n// recursively search for possible transition defined inside the component root\nfunction locateNode (vnode) {\n  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)\n    ? locateNode(vnode.componentInstance._vnode)\n    : vnode\n}\n\nvar show = {\n  bind: function bind (el, ref, vnode) {\n    var value = ref.value;\n\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    var originalDisplay = el.__vOriginalDisplay =\n      el.style.display === 'none' ? '' : el.style.display;\n    if (value && transition$$1) {\n      vnode.data.show = true;\n      enter(vnode, function () {\n        el.style.display = originalDisplay;\n      });\n    } else {\n      el.style.display = value ? originalDisplay : 'none';\n    }\n  },\n\n  update: function update (el, ref, vnode) {\n    var value = ref.value;\n    var oldValue = ref.oldValue;\n\n    /* istanbul ignore if */\n    if (value === oldValue) { return }\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    if (transition$$1) {\n      vnode.data.show = true;\n      if (value) {\n        enter(vnode, function () {\n          el.style.display = el.__vOriginalDisplay;\n        });\n      } else {\n        leave(vnode, function () {\n          el.style.display = 'none';\n        });\n      }\n    } else {\n      el.style.display = value ? el.__vOriginalDisplay : 'none';\n    }\n  },\n\n  unbind: function unbind (\n    el,\n    binding,\n    vnode,\n    oldVnode,\n    isDestroy\n  ) {\n    if (!isDestroy) {\n      el.style.display = el.__vOriginalDisplay;\n    }\n  }\n};\n\nvar platformDirectives = {\n  model: directive,\n  show: show\n};\n\n/*  */\n\n// Provides transition support for a single element/component.\n// supports transition mode (out-in / in-out)\n\nvar transitionProps = {\n  name: String,\n  appear: Boolean,\n  css: Boolean,\n  mode: String,\n  type: String,\n  enterClass: String,\n  leaveClass: String,\n  enterToClass: String,\n  leaveToClass: String,\n  enterActiveClass: String,\n  leaveActiveClass: String,\n  appearClass: String,\n  appearActiveClass: String,\n  appearToClass: String,\n  duration: [Number, String, Object]\n};\n\n// in case the child is also an abstract component, e.g. <keep-alive>\n// we want to recursively retrieve the real component to be rendered\nfunction getRealChild (vnode) {\n  var compOptions = vnode && vnode.componentOptions;\n  if (compOptions && compOptions.Ctor.options.abstract) {\n    return getRealChild(getFirstComponentChild(compOptions.children))\n  } else {\n    return vnode\n  }\n}\n\nfunction extractTransitionData (comp) {\n  var data = {};\n  var options = comp.$options;\n  // props\n  for (var key in options.propsData) {\n    data[key] = comp[key];\n  }\n  // events.\n  // extract listeners and pass them directly to the transition methods\n  var listeners = options._parentListeners;\n  for (var key$1 in listeners) {\n    data[camelize(key$1)] = listeners[key$1];\n  }\n  return data\n}\n\nfunction placeholder (h, rawChild) {\n  if (/\\d-keep-alive$/.test(rawChild.tag)) {\n    return h('keep-alive', {\n      props: rawChild.componentOptions.propsData\n    })\n  }\n}\n\nfunction hasParentTransition (vnode) {\n  while ((vnode = vnode.parent)) {\n    if (vnode.data.transition) {\n      return true\n    }\n  }\n}\n\nfunction isSameChild (child, oldChild) {\n  return oldChild.key === child.key && oldChild.tag === child.tag\n}\n\nvar Transition = {\n  name: 'transition',\n  props: transitionProps,\n  abstract: true,\n\n  render: function render (h) {\n    var this$1 = this;\n\n    var children = this.$slots.default;\n    if (!children) {\n      return\n    }\n\n    // filter out text nodes (possible whitespaces)\n    children = children.filter(function (c) { return c.tag || isAsyncPlaceholder(c); });\n    /* istanbul ignore if */\n    if (!children.length) {\n      return\n    }\n\n    // warn multiple elements\n    if (process.env.NODE_ENV !== 'production' && children.length > 1) {\n      warn(\n        '<transition> can only be used on a single element. Use ' +\n        '<transition-group> for lists.',\n        this.$parent\n      );\n    }\n\n    var mode = this.mode;\n\n    // warn invalid mode\n    if (process.env.NODE_ENV !== 'production' &&\n      mode && mode !== 'in-out' && mode !== 'out-in'\n    ) {\n      warn(\n        'invalid <transition> mode: ' + mode,\n        this.$parent\n      );\n    }\n\n    var rawChild = children[0];\n\n    // if this is a component root node and the component's\n    // parent container node also has transition, skip.\n    if (hasParentTransition(this.$vnode)) {\n      return rawChild\n    }\n\n    // apply transition data to child\n    // use getRealChild() to ignore abstract components e.g. keep-alive\n    var child = getRealChild(rawChild);\n    /* istanbul ignore if */\n    if (!child) {\n      return rawChild\n    }\n\n    if (this._leaving) {\n      return placeholder(h, rawChild)\n    }\n\n    // ensure a key that is unique to the vnode type and to this transition\n    // component instance. This key will be used to remove pending leaving nodes\n    // during entering.\n    var id = \"__transition-\" + (this._uid) + \"-\";\n    child.key = child.key == null\n      ? child.isComment\n        ? id + 'comment'\n        : id + child.tag\n      : isPrimitive(child.key)\n        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)\n        : child.key;\n\n    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);\n    var oldRawChild = this._vnode;\n    var oldChild = getRealChild(oldRawChild);\n\n    // mark v-show\n    // so that the transition module can hand over the control to the directive\n    if (child.data.directives && child.data.directives.some(function (d) { return d.name === 'show'; })) {\n      child.data.show = true;\n    }\n\n    if (\n      oldChild &&\n      oldChild.data &&\n      !isSameChild(child, oldChild) &&\n      !isAsyncPlaceholder(oldChild) &&\n      // #6687 component root is a comment node\n      !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)\n    ) {\n      // replace old child transition data with fresh one\n      // important for dynamic transitions!\n      var oldData = oldChild.data.transition = extend({}, data);\n      // handle transition mode\n      if (mode === 'out-in') {\n        // return placeholder node and queue update when leave finishes\n        this._leaving = true;\n        mergeVNodeHook(oldData, 'afterLeave', function () {\n          this$1._leaving = false;\n          this$1.$forceUpdate();\n        });\n        return placeholder(h, rawChild)\n      } else if (mode === 'in-out') {\n        if (isAsyncPlaceholder(child)) {\n          return oldRawChild\n        }\n        var delayedLeave;\n        var performLeave = function () { delayedLeave(); };\n        mergeVNodeHook(data, 'afterEnter', performLeave);\n        mergeVNodeHook(data, 'enterCancelled', performLeave);\n        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });\n      }\n    }\n\n    return rawChild\n  }\n};\n\n/*  */\n\n// Provides transition support for list items.\n// supports move transitions using the FLIP technique.\n\n// Because the vdom's children update algorithm is \"unstable\" - i.e.\n// it doesn't guarantee the relative positioning of removed elements,\n// we force transition-group to update its children into two passes:\n// in the first pass, we remove all nodes that need to be removed,\n// triggering their leaving transition; in the second pass, we insert/move\n// into the final desired state. This way in the second pass removed\n// nodes will remain where they should be.\n\nvar props = extend({\n  tag: String,\n  moveClass: String\n}, transitionProps);\n\ndelete props.mode;\n\nvar TransitionGroup = {\n  props: props,\n\n  render: function render (h) {\n    var tag = this.tag || this.$vnode.data.tag || 'span';\n    var map = Object.create(null);\n    var prevChildren = this.prevChildren = this.children;\n    var rawChildren = this.$slots.default || [];\n    var children = this.children = [];\n    var transitionData = extractTransitionData(this);\n\n    for (var i = 0; i < rawChildren.length; i++) {\n      var c = rawChildren[i];\n      if (c.tag) {\n        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\n          children.push(c);\n          map[c.key] = c\n          ;(c.data || (c.data = {})).transition = transitionData;\n        } else if (process.env.NODE_ENV !== 'production') {\n          var opts = c.componentOptions;\n          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;\n          warn((\"<transition-group> children must be keyed: <\" + name + \">\"));\n        }\n      }\n    }\n\n    if (prevChildren) {\n      var kept = [];\n      var removed = [];\n      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {\n        var c$1 = prevChildren[i$1];\n        c$1.data.transition = transitionData;\n        c$1.data.pos = c$1.elm.getBoundingClientRect();\n        if (map[c$1.key]) {\n          kept.push(c$1);\n        } else {\n          removed.push(c$1);\n        }\n      }\n      this.kept = h(tag, null, kept);\n      this.removed = removed;\n    }\n\n    return h(tag, null, children)\n  },\n\n  beforeUpdate: function beforeUpdate () {\n    // force removing pass\n    this.__patch__(\n      this._vnode,\n      this.kept,\n      false, // hydrating\n      true // removeOnly (!important avoids unnecessary moves)\n    );\n    this._vnode = this.kept;\n  },\n\n  updated: function updated () {\n    var children = this.prevChildren;\n    var moveClass = this.moveClass || ((this.name || 'v') + '-move');\n    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\n      return\n    }\n\n    // we divide the work into three loops to avoid mixing DOM reads and writes\n    // in each iteration - which helps prevent layout thrashing.\n    children.forEach(callPendingCbs);\n    children.forEach(recordPosition);\n    children.forEach(applyTranslation);\n\n    // force reflow to put everything in position\n    // assign to this to avoid being removed in tree-shaking\n    // $flow-disable-line\n    this._reflow = document.body.offsetHeight;\n\n    children.forEach(function (c) {\n      if (c.data.moved) {\n        var el = c.elm;\n        var s = el.style;\n        addTransitionClass(el, moveClass);\n        s.transform = s.WebkitTransform = s.transitionDuration = '';\n        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {\n          if (!e || /transform$/.test(e.propertyName)) {\n            el.removeEventListener(transitionEndEvent, cb);\n            el._moveCb = null;\n            removeTransitionClass(el, moveClass);\n          }\n        });\n      }\n    });\n  },\n\n  methods: {\n    hasMove: function hasMove (el, moveClass) {\n      /* istanbul ignore if */\n      if (!hasTransition) {\n        return false\n      }\n      /* istanbul ignore if */\n      if (this._hasMove) {\n        return this._hasMove\n      }\n      // Detect whether an element with the move class applied has\n      // CSS transitions. Since the element may be inside an entering\n      // transition at this very moment, we make a clone of it and remove\n      // all other transition classes applied to ensure only the move class\n      // is applied.\n      var clone = el.cloneNode();\n      if (el._transitionClasses) {\n        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });\n      }\n      addClass(clone, moveClass);\n      clone.style.display = 'none';\n      this.$el.appendChild(clone);\n      var info = getTransitionInfo(clone);\n      this.$el.removeChild(clone);\n      return (this._hasMove = info.hasTransform)\n    }\n  }\n};\n\nfunction callPendingCbs (c) {\n  /* istanbul ignore if */\n  if (c.elm._moveCb) {\n    c.elm._moveCb();\n  }\n  /* istanbul ignore if */\n  if (c.elm._enterCb) {\n    c.elm._enterCb();\n  }\n}\n\nfunction recordPosition (c) {\n  c.data.newPos = c.elm.getBoundingClientRect();\n}\n\nfunction applyTranslation (c) {\n  var oldPos = c.data.pos;\n  var newPos = c.data.newPos;\n  var dx = oldPos.left - newPos.left;\n  var dy = oldPos.top - newPos.top;\n  if (dx || dy) {\n    c.data.moved = true;\n    var s = c.elm.style;\n    s.transform = s.WebkitTransform = \"translate(\" + dx + \"px,\" + dy + \"px)\";\n    s.transitionDuration = '0s';\n  }\n}\n\nvar platformComponents = {\n  Transition: Transition,\n  TransitionGroup: TransitionGroup\n};\n\n/*  */\n\n// install platform specific utils\nVue$3.config.mustUseProp = mustUseProp;\nVue$3.config.isReservedTag = isReservedTag;\nVue$3.config.isReservedAttr = isReservedAttr;\nVue$3.config.getTagNamespace = getTagNamespace;\nVue$3.config.isUnknownElement = isUnknownElement;\n\n// install platform runtime directives & components\nextend(Vue$3.options.directives, platformDirectives);\nextend(Vue$3.options.components, platformComponents);\n\n// install platform patch function\nVue$3.prototype.__patch__ = inBrowser ? patch : noop;\n\n// public mount method\nVue$3.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && inBrowser ? query(el) : undefined;\n  return mountComponent(this, el, hydrating)\n};\n\n// devtools global hook\n/* istanbul ignore next */\nVue$3.nextTick(function () {\n  if (config.devtools) {\n    if (devtools) {\n      devtools.emit('init', Vue$3);\n    } else if (process.env.NODE_ENV !== 'production' && isChrome) {\n      console[console.info ? 'info' : 'log'](\n        'Download the Vue Devtools extension for a better development experience:\\n' +\n        'https://github.com/vuejs/vue-devtools'\n      );\n    }\n  }\n  if (process.env.NODE_ENV !== 'production' &&\n    config.productionTip !== false &&\n    inBrowser && typeof console !== 'undefined'\n  ) {\n    console[console.info ? 'info' : 'log'](\n      \"You are running Vue in development mode.\\n\" +\n      \"Make sure to turn on production mode when deploying for production.\\n\" +\n      \"See more tips at https://vuejs.org/guide/deployment.html\"\n    );\n  }\n}, 0);\n\n/*  */\n\nvar defaultTagRE = /\\{\\{((?:.|\\n)+?)\\}\\}/g;\nvar regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\n\nvar buildRegex = cached(function (delimiters) {\n  var open = delimiters[0].replace(regexEscapeRE, '\\\\$&');\n  var close = delimiters[1].replace(regexEscapeRE, '\\\\$&');\n  return new RegExp(open + '((?:.|\\\\n)+?)' + close, 'g')\n});\n\n\n\nfunction parseText (\n  text,\n  delimiters\n) {\n  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;\n  if (!tagRE.test(text)) {\n    return\n  }\n  var tokens = [];\n  var rawTokens = [];\n  var lastIndex = tagRE.lastIndex = 0;\n  var match, index, tokenValue;\n  while ((match = tagRE.exec(text))) {\n    index = match.index;\n    // push text token\n    if (index > lastIndex) {\n      rawTokens.push(tokenValue = text.slice(lastIndex, index));\n      tokens.push(JSON.stringify(tokenValue));\n    }\n    // tag token\n    var exp = parseFilters(match[1].trim());\n    tokens.push((\"_s(\" + exp + \")\"));\n    rawTokens.push({ '@binding': exp });\n    lastIndex = index + match[0].length;\n  }\n  if (lastIndex < text.length) {\n    rawTokens.push(tokenValue = text.slice(lastIndex));\n    tokens.push(JSON.stringify(tokenValue));\n  }\n  return {\n    expression: tokens.join('+'),\n    tokens: rawTokens\n  }\n}\n\n/*  */\n\nfunction transformNode (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticClass = getAndRemoveAttr(el, 'class');\n  if (process.env.NODE_ENV !== 'production' && staticClass) {\n    var res = parseText(staticClass, options.delimiters);\n    if (res) {\n      warn(\n        \"class=\\\"\" + staticClass + \"\\\": \" +\n        'Interpolation inside attributes has been removed. ' +\n        'Use v-bind or the colon shorthand instead. For example, ' +\n        'instead of <div class=\"{{ val }}\">, use <div :class=\"val\">.'\n      );\n    }\n  }\n  if (staticClass) {\n    el.staticClass = JSON.stringify(staticClass);\n  }\n  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);\n  if (classBinding) {\n    el.classBinding = classBinding;\n  }\n}\n\nfunction genData (el) {\n  var data = '';\n  if (el.staticClass) {\n    data += \"staticClass:\" + (el.staticClass) + \",\";\n  }\n  if (el.classBinding) {\n    data += \"class:\" + (el.classBinding) + \",\";\n  }\n  return data\n}\n\nvar klass$1 = {\n  staticKeys: ['staticClass'],\n  transformNode: transformNode,\n  genData: genData\n};\n\n/*  */\n\nfunction transformNode$1 (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticStyle = getAndRemoveAttr(el, 'style');\n  if (staticStyle) {\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production') {\n      var res = parseText(staticStyle, options.delimiters);\n      if (res) {\n        warn(\n          \"style=\\\"\" + staticStyle + \"\\\": \" +\n          'Interpolation inside attributes has been removed. ' +\n          'Use v-bind or the colon shorthand instead. For example, ' +\n          'instead of <div style=\"{{ val }}\">, use <div :style=\"val\">.'\n        );\n      }\n    }\n    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));\n  }\n\n  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);\n  if (styleBinding) {\n    el.styleBinding = styleBinding;\n  }\n}\n\nfunction genData$1 (el) {\n  var data = '';\n  if (el.staticStyle) {\n    data += \"staticStyle:\" + (el.staticStyle) + \",\";\n  }\n  if (el.styleBinding) {\n    data += \"style:(\" + (el.styleBinding) + \"),\";\n  }\n  return data\n}\n\nvar style$1 = {\n  staticKeys: ['staticStyle'],\n  transformNode: transformNode$1,\n  genData: genData$1\n};\n\n/*  */\n\nvar decoder;\n\nvar he = {\n  decode: function decode (html) {\n    decoder = decoder || document.createElement('div');\n    decoder.innerHTML = html;\n    return decoder.textContent\n  }\n};\n\n/*  */\n\nvar isUnaryTag = makeMap(\n  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +\n  'link,meta,param,source,track,wbr'\n);\n\n// Elements that you can, intentionally, leave open\n// (and which close themselves)\nvar canBeLeftOpenTag = makeMap(\n  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'\n);\n\n// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3\n// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content\nvar isNonPhrasingTag = makeMap(\n  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +\n  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +\n  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +\n  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +\n  'title,tr,track'\n);\n\n/**\n * Not type-checking this file because it's mostly vendor code.\n */\n\n/*!\n * HTML Parser By John Resig (ejohn.org)\n * Modified by Juriy \"kangax\" Zaytsev\n * Original code by Erik Arvidsson, Mozilla Public License\n * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js\n */\n\n// Regular Expressions for parsing tags and attributes\nvar attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/;\n// could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName\n// but for Vue templates we can enforce a simple charset\nvar ncname = '[a-zA-Z_][\\\\w\\\\-\\\\.]*';\nvar qnameCapture = \"((?:\" + ncname + \"\\\\:)?\" + ncname + \")\";\nvar startTagOpen = new RegExp((\"^<\" + qnameCapture));\nvar startTagClose = /^\\s*(\\/?)>/;\nvar endTag = new RegExp((\"^<\\\\/\" + qnameCapture + \"[^>]*>\"));\nvar doctype = /^<!DOCTYPE [^>]+>/i;\nvar comment = /^<!--/;\nvar conditionalComment = /^<!\\[/;\n\nvar IS_REGEX_CAPTURING_BROKEN = false;\n'x'.replace(/x(.)?/g, function (m, g) {\n  IS_REGEX_CAPTURING_BROKEN = g === '';\n});\n\n// Special Elements (can contain anything)\nvar isPlainTextElement = makeMap('script,style,textarea', true);\nvar reCache = {};\n\nvar decodingMap = {\n  '&lt;': '<',\n  '&gt;': '>',\n  '&quot;': '\"',\n  '&amp;': '&',\n  '&#10;': '\\n',\n  '&#9;': '\\t'\n};\nvar encodedAttr = /&(?:lt|gt|quot|amp);/g;\nvar encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#10|#9);/g;\n\n// #5992\nvar isIgnoreNewlineTag = makeMap('pre,textarea', true);\nvar shouldIgnoreFirstNewline = function (tag, html) { return tag && isIgnoreNewlineTag(tag) && html[0] === '\\n'; };\n\nfunction decodeAttr (value, shouldDecodeNewlines) {\n  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;\n  return value.replace(re, function (match) { return decodingMap[match]; })\n}\n\nfunction parseHTML (html, options) {\n  var stack = [];\n  var expectHTML = options.expectHTML;\n  var isUnaryTag$$1 = options.isUnaryTag || no;\n  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;\n  var index = 0;\n  var last, lastTag;\n  while (html) {\n    last = html;\n    // Make sure we're not in a plaintext content element like script/style\n    if (!lastTag || !isPlainTextElement(lastTag)) {\n      var textEnd = html.indexOf('<');\n      if (textEnd === 0) {\n        // Comment:\n        if (comment.test(html)) {\n          var commentEnd = html.indexOf('-->');\n\n          if (commentEnd >= 0) {\n            if (options.shouldKeepComment) {\n              options.comment(html.substring(4, commentEnd));\n            }\n            advance(commentEnd + 3);\n            continue\n          }\n        }\n\n        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\n        if (conditionalComment.test(html)) {\n          var conditionalEnd = html.indexOf(']>');\n\n          if (conditionalEnd >= 0) {\n            advance(conditionalEnd + 2);\n            continue\n          }\n        }\n\n        // Doctype:\n        var doctypeMatch = html.match(doctype);\n        if (doctypeMatch) {\n          advance(doctypeMatch[0].length);\n          continue\n        }\n\n        // End tag:\n        var endTagMatch = html.match(endTag);\n        if (endTagMatch) {\n          var curIndex = index;\n          advance(endTagMatch[0].length);\n          parseEndTag(endTagMatch[1], curIndex, index);\n          continue\n        }\n\n        // Start tag:\n        var startTagMatch = parseStartTag();\n        if (startTagMatch) {\n          handleStartTag(startTagMatch);\n          if (shouldIgnoreFirstNewline(lastTag, html)) {\n            advance(1);\n          }\n          continue\n        }\n      }\n\n      var text = (void 0), rest = (void 0), next = (void 0);\n      if (textEnd >= 0) {\n        rest = html.slice(textEnd);\n        while (\n          !endTag.test(rest) &&\n          !startTagOpen.test(rest) &&\n          !comment.test(rest) &&\n          !conditionalComment.test(rest)\n        ) {\n          // < in plain text, be forgiving and treat it as text\n          next = rest.indexOf('<', 1);\n          if (next < 0) { break }\n          textEnd += next;\n          rest = html.slice(textEnd);\n        }\n        text = html.substring(0, textEnd);\n        advance(textEnd);\n      }\n\n      if (textEnd < 0) {\n        text = html;\n        html = '';\n      }\n\n      if (options.chars && text) {\n        options.chars(text);\n      }\n    } else {\n      var endTagLength = 0;\n      var stackedTag = lastTag.toLowerCase();\n      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\\\s\\\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));\n      var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {\n        endTagLength = endTag.length;\n        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {\n          text = text\n            .replace(/<!--([\\s\\S]*?)-->/g, '$1')\n            .replace(/<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1');\n        }\n        if (shouldIgnoreFirstNewline(stackedTag, text)) {\n          text = text.slice(1);\n        }\n        if (options.chars) {\n          options.chars(text);\n        }\n        return ''\n      });\n      index += html.length - rest$1.length;\n      html = rest$1;\n      parseEndTag(stackedTag, index - endTagLength, index);\n    }\n\n    if (html === last) {\n      options.chars && options.chars(html);\n      if (process.env.NODE_ENV !== 'production' && !stack.length && options.warn) {\n        options.warn((\"Mal-formatted tag at end of template: \\\"\" + html + \"\\\"\"));\n      }\n      break\n    }\n  }\n\n  // Clean up any remaining tags\n  parseEndTag();\n\n  function advance (n) {\n    index += n;\n    html = html.substring(n);\n  }\n\n  function parseStartTag () {\n    var start = html.match(startTagOpen);\n    if (start) {\n      var match = {\n        tagName: start[1],\n        attrs: [],\n        start: index\n      };\n      advance(start[0].length);\n      var end, attr;\n      while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {\n        advance(attr[0].length);\n        match.attrs.push(attr);\n      }\n      if (end) {\n        match.unarySlash = end[1];\n        advance(end[0].length);\n        match.end = index;\n        return match\n      }\n    }\n  }\n\n  function handleStartTag (match) {\n    var tagName = match.tagName;\n    var unarySlash = match.unarySlash;\n\n    if (expectHTML) {\n      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {\n        parseEndTag(lastTag);\n      }\n      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {\n        parseEndTag(tagName);\n      }\n    }\n\n    var unary = isUnaryTag$$1(tagName) || !!unarySlash;\n\n    var l = match.attrs.length;\n    var attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      var args = match.attrs[i];\n      // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778\n      if (IS_REGEX_CAPTURING_BROKEN && args[0].indexOf('\"\"') === -1) {\n        if (args[3] === '') { delete args[3]; }\n        if (args[4] === '') { delete args[4]; }\n        if (args[5] === '') { delete args[5]; }\n      }\n      var value = args[3] || args[4] || args[5] || '';\n      var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href'\n        ? options.shouldDecodeNewlinesForHref\n        : options.shouldDecodeNewlines;\n      attrs[i] = {\n        name: args[1],\n        value: decodeAttr(value, shouldDecodeNewlines)\n      };\n    }\n\n    if (!unary) {\n      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs });\n      lastTag = tagName;\n    }\n\n    if (options.start) {\n      options.start(tagName, attrs, unary, match.start, match.end);\n    }\n  }\n\n  function parseEndTag (tagName, start, end) {\n    var pos, lowerCasedTagName;\n    if (start == null) { start = index; }\n    if (end == null) { end = index; }\n\n    if (tagName) {\n      lowerCasedTagName = tagName.toLowerCase();\n    }\n\n    // Find the closest opened tag of the same type\n    if (tagName) {\n      for (pos = stack.length - 1; pos >= 0; pos--) {\n        if (stack[pos].lowerCasedTag === lowerCasedTagName) {\n          break\n        }\n      }\n    } else {\n      // If no tag name is provided, clean shop\n      pos = 0;\n    }\n\n    if (pos >= 0) {\n      // Close all the open elements, up the stack\n      for (var i = stack.length - 1; i >= pos; i--) {\n        if (process.env.NODE_ENV !== 'production' &&\n          (i > pos || !tagName) &&\n          options.warn\n        ) {\n          options.warn(\n            (\"tag <\" + (stack[i].tag) + \"> has no matching end tag.\")\n          );\n        }\n        if (options.end) {\n          options.end(stack[i].tag, start, end);\n        }\n      }\n\n      // Remove the open elements from the stack\n      stack.length = pos;\n      lastTag = pos && stack[pos - 1].tag;\n    } else if (lowerCasedTagName === 'br') {\n      if (options.start) {\n        options.start(tagName, [], true, start, end);\n      }\n    } else if (lowerCasedTagName === 'p') {\n      if (options.start) {\n        options.start(tagName, [], false, start, end);\n      }\n      if (options.end) {\n        options.end(tagName, start, end);\n      }\n    }\n  }\n}\n\n/*  */\n\nvar onRE = /^@|^v-on:/;\nvar dirRE = /^v-|^@|^:/;\nvar forAliasRE = /(.*?)\\s+(?:in|of)\\s+(.*)/;\nvar forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/;\nvar stripParensRE = /^\\(|\\)$/g;\n\nvar argRE = /:(.*)$/;\nvar bindRE = /^:|^v-bind:/;\nvar modifierRE = /\\.[^.]+/g;\n\nvar decodeHTMLCached = cached(he.decode);\n\n// configurable state\nvar warn$2;\nvar delimiters;\nvar transforms;\nvar preTransforms;\nvar postTransforms;\nvar platformIsPreTag;\nvar platformMustUseProp;\nvar platformGetTagNamespace;\n\n\n\nfunction createASTElement (\n  tag,\n  attrs,\n  parent\n) {\n  return {\n    type: 1,\n    tag: tag,\n    attrsList: attrs,\n    attrsMap: makeAttrsMap(attrs),\n    parent: parent,\n    children: []\n  }\n}\n\n/**\n * Convert HTML string to AST.\n */\nfunction parse (\n  template,\n  options\n) {\n  warn$2 = options.warn || baseWarn;\n\n  platformIsPreTag = options.isPreTag || no;\n  platformMustUseProp = options.mustUseProp || no;\n  platformGetTagNamespace = options.getTagNamespace || no;\n\n  transforms = pluckModuleFunction(options.modules, 'transformNode');\n  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');\n  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');\n\n  delimiters = options.delimiters;\n\n  var stack = [];\n  var preserveWhitespace = options.preserveWhitespace !== false;\n  var root;\n  var currentParent;\n  var inVPre = false;\n  var inPre = false;\n  var warned = false;\n\n  function warnOnce (msg) {\n    if (!warned) {\n      warned = true;\n      warn$2(msg);\n    }\n  }\n\n  function closeElement (element) {\n    // check pre state\n    if (element.pre) {\n      inVPre = false;\n    }\n    if (platformIsPreTag(element.tag)) {\n      inPre = false;\n    }\n    // apply post-transforms\n    for (var i = 0; i < postTransforms.length; i++) {\n      postTransforms[i](element, options);\n    }\n  }\n\n  parseHTML(template, {\n    warn: warn$2,\n    expectHTML: options.expectHTML,\n    isUnaryTag: options.isUnaryTag,\n    canBeLeftOpenTag: options.canBeLeftOpenTag,\n    shouldDecodeNewlines: options.shouldDecodeNewlines,\n    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,\n    shouldKeepComment: options.comments,\n    start: function start (tag, attrs, unary) {\n      // check namespace.\n      // inherit parent ns if there is one\n      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);\n\n      // handle IE svg bug\n      /* istanbul ignore if */\n      if (isIE && ns === 'svg') {\n        attrs = guardIESVGBug(attrs);\n      }\n\n      var element = createASTElement(tag, attrs, currentParent);\n      if (ns) {\n        element.ns = ns;\n      }\n\n      if (isForbiddenTag(element) && !isServerRendering()) {\n        element.forbidden = true;\n        process.env.NODE_ENV !== 'production' && warn$2(\n          'Templates should only be responsible for mapping the state to the ' +\n          'UI. Avoid placing tags with side-effects in your templates, such as ' +\n          \"<\" + tag + \">\" + ', as they will not be parsed.'\n        );\n      }\n\n      // apply pre-transforms\n      for (var i = 0; i < preTransforms.length; i++) {\n        element = preTransforms[i](element, options) || element;\n      }\n\n      if (!inVPre) {\n        processPre(element);\n        if (element.pre) {\n          inVPre = true;\n        }\n      }\n      if (platformIsPreTag(element.tag)) {\n        inPre = true;\n      }\n      if (inVPre) {\n        processRawAttrs(element);\n      } else if (!element.processed) {\n        // structural directives\n        processFor(element);\n        processIf(element);\n        processOnce(element);\n        // element-scope stuff\n        processElement(element, options);\n      }\n\n      function checkRootConstraints (el) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (el.tag === 'slot' || el.tag === 'template') {\n            warnOnce(\n              \"Cannot use <\" + (el.tag) + \"> as component root element because it may \" +\n              'contain multiple nodes.'\n            );\n          }\n          if (el.attrsMap.hasOwnProperty('v-for')) {\n            warnOnce(\n              'Cannot use v-for on stateful component root element because ' +\n              'it renders multiple elements.'\n            );\n          }\n        }\n      }\n\n      // tree management\n      if (!root) {\n        root = element;\n        checkRootConstraints(root);\n      } else if (!stack.length) {\n        // allow root elements with v-if, v-else-if and v-else\n        if (root.if && (element.elseif || element.else)) {\n          checkRootConstraints(element);\n          addIfCondition(root, {\n            exp: element.elseif,\n            block: element\n          });\n        } else if (process.env.NODE_ENV !== 'production') {\n          warnOnce(\n            \"Component template should contain exactly one root element. \" +\n            \"If you are using v-if on multiple elements, \" +\n            \"use v-else-if to chain them instead.\"\n          );\n        }\n      }\n      if (currentParent && !element.forbidden) {\n        if (element.elseif || element.else) {\n          processIfConditions(element, currentParent);\n        } else if (element.slotScope) { // scoped slot\n          currentParent.plain = false;\n          var name = element.slotTarget || '\"default\"';(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;\n        } else {\n          currentParent.children.push(element);\n          element.parent = currentParent;\n        }\n      }\n      if (!unary) {\n        currentParent = element;\n        stack.push(element);\n      } else {\n        closeElement(element);\n      }\n    },\n\n    end: function end () {\n      // remove trailing whitespace\n      var element = stack[stack.length - 1];\n      var lastNode = element.children[element.children.length - 1];\n      if (lastNode && lastNode.type === 3 && lastNode.text === ' ' && !inPre) {\n        element.children.pop();\n      }\n      // pop stack\n      stack.length -= 1;\n      currentParent = stack[stack.length - 1];\n      closeElement(element);\n    },\n\n    chars: function chars (text) {\n      if (!currentParent) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (text === template) {\n            warnOnce(\n              'Component template requires a root element, rather than just text.'\n            );\n          } else if ((text = text.trim())) {\n            warnOnce(\n              (\"text \\\"\" + text + \"\\\" outside root element will be ignored.\")\n            );\n          }\n        }\n        return\n      }\n      // IE textarea placeholder bug\n      /* istanbul ignore if */\n      if (isIE &&\n        currentParent.tag === 'textarea' &&\n        currentParent.attrsMap.placeholder === text\n      ) {\n        return\n      }\n      var children = currentParent.children;\n      text = inPre || text.trim()\n        ? isTextTag(currentParent) ? text : decodeHTMLCached(text)\n        // only preserve whitespace if its not right after a starting tag\n        : preserveWhitespace && children.length ? ' ' : '';\n      if (text) {\n        var res;\n        if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {\n          children.push({\n            type: 2,\n            expression: res.expression,\n            tokens: res.tokens,\n            text: text\n          });\n        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {\n          children.push({\n            type: 3,\n            text: text\n          });\n        }\n      }\n    },\n    comment: function comment (text) {\n      currentParent.children.push({\n        type: 3,\n        text: text,\n        isComment: true\n      });\n    }\n  });\n  return root\n}\n\nfunction processPre (el) {\n  if (getAndRemoveAttr(el, 'v-pre') != null) {\n    el.pre = true;\n  }\n}\n\nfunction processRawAttrs (el) {\n  var l = el.attrsList.length;\n  if (l) {\n    var attrs = el.attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      attrs[i] = {\n        name: el.attrsList[i].name,\n        value: JSON.stringify(el.attrsList[i].value)\n      };\n    }\n  } else if (!el.pre) {\n    // non root node in pre blocks with no attributes\n    el.plain = true;\n  }\n}\n\nfunction processElement (element, options) {\n  processKey(element);\n\n  // determine whether this is a plain element after\n  // removing structural attributes\n  element.plain = !element.key && !element.attrsList.length;\n\n  processRef(element);\n  processSlot(element);\n  processComponent(element);\n  for (var i = 0; i < transforms.length; i++) {\n    element = transforms[i](element, options) || element;\n  }\n  processAttrs(element);\n}\n\nfunction processKey (el) {\n  var exp = getBindingAttr(el, 'key');\n  if (exp) {\n    if (process.env.NODE_ENV !== 'production' && el.tag === 'template') {\n      warn$2(\"<template> cannot be keyed. Place the key on real elements instead.\");\n    }\n    el.key = exp;\n  }\n}\n\nfunction processRef (el) {\n  var ref = getBindingAttr(el, 'ref');\n  if (ref) {\n    el.ref = ref;\n    el.refInFor = checkInFor(el);\n  }\n}\n\nfunction processFor (el) {\n  var exp;\n  if ((exp = getAndRemoveAttr(el, 'v-for'))) {\n    var res = parseFor(exp);\n    if (res) {\n      extend(el, res);\n    } else if (process.env.NODE_ENV !== 'production') {\n      warn$2(\n        (\"Invalid v-for expression: \" + exp)\n      );\n    }\n  }\n}\n\nfunction parseFor (exp) {\n  var inMatch = exp.match(forAliasRE);\n  if (!inMatch) { return }\n  var res = {};\n  res.for = inMatch[2].trim();\n  var alias = inMatch[1].trim().replace(stripParensRE, '');\n  var iteratorMatch = alias.match(forIteratorRE);\n  if (iteratorMatch) {\n    res.alias = alias.replace(forIteratorRE, '');\n    res.iterator1 = iteratorMatch[1].trim();\n    if (iteratorMatch[2]) {\n      res.iterator2 = iteratorMatch[2].trim();\n    }\n  } else {\n    res.alias = alias;\n  }\n  return res\n}\n\nfunction processIf (el) {\n  var exp = getAndRemoveAttr(el, 'v-if');\n  if (exp) {\n    el.if = exp;\n    addIfCondition(el, {\n      exp: exp,\n      block: el\n    });\n  } else {\n    if (getAndRemoveAttr(el, 'v-else') != null) {\n      el.else = true;\n    }\n    var elseif = getAndRemoveAttr(el, 'v-else-if');\n    if (elseif) {\n      el.elseif = elseif;\n    }\n  }\n}\n\nfunction processIfConditions (el, parent) {\n  var prev = findPrevElement(parent.children);\n  if (prev && prev.if) {\n    addIfCondition(prev, {\n      exp: el.elseif,\n      block: el\n    });\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn$2(\n      \"v-\" + (el.elseif ? ('else-if=\"' + el.elseif + '\"') : 'else') + \" \" +\n      \"used on element <\" + (el.tag) + \"> without corresponding v-if.\"\n    );\n  }\n}\n\nfunction findPrevElement (children) {\n  var i = children.length;\n  while (i--) {\n    if (children[i].type === 1) {\n      return children[i]\n    } else {\n      if (process.env.NODE_ENV !== 'production' && children[i].text !== ' ') {\n        warn$2(\n          \"text \\\"\" + (children[i].text.trim()) + \"\\\" between v-if and v-else(-if) \" +\n          \"will be ignored.\"\n        );\n      }\n      children.pop();\n    }\n  }\n}\n\nfunction addIfCondition (el, condition) {\n  if (!el.ifConditions) {\n    el.ifConditions = [];\n  }\n  el.ifConditions.push(condition);\n}\n\nfunction processOnce (el) {\n  var once$$1 = getAndRemoveAttr(el, 'v-once');\n  if (once$$1 != null) {\n    el.once = true;\n  }\n}\n\nfunction processSlot (el) {\n  if (el.tag === 'slot') {\n    el.slotName = getBindingAttr(el, 'name');\n    if (process.env.NODE_ENV !== 'production' && el.key) {\n      warn$2(\n        \"`key` does not work on <slot> because slots are abstract outlets \" +\n        \"and can possibly expand into multiple elements. \" +\n        \"Use the key on a wrapping element instead.\"\n      );\n    }\n  } else {\n    var slotScope;\n    if (el.tag === 'template') {\n      slotScope = getAndRemoveAttr(el, 'scope');\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && slotScope) {\n        warn$2(\n          \"the \\\"scope\\\" attribute for scoped slots have been deprecated and \" +\n          \"replaced by \\\"slot-scope\\\" since 2.5. The new \\\"slot-scope\\\" attribute \" +\n          \"can also be used on plain elements in addition to <template> to \" +\n          \"denote scoped slots.\",\n          true\n        );\n      }\n      el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');\n    } else if ((slotScope = getAndRemoveAttr(el, 'slot-scope'))) {\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && el.attrsMap['v-for']) {\n        warn$2(\n          \"Ambiguous combined usage of slot-scope and v-for on <\" + (el.tag) + \"> \" +\n          \"(v-for takes higher priority). Use a wrapper <template> for the \" +\n          \"scoped slot to make it clearer.\",\n          true\n        );\n      }\n      el.slotScope = slotScope;\n    }\n    var slotTarget = getBindingAttr(el, 'slot');\n    if (slotTarget) {\n      el.slotTarget = slotTarget === '\"\"' ? '\"default\"' : slotTarget;\n      // preserve slot as an attribute for native shadow DOM compat\n      // only for non-scoped slots.\n      if (el.tag !== 'template' && !el.slotScope) {\n        addAttr(el, 'slot', slotTarget);\n      }\n    }\n  }\n}\n\nfunction processComponent (el) {\n  var binding;\n  if ((binding = getBindingAttr(el, 'is'))) {\n    el.component = binding;\n  }\n  if (getAndRemoveAttr(el, 'inline-template') != null) {\n    el.inlineTemplate = true;\n  }\n}\n\nfunction processAttrs (el) {\n  var list = el.attrsList;\n  var i, l, name, rawName, value, modifiers, isProp;\n  for (i = 0, l = list.length; i < l; i++) {\n    name = rawName = list[i].name;\n    value = list[i].value;\n    if (dirRE.test(name)) {\n      // mark element as dynamic\n      el.hasBindings = true;\n      // modifiers\n      modifiers = parseModifiers(name);\n      if (modifiers) {\n        name = name.replace(modifierRE, '');\n      }\n      if (bindRE.test(name)) { // v-bind\n        name = name.replace(bindRE, '');\n        value = parseFilters(value);\n        isProp = false;\n        if (modifiers) {\n          if (modifiers.prop) {\n            isProp = true;\n            name = camelize(name);\n            if (name === 'innerHtml') { name = 'innerHTML'; }\n          }\n          if (modifiers.camel) {\n            name = camelize(name);\n          }\n          if (modifiers.sync) {\n            addHandler(\n              el,\n              (\"update:\" + (camelize(name))),\n              genAssignmentCode(value, \"$event\")\n            );\n          }\n        }\n        if (isProp || (\n          !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)\n        )) {\n          addProp(el, name, value);\n        } else {\n          addAttr(el, name, value);\n        }\n      } else if (onRE.test(name)) { // v-on\n        name = name.replace(onRE, '');\n        addHandler(el, name, value, modifiers, false, warn$2);\n      } else { // normal directives\n        name = name.replace(dirRE, '');\n        // parse arg\n        var argMatch = name.match(argRE);\n        var arg = argMatch && argMatch[1];\n        if (arg) {\n          name = name.slice(0, -(arg.length + 1));\n        }\n        addDirective(el, name, rawName, value, arg, modifiers);\n        if (process.env.NODE_ENV !== 'production' && name === 'model') {\n          checkForAliasModel(el, value);\n        }\n      }\n    } else {\n      // literal attribute\n      if (process.env.NODE_ENV !== 'production') {\n        var res = parseText(value, delimiters);\n        if (res) {\n          warn$2(\n            name + \"=\\\"\" + value + \"\\\": \" +\n            'Interpolation inside attributes has been removed. ' +\n            'Use v-bind or the colon shorthand instead. For example, ' +\n            'instead of <div id=\"{{ val }}\">, use <div :id=\"val\">.'\n          );\n        }\n      }\n      addAttr(el, name, JSON.stringify(value));\n      // #6887 firefox doesn't update muted state if set via attribute\n      // even immediately after element creation\n      if (!el.component &&\n          name === 'muted' &&\n          platformMustUseProp(el.tag, el.attrsMap.type, name)) {\n        addProp(el, name, 'true');\n      }\n    }\n  }\n}\n\nfunction checkInFor (el) {\n  var parent = el;\n  while (parent) {\n    if (parent.for !== undefined) {\n      return true\n    }\n    parent = parent.parent;\n  }\n  return false\n}\n\nfunction parseModifiers (name) {\n  var match = name.match(modifierRE);\n  if (match) {\n    var ret = {};\n    match.forEach(function (m) { ret[m.slice(1)] = true; });\n    return ret\n  }\n}\n\nfunction makeAttrsMap (attrs) {\n  var map = {};\n  for (var i = 0, l = attrs.length; i < l; i++) {\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      map[attrs[i].name] && !isIE && !isEdge\n    ) {\n      warn$2('duplicate attribute: ' + attrs[i].name);\n    }\n    map[attrs[i].name] = attrs[i].value;\n  }\n  return map\n}\n\n// for script (e.g. type=\"x/template\") or style, do not decode content\nfunction isTextTag (el) {\n  return el.tag === 'script' || el.tag === 'style'\n}\n\nfunction isForbiddenTag (el) {\n  return (\n    el.tag === 'style' ||\n    (el.tag === 'script' && (\n      !el.attrsMap.type ||\n      el.attrsMap.type === 'text/javascript'\n    ))\n  )\n}\n\nvar ieNSBug = /^xmlns:NS\\d+/;\nvar ieNSPrefix = /^NS\\d+:/;\n\n/* istanbul ignore next */\nfunction guardIESVGBug (attrs) {\n  var res = [];\n  for (var i = 0; i < attrs.length; i++) {\n    var attr = attrs[i];\n    if (!ieNSBug.test(attr.name)) {\n      attr.name = attr.name.replace(ieNSPrefix, '');\n      res.push(attr);\n    }\n  }\n  return res\n}\n\nfunction checkForAliasModel (el, value) {\n  var _el = el;\n  while (_el) {\n    if (_el.for && _el.alias === value) {\n      warn$2(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n        \"You are binding v-model directly to a v-for iteration alias. \" +\n        \"This will not be able to modify the v-for source array because \" +\n        \"writing to the alias is like modifying a function local variable. \" +\n        \"Consider using an array of objects and use v-model on an object property instead.\"\n      );\n    }\n    _el = _el.parent;\n  }\n}\n\n/*  */\n\n/**\n * Expand input[v-model] with dyanmic type bindings into v-if-else chains\n * Turn this:\n *   <input v-model=\"data[type]\" :type=\"type\">\n * into this:\n *   <input v-if=\"type === 'checkbox'\" type=\"checkbox\" v-model=\"data[type]\">\n *   <input v-else-if=\"type === 'radio'\" type=\"radio\" v-model=\"data[type]\">\n *   <input v-else :type=\"type\" v-model=\"data[type]\">\n */\n\nfunction preTransformNode (el, options) {\n  if (el.tag === 'input') {\n    var map = el.attrsMap;\n    if (map['v-model'] && (map['v-bind:type'] || map[':type'])) {\n      var typeBinding = getBindingAttr(el, 'type');\n      var ifCondition = getAndRemoveAttr(el, 'v-if', true);\n      var ifConditionExtra = ifCondition ? (\"&&(\" + ifCondition + \")\") : \"\";\n      var hasElse = getAndRemoveAttr(el, 'v-else', true) != null;\n      var elseIfCondition = getAndRemoveAttr(el, 'v-else-if', true);\n      // 1. checkbox\n      var branch0 = cloneASTElement(el);\n      // process for on the main node\n      processFor(branch0);\n      addRawAttr(branch0, 'type', 'checkbox');\n      processElement(branch0, options);\n      branch0.processed = true; // prevent it from double-processed\n      branch0.if = \"(\" + typeBinding + \")==='checkbox'\" + ifConditionExtra;\n      addIfCondition(branch0, {\n        exp: branch0.if,\n        block: branch0\n      });\n      // 2. add radio else-if condition\n      var branch1 = cloneASTElement(el);\n      getAndRemoveAttr(branch1, 'v-for', true);\n      addRawAttr(branch1, 'type', 'radio');\n      processElement(branch1, options);\n      addIfCondition(branch0, {\n        exp: \"(\" + typeBinding + \")==='radio'\" + ifConditionExtra,\n        block: branch1\n      });\n      // 3. other\n      var branch2 = cloneASTElement(el);\n      getAndRemoveAttr(branch2, 'v-for', true);\n      addRawAttr(branch2, ':type', typeBinding);\n      processElement(branch2, options);\n      addIfCondition(branch0, {\n        exp: ifCondition,\n        block: branch2\n      });\n\n      if (hasElse) {\n        branch0.else = true;\n      } else if (elseIfCondition) {\n        branch0.elseif = elseIfCondition;\n      }\n\n      return branch0\n    }\n  }\n}\n\nfunction cloneASTElement (el) {\n  return createASTElement(el.tag, el.attrsList.slice(), el.parent)\n}\n\nvar model$2 = {\n  preTransformNode: preTransformNode\n};\n\nvar modules$1 = [\n  klass$1,\n  style$1,\n  model$2\n];\n\n/*  */\n\nfunction text (el, dir) {\n  if (dir.value) {\n    addProp(el, 'textContent', (\"_s(\" + (dir.value) + \")\"));\n  }\n}\n\n/*  */\n\nfunction html (el, dir) {\n  if (dir.value) {\n    addProp(el, 'innerHTML', (\"_s(\" + (dir.value) + \")\"));\n  }\n}\n\nvar directives$1 = {\n  model: model,\n  text: text,\n  html: html\n};\n\n/*  */\n\nvar baseOptions = {\n  expectHTML: true,\n  modules: modules$1,\n  directives: directives$1,\n  isPreTag: isPreTag,\n  isUnaryTag: isUnaryTag,\n  mustUseProp: mustUseProp,\n  canBeLeftOpenTag: canBeLeftOpenTag,\n  isReservedTag: isReservedTag,\n  getTagNamespace: getTagNamespace,\n  staticKeys: genStaticKeys(modules$1)\n};\n\n/*  */\n\nvar isStaticKey;\nvar isPlatformReservedTag;\n\nvar genStaticKeysCached = cached(genStaticKeys$1);\n\n/**\n * Goal of the optimizer: walk the generated template AST tree\n * and detect sub-trees that are purely static, i.e. parts of\n * the DOM that never needs to change.\n *\n * Once we detect these sub-trees, we can:\n *\n * 1. Hoist them into constants, so that we no longer need to\n *    create fresh nodes for them on each re-render;\n * 2. Completely skip them in the patching process.\n */\nfunction optimize (root, options) {\n  if (!root) { return }\n  isStaticKey = genStaticKeysCached(options.staticKeys || '');\n  isPlatformReservedTag = options.isReservedTag || no;\n  // first pass: mark all non-static nodes.\n  markStatic$1(root);\n  // second pass: mark static roots.\n  markStaticRoots(root, false);\n}\n\nfunction genStaticKeys$1 (keys) {\n  return makeMap(\n    'type,tag,attrsList,attrsMap,plain,parent,children,attrs' +\n    (keys ? ',' + keys : '')\n  )\n}\n\nfunction markStatic$1 (node) {\n  node.static = isStatic(node);\n  if (node.type === 1) {\n    // do not make component slot content static. this avoids\n    // 1. components not able to mutate slot nodes\n    // 2. static slot content fails for hot-reloading\n    if (\n      !isPlatformReservedTag(node.tag) &&\n      node.tag !== 'slot' &&\n      node.attrsMap['inline-template'] == null\n    ) {\n      return\n    }\n    for (var i = 0, l = node.children.length; i < l; i++) {\n      var child = node.children[i];\n      markStatic$1(child);\n      if (!child.static) {\n        node.static = false;\n      }\n    }\n    if (node.ifConditions) {\n      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {\n        var block = node.ifConditions[i$1].block;\n        markStatic$1(block);\n        if (!block.static) {\n          node.static = false;\n        }\n      }\n    }\n  }\n}\n\nfunction markStaticRoots (node, isInFor) {\n  if (node.type === 1) {\n    if (node.static || node.once) {\n      node.staticInFor = isInFor;\n    }\n    // For a node to qualify as a static root, it should have children that\n    // are not just static text. Otherwise the cost of hoisting out will\n    // outweigh the benefits and it's better off to just always render it fresh.\n    if (node.static && node.children.length && !(\n      node.children.length === 1 &&\n      node.children[0].type === 3\n    )) {\n      node.staticRoot = true;\n      return\n    } else {\n      node.staticRoot = false;\n    }\n    if (node.children) {\n      for (var i = 0, l = node.children.length; i < l; i++) {\n        markStaticRoots(node.children[i], isInFor || !!node.for);\n      }\n    }\n    if (node.ifConditions) {\n      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {\n        markStaticRoots(node.ifConditions[i$1].block, isInFor);\n      }\n    }\n  }\n}\n\nfunction isStatic (node) {\n  if (node.type === 2) { // expression\n    return false\n  }\n  if (node.type === 3) { // text\n    return true\n  }\n  return !!(node.pre || (\n    !node.hasBindings && // no dynamic bindings\n    !node.if && !node.for && // not v-if or v-for or v-else\n    !isBuiltInTag(node.tag) && // not a built-in\n    isPlatformReservedTag(node.tag) && // not a component\n    !isDirectChildOfTemplateFor(node) &&\n    Object.keys(node).every(isStaticKey)\n  ))\n}\n\nfunction isDirectChildOfTemplateFor (node) {\n  while (node.parent) {\n    node = node.parent;\n    if (node.tag !== 'template') {\n      return false\n    }\n    if (node.for) {\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\nvar fnExpRE = /^\\s*([\\w$_]+|\\([^)]*?\\))\\s*=>|^function\\s*\\(/;\nvar simplePathRE = /^\\s*[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['.*?']|\\[\".*?\"]|\\[\\d+]|\\[[A-Za-z_$][\\w$]*])*\\s*$/;\n\n// keyCode aliases\nvar keyCodes = {\n  esc: 27,\n  tab: 9,\n  enter: 13,\n  space: 32,\n  up: 38,\n  left: 37,\n  right: 39,\n  down: 40,\n  'delete': [8, 46]\n};\n\n// #4868: modifiers that prevent the execution of the listener\n// need to explicitly return null so that we can determine whether to remove\n// the listener for .once\nvar genGuard = function (condition) { return (\"if(\" + condition + \")return null;\"); };\n\nvar modifierCode = {\n  stop: '$event.stopPropagation();',\n  prevent: '$event.preventDefault();',\n  self: genGuard(\"$event.target !== $event.currentTarget\"),\n  ctrl: genGuard(\"!$event.ctrlKey\"),\n  shift: genGuard(\"!$event.shiftKey\"),\n  alt: genGuard(\"!$event.altKey\"),\n  meta: genGuard(\"!$event.metaKey\"),\n  left: genGuard(\"'button' in $event && $event.button !== 0\"),\n  middle: genGuard(\"'button' in $event && $event.button !== 1\"),\n  right: genGuard(\"'button' in $event && $event.button !== 2\")\n};\n\nfunction genHandlers (\n  events,\n  isNative,\n  warn\n) {\n  var res = isNative ? 'nativeOn:{' : 'on:{';\n  for (var name in events) {\n    res += \"\\\"\" + name + \"\\\":\" + (genHandler(name, events[name])) + \",\";\n  }\n  return res.slice(0, -1) + '}'\n}\n\nfunction genHandler (\n  name,\n  handler\n) {\n  if (!handler) {\n    return 'function(){}'\n  }\n\n  if (Array.isArray(handler)) {\n    return (\"[\" + (handler.map(function (handler) { return genHandler(name, handler); }).join(',')) + \"]\")\n  }\n\n  var isMethodPath = simplePathRE.test(handler.value);\n  var isFunctionExpression = fnExpRE.test(handler.value);\n\n  if (!handler.modifiers) {\n    if (isMethodPath || isFunctionExpression) {\n      return handler.value\n    }\n    /* istanbul ignore if */\n    return (\"function($event){\" + (handler.value) + \"}\") // inline statement\n  } else {\n    var code = '';\n    var genModifierCode = '';\n    var keys = [];\n    for (var key in handler.modifiers) {\n      if (modifierCode[key]) {\n        genModifierCode += modifierCode[key];\n        // left/right\n        if (keyCodes[key]) {\n          keys.push(key);\n        }\n      } else if (key === 'exact') {\n        var modifiers = (handler.modifiers);\n        genModifierCode += genGuard(\n          ['ctrl', 'shift', 'alt', 'meta']\n            .filter(function (keyModifier) { return !modifiers[keyModifier]; })\n            .map(function (keyModifier) { return (\"$event.\" + keyModifier + \"Key\"); })\n            .join('||')\n        );\n      } else {\n        keys.push(key);\n      }\n    }\n    if (keys.length) {\n      code += genKeyFilter(keys);\n    }\n    // Make sure modifiers like prevent and stop get executed after key filtering\n    if (genModifierCode) {\n      code += genModifierCode;\n    }\n    var handlerCode = isMethodPath\n      ? handler.value + '($event)'\n      : isFunctionExpression\n        ? (\"(\" + (handler.value) + \")($event)\")\n        : handler.value;\n    /* istanbul ignore if */\n    return (\"function($event){\" + code + handlerCode + \"}\")\n  }\n}\n\nfunction genKeyFilter (keys) {\n  return (\"if(!('button' in $event)&&\" + (keys.map(genFilterCode).join('&&')) + \")return null;\")\n}\n\nfunction genFilterCode (key) {\n  var keyVal = parseInt(key, 10);\n  if (keyVal) {\n    return (\"$event.keyCode!==\" + keyVal)\n  }\n  var code = keyCodes[key];\n  return (\n    \"_k($event.keyCode,\" +\n    (JSON.stringify(key)) + \",\" +\n    (JSON.stringify(code)) + \",\" +\n    \"$event.key)\"\n  )\n}\n\n/*  */\n\nfunction on (el, dir) {\n  if (process.env.NODE_ENV !== 'production' && dir.modifiers) {\n    warn(\"v-on without argument does not support modifiers.\");\n  }\n  el.wrapListeners = function (code) { return (\"_g(\" + code + \",\" + (dir.value) + \")\"); };\n}\n\n/*  */\n\nfunction bind$1 (el, dir) {\n  el.wrapData = function (code) {\n    return (\"_b(\" + code + \",'\" + (el.tag) + \"',\" + (dir.value) + \",\" + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + \")\")\n  };\n}\n\n/*  */\n\nvar baseDirectives = {\n  on: on,\n  bind: bind$1,\n  cloak: noop\n};\n\n/*  */\n\nvar CodegenState = function CodegenState (options) {\n  this.options = options;\n  this.warn = options.warn || baseWarn;\n  this.transforms = pluckModuleFunction(options.modules, 'transformCode');\n  this.dataGenFns = pluckModuleFunction(options.modules, 'genData');\n  this.directives = extend(extend({}, baseDirectives), options.directives);\n  var isReservedTag = options.isReservedTag || no;\n  this.maybeComponent = function (el) { return !isReservedTag(el.tag); };\n  this.onceId = 0;\n  this.staticRenderFns = [];\n};\n\n\n\nfunction generate (\n  ast,\n  options\n) {\n  var state = new CodegenState(options);\n  var code = ast ? genElement(ast, state) : '_c(\"div\")';\n  return {\n    render: (\"with(this){return \" + code + \"}\"),\n    staticRenderFns: state.staticRenderFns\n  }\n}\n\nfunction genElement (el, state) {\n  if (el.staticRoot && !el.staticProcessed) {\n    return genStatic(el, state)\n  } else if (el.once && !el.onceProcessed) {\n    return genOnce(el, state)\n  } else if (el.for && !el.forProcessed) {\n    return genFor(el, state)\n  } else if (el.if && !el.ifProcessed) {\n    return genIf(el, state)\n  } else if (el.tag === 'template' && !el.slotTarget) {\n    return genChildren(el, state) || 'void 0'\n  } else if (el.tag === 'slot') {\n    return genSlot(el, state)\n  } else {\n    // component or element\n    var code;\n    if (el.component) {\n      code = genComponent(el.component, el, state);\n    } else {\n      var data = el.plain ? undefined : genData$2(el, state);\n\n      var children = el.inlineTemplate ? null : genChildren(el, state, true);\n      code = \"_c('\" + (el.tag) + \"'\" + (data ? (\",\" + data) : '') + (children ? (\",\" + children) : '') + \")\";\n    }\n    // module transforms\n    for (var i = 0; i < state.transforms.length; i++) {\n      code = state.transforms[i](el, code);\n    }\n    return code\n  }\n}\n\n// hoist static sub-trees out\nfunction genStatic (el, state) {\n  el.staticProcessed = true;\n  state.staticRenderFns.push((\"with(this){return \" + (genElement(el, state)) + \"}\"));\n  return (\"_m(\" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + \")\")\n}\n\n// v-once\nfunction genOnce (el, state) {\n  el.onceProcessed = true;\n  if (el.if && !el.ifProcessed) {\n    return genIf(el, state)\n  } else if (el.staticInFor) {\n    var key = '';\n    var parent = el.parent;\n    while (parent) {\n      if (parent.for) {\n        key = parent.key;\n        break\n      }\n      parent = parent.parent;\n    }\n    if (!key) {\n      process.env.NODE_ENV !== 'production' && state.warn(\n        \"v-once can only be used inside v-for that is keyed. \"\n      );\n      return genElement(el, state)\n    }\n    return (\"_o(\" + (genElement(el, state)) + \",\" + (state.onceId++) + \",\" + key + \")\")\n  } else {\n    return genStatic(el, state)\n  }\n}\n\nfunction genIf (\n  el,\n  state,\n  altGen,\n  altEmpty\n) {\n  el.ifProcessed = true; // avoid recursion\n  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty)\n}\n\nfunction genIfConditions (\n  conditions,\n  state,\n  altGen,\n  altEmpty\n) {\n  if (!conditions.length) {\n    return altEmpty || '_e()'\n  }\n\n  var condition = conditions.shift();\n  if (condition.exp) {\n    return (\"(\" + (condition.exp) + \")?\" + (genTernaryExp(condition.block)) + \":\" + (genIfConditions(conditions, state, altGen, altEmpty)))\n  } else {\n    return (\"\" + (genTernaryExp(condition.block)))\n  }\n\n  // v-if with v-once should generate code like (a)?_m(0):_m(1)\n  function genTernaryExp (el) {\n    return altGen\n      ? altGen(el, state)\n      : el.once\n        ? genOnce(el, state)\n        : genElement(el, state)\n  }\n}\n\nfunction genFor (\n  el,\n  state,\n  altGen,\n  altHelper\n) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\n\n  if (process.env.NODE_ENV !== 'production' &&\n    state.maybeComponent(el) &&\n    el.tag !== 'slot' &&\n    el.tag !== 'template' &&\n    !el.key\n  ) {\n    state.warn(\n      \"<\" + (el.tag) + \" v-for=\\\"\" + alias + \" in \" + exp + \"\\\">: component lists rendered with \" +\n      \"v-for should have explicit keys. \" +\n      \"See https://vuejs.org/guide/list.html#key for more info.\",\n      true /* tip */\n    );\n  }\n\n  el.forProcessed = true; // avoid recursion\n  return (altHelper || '_l') + \"((\" + exp + \"),\" +\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\n      \"return \" + ((altGen || genElement)(el, state)) +\n    '})'\n}\n\nfunction genData$2 (el, state) {\n  var data = '{';\n\n  // directives first.\n  // directives may mutate the el's other properties before they are generated.\n  var dirs = genDirectives(el, state);\n  if (dirs) { data += dirs + ','; }\n\n  // key\n  if (el.key) {\n    data += \"key:\" + (el.key) + \",\";\n  }\n  // ref\n  if (el.ref) {\n    data += \"ref:\" + (el.ref) + \",\";\n  }\n  if (el.refInFor) {\n    data += \"refInFor:true,\";\n  }\n  // pre\n  if (el.pre) {\n    data += \"pre:true,\";\n  }\n  // record original tag name for components using \"is\" attribute\n  if (el.component) {\n    data += \"tag:\\\"\" + (el.tag) + \"\\\",\";\n  }\n  // module data generation functions\n  for (var i = 0; i < state.dataGenFns.length; i++) {\n    data += state.dataGenFns[i](el);\n  }\n  // attributes\n  if (el.attrs) {\n    data += \"attrs:{\" + (genProps(el.attrs)) + \"},\";\n  }\n  // DOM props\n  if (el.props) {\n    data += \"domProps:{\" + (genProps(el.props)) + \"},\";\n  }\n  // event handlers\n  if (el.events) {\n    data += (genHandlers(el.events, false, state.warn)) + \",\";\n  }\n  if (el.nativeEvents) {\n    data += (genHandlers(el.nativeEvents, true, state.warn)) + \",\";\n  }\n  // slot target\n  // only for non-scoped slots\n  if (el.slotTarget && !el.slotScope) {\n    data += \"slot:\" + (el.slotTarget) + \",\";\n  }\n  // scoped slots\n  if (el.scopedSlots) {\n    data += (genScopedSlots(el.scopedSlots, state)) + \",\";\n  }\n  // component v-model\n  if (el.model) {\n    data += \"model:{value:\" + (el.model.value) + \",callback:\" + (el.model.callback) + \",expression:\" + (el.model.expression) + \"},\";\n  }\n  // inline-template\n  if (el.inlineTemplate) {\n    var inlineTemplate = genInlineTemplate(el, state);\n    if (inlineTemplate) {\n      data += inlineTemplate + \",\";\n    }\n  }\n  data = data.replace(/,$/, '') + '}';\n  // v-bind data wrap\n  if (el.wrapData) {\n    data = el.wrapData(data);\n  }\n  // v-on data wrap\n  if (el.wrapListeners) {\n    data = el.wrapListeners(data);\n  }\n  return data\n}\n\nfunction genDirectives (el, state) {\n  var dirs = el.directives;\n  if (!dirs) { return }\n  var res = 'directives:[';\n  var hasRuntime = false;\n  var i, l, dir, needRuntime;\n  for (i = 0, l = dirs.length; i < l; i++) {\n    dir = dirs[i];\n    needRuntime = true;\n    var gen = state.directives[dir.name];\n    if (gen) {\n      // compile-time directive that manipulates AST.\n      // returns true if it also needs a runtime counterpart.\n      needRuntime = !!gen(el, dir, state.warn);\n    }\n    if (needRuntime) {\n      hasRuntime = true;\n      res += \"{name:\\\"\" + (dir.name) + \"\\\",rawName:\\\"\" + (dir.rawName) + \"\\\"\" + (dir.value ? (\",value:(\" + (dir.value) + \"),expression:\" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (\",arg:\\\"\" + (dir.arg) + \"\\\"\") : '') + (dir.modifiers ? (\",modifiers:\" + (JSON.stringify(dir.modifiers))) : '') + \"},\";\n    }\n  }\n  if (hasRuntime) {\n    return res.slice(0, -1) + ']'\n  }\n}\n\nfunction genInlineTemplate (el, state) {\n  var ast = el.children[0];\n  if (process.env.NODE_ENV !== 'production' && (\n    el.children.length !== 1 || ast.type !== 1\n  )) {\n    state.warn('Inline-template components must have exactly one child element.');\n  }\n  if (ast.type === 1) {\n    var inlineRenderFns = generate(ast, state.options);\n    return (\"inlineTemplate:{render:function(){\" + (inlineRenderFns.render) + \"},staticRenderFns:[\" + (inlineRenderFns.staticRenderFns.map(function (code) { return (\"function(){\" + code + \"}\"); }).join(',')) + \"]}\")\n  }\n}\n\nfunction genScopedSlots (\n  slots,\n  state\n) {\n  return (\"scopedSlots:_u([\" + (Object.keys(slots).map(function (key) {\n      return genScopedSlot(key, slots[key], state)\n    }).join(',')) + \"])\")\n}\n\nfunction genScopedSlot (\n  key,\n  el,\n  state\n) {\n  if (el.for && !el.forProcessed) {\n    return genForScopedSlot(key, el, state)\n  }\n  var fn = \"function(\" + (String(el.slotScope)) + \"){\" +\n    \"return \" + (el.tag === 'template'\n      ? el.if\n        ? ((el.if) + \"?\" + (genChildren(el, state) || 'undefined') + \":undefined\")\n        : genChildren(el, state) || 'undefined'\n      : genElement(el, state)) + \"}\";\n  return (\"{key:\" + key + \",fn:\" + fn + \"}\")\n}\n\nfunction genForScopedSlot (\n  key,\n  el,\n  state\n) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\n  el.forProcessed = true; // avoid recursion\n  return \"_l((\" + exp + \"),\" +\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\n      \"return \" + (genScopedSlot(key, el, state)) +\n    '})'\n}\n\nfunction genChildren (\n  el,\n  state,\n  checkSkip,\n  altGenElement,\n  altGenNode\n) {\n  var children = el.children;\n  if (children.length) {\n    var el$1 = children[0];\n    // optimize single v-for\n    if (children.length === 1 &&\n      el$1.for &&\n      el$1.tag !== 'template' &&\n      el$1.tag !== 'slot'\n    ) {\n      return (altGenElement || genElement)(el$1, state)\n    }\n    var normalizationType = checkSkip\n      ? getNormalizationType(children, state.maybeComponent)\n      : 0;\n    var gen = altGenNode || genNode;\n    return (\"[\" + (children.map(function (c) { return gen(c, state); }).join(',')) + \"]\" + (normalizationType ? (\",\" + normalizationType) : ''))\n  }\n}\n\n// determine the normalization needed for the children array.\n// 0: no normalization needed\n// 1: simple normalization needed (possible 1-level deep nested array)\n// 2: full normalization needed\nfunction getNormalizationType (\n  children,\n  maybeComponent\n) {\n  var res = 0;\n  for (var i = 0; i < children.length; i++) {\n    var el = children[i];\n    if (el.type !== 1) {\n      continue\n    }\n    if (needsNormalization(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {\n      res = 2;\n      break\n    }\n    if (maybeComponent(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {\n      res = 1;\n    }\n  }\n  return res\n}\n\nfunction needsNormalization (el) {\n  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'\n}\n\nfunction genNode (node, state) {\n  if (node.type === 1) {\n    return genElement(node, state)\n  } if (node.type === 3 && node.isComment) {\n    return genComment(node)\n  } else {\n    return genText(node)\n  }\n}\n\nfunction genText (text) {\n  return (\"_v(\" + (text.type === 2\n    ? text.expression // no need for () because already wrapped in _s()\n    : transformSpecialNewlines(JSON.stringify(text.text))) + \")\")\n}\n\nfunction genComment (comment) {\n  return (\"_e(\" + (JSON.stringify(comment.text)) + \")\")\n}\n\nfunction genSlot (el, state) {\n  var slotName = el.slotName || '\"default\"';\n  var children = genChildren(el, state);\n  var res = \"_t(\" + slotName + (children ? (\",\" + children) : '');\n  var attrs = el.attrs && (\"{\" + (el.attrs.map(function (a) { return ((camelize(a.name)) + \":\" + (a.value)); }).join(',')) + \"}\");\n  var bind$$1 = el.attrsMap['v-bind'];\n  if ((attrs || bind$$1) && !children) {\n    res += \",null\";\n  }\n  if (attrs) {\n    res += \",\" + attrs;\n  }\n  if (bind$$1) {\n    res += (attrs ? '' : ',null') + \",\" + bind$$1;\n  }\n  return res + ')'\n}\n\n// componentName is el.component, take it as argument to shun flow's pessimistic refinement\nfunction genComponent (\n  componentName,\n  el,\n  state\n) {\n  var children = el.inlineTemplate ? null : genChildren(el, state, true);\n  return (\"_c(\" + componentName + \",\" + (genData$2(el, state)) + (children ? (\",\" + children) : '') + \")\")\n}\n\nfunction genProps (props) {\n  var res = '';\n  for (var i = 0; i < props.length; i++) {\n    var prop = props[i];\n    /* istanbul ignore if */\n    {\n      res += \"\\\"\" + (prop.name) + \"\\\":\" + (transformSpecialNewlines(prop.value)) + \",\";\n    }\n  }\n  return res.slice(0, -1)\n}\n\n// #3895, #4268\nfunction transformSpecialNewlines (text) {\n  return text\n    .replace(/\\u2028/g, '\\\\u2028')\n    .replace(/\\u2029/g, '\\\\u2029')\n}\n\n/*  */\n\n// these keywords should not appear inside expressions, but operators like\n// typeof, instanceof and in are allowed\nvar prohibitedKeywordRE = new RegExp('\\\\b' + (\n  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +\n  'super,throw,while,yield,delete,export,import,return,switch,default,' +\n  'extends,finally,continue,debugger,function,arguments'\n).split(',').join('\\\\b|\\\\b') + '\\\\b');\n\n// these unary operators should not be used as property/method names\nvar unaryOperatorsRE = new RegExp('\\\\b' + (\n  'delete,typeof,void'\n).split(',').join('\\\\s*\\\\([^\\\\)]*\\\\)|\\\\b') + '\\\\s*\\\\([^\\\\)]*\\\\)');\n\n// strip strings in expressions\nvar stripStringRE = /'(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`/g;\n\n// detect problematic expressions in a template\nfunction detectErrors (ast) {\n  var errors = [];\n  if (ast) {\n    checkNode(ast, errors);\n  }\n  return errors\n}\n\nfunction checkNode (node, errors) {\n  if (node.type === 1) {\n    for (var name in node.attrsMap) {\n      if (dirRE.test(name)) {\n        var value = node.attrsMap[name];\n        if (value) {\n          if (name === 'v-for') {\n            checkFor(node, (\"v-for=\\\"\" + value + \"\\\"\"), errors);\n          } else if (onRE.test(name)) {\n            checkEvent(value, (name + \"=\\\"\" + value + \"\\\"\"), errors);\n          } else {\n            checkExpression(value, (name + \"=\\\"\" + value + \"\\\"\"), errors);\n          }\n        }\n      }\n    }\n    if (node.children) {\n      for (var i = 0; i < node.children.length; i++) {\n        checkNode(node.children[i], errors);\n      }\n    }\n  } else if (node.type === 2) {\n    checkExpression(node.expression, node.text, errors);\n  }\n}\n\nfunction checkEvent (exp, text, errors) {\n  var stipped = exp.replace(stripStringRE, '');\n  var keywordMatch = stipped.match(unaryOperatorsRE);\n  if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {\n    errors.push(\n      \"avoid using JavaScript unary operator as property name: \" +\n      \"\\\"\" + (keywordMatch[0]) + \"\\\" in expression \" + (text.trim())\n    );\n  }\n  checkExpression(exp, text, errors);\n}\n\nfunction checkFor (node, text, errors) {\n  checkExpression(node.for || '', text, errors);\n  checkIdentifier(node.alias, 'v-for alias', text, errors);\n  checkIdentifier(node.iterator1, 'v-for iterator', text, errors);\n  checkIdentifier(node.iterator2, 'v-for iterator', text, errors);\n}\n\nfunction checkIdentifier (\n  ident,\n  type,\n  text,\n  errors\n) {\n  if (typeof ident === 'string') {\n    try {\n      new Function((\"var \" + ident + \"=_\"));\n    } catch (e) {\n      errors.push((\"invalid \" + type + \" \\\"\" + ident + \"\\\" in expression: \" + (text.trim())));\n    }\n  }\n}\n\nfunction checkExpression (exp, text, errors) {\n  try {\n    new Function((\"return \" + exp));\n  } catch (e) {\n    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);\n    if (keywordMatch) {\n      errors.push(\n        \"avoid using JavaScript keyword as property name: \" +\n        \"\\\"\" + (keywordMatch[0]) + \"\\\"\\n  Raw expression: \" + (text.trim())\n      );\n    } else {\n      errors.push(\n        \"invalid expression: \" + (e.message) + \" in\\n\\n\" +\n        \"    \" + exp + \"\\n\\n\" +\n        \"  Raw expression: \" + (text.trim()) + \"\\n\"\n      );\n    }\n  }\n}\n\n/*  */\n\nfunction createFunction (code, errors) {\n  try {\n    return new Function(code)\n  } catch (err) {\n    errors.push({ err: err, code: code });\n    return noop\n  }\n}\n\nfunction createCompileToFunctionFn (compile) {\n  var cache = Object.create(null);\n\n  return function compileToFunctions (\n    template,\n    options,\n    vm\n  ) {\n    options = extend({}, options);\n    var warn$$1 = options.warn || warn;\n    delete options.warn;\n\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production') {\n      // detect possible CSP restriction\n      try {\n        new Function('return 1');\n      } catch (e) {\n        if (e.toString().match(/unsafe-eval|CSP/)) {\n          warn$$1(\n            'It seems you are using the standalone build of Vue.js in an ' +\n            'environment with Content Security Policy that prohibits unsafe-eval. ' +\n            'The template compiler cannot work in this environment. Consider ' +\n            'relaxing the policy to allow unsafe-eval or pre-compiling your ' +\n            'templates into render functions.'\n          );\n        }\n      }\n    }\n\n    // check cache\n    var key = options.delimiters\n      ? String(options.delimiters) + template\n      : template;\n    if (cache[key]) {\n      return cache[key]\n    }\n\n    // compile\n    var compiled = compile(template, options);\n\n    // check compilation errors/tips\n    if (process.env.NODE_ENV !== 'production') {\n      if (compiled.errors && compiled.errors.length) {\n        warn$$1(\n          \"Error compiling template:\\n\\n\" + template + \"\\n\\n\" +\n          compiled.errors.map(function (e) { return (\"- \" + e); }).join('\\n') + '\\n',\n          vm\n        );\n      }\n      if (compiled.tips && compiled.tips.length) {\n        compiled.tips.forEach(function (msg) { return tip(msg, vm); });\n      }\n    }\n\n    // turn code into functions\n    var res = {};\n    var fnGenErrors = [];\n    res.render = createFunction(compiled.render, fnGenErrors);\n    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {\n      return createFunction(code, fnGenErrors)\n    });\n\n    // check function generation errors.\n    // this should only happen if there is a bug in the compiler itself.\n    // mostly for codegen development use\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production') {\n      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {\n        warn$$1(\n          \"Failed to generate render function:\\n\\n\" +\n          fnGenErrors.map(function (ref) {\n            var err = ref.err;\n            var code = ref.code;\n\n            return ((err.toString()) + \" in\\n\\n\" + code + \"\\n\");\n        }).join('\\n'),\n          vm\n        );\n      }\n    }\n\n    return (cache[key] = res)\n  }\n}\n\n/*  */\n\nfunction createCompilerCreator (baseCompile) {\n  return function createCompiler (baseOptions) {\n    function compile (\n      template,\n      options\n    ) {\n      var finalOptions = Object.create(baseOptions);\n      var errors = [];\n      var tips = [];\n      finalOptions.warn = function (msg, tip) {\n        (tip ? tips : errors).push(msg);\n      };\n\n      if (options) {\n        // merge custom modules\n        if (options.modules) {\n          finalOptions.modules =\n            (baseOptions.modules || []).concat(options.modules);\n        }\n        // merge custom directives\n        if (options.directives) {\n          finalOptions.directives = extend(\n            Object.create(baseOptions.directives || null),\n            options.directives\n          );\n        }\n        // copy other options\n        for (var key in options) {\n          if (key !== 'modules' && key !== 'directives') {\n            finalOptions[key] = options[key];\n          }\n        }\n      }\n\n      var compiled = baseCompile(template, finalOptions);\n      if (process.env.NODE_ENV !== 'production') {\n        errors.push.apply(errors, detectErrors(compiled.ast));\n      }\n      compiled.errors = errors;\n      compiled.tips = tips;\n      return compiled\n    }\n\n    return {\n      compile: compile,\n      compileToFunctions: createCompileToFunctionFn(compile)\n    }\n  }\n}\n\n/*  */\n\n// `createCompilerCreator` allows creating compilers that use alternative\n// parser/optimizer/codegen, e.g the SSR optimizing compiler.\n// Here we just export a default compiler using the default parts.\nvar createCompiler = createCompilerCreator(function baseCompile (\n  template,\n  options\n) {\n  var ast = parse(template.trim(), options);\n  if (options.optimize !== false) {\n    optimize(ast, options);\n  }\n  var code = generate(ast, options);\n  return {\n    ast: ast,\n    render: code.render,\n    staticRenderFns: code.staticRenderFns\n  }\n});\n\n/*  */\n\nvar ref$1 = createCompiler(baseOptions);\nvar compileToFunctions = ref$1.compileToFunctions;\n\n/*  */\n\n// check whether current browser encodes a char inside attribute values\nvar div;\nfunction getShouldDecode (href) {\n  div = div || document.createElement('div');\n  div.innerHTML = href ? \"<a href=\\\"\\n\\\"/>\" : \"<div a=\\\"\\n\\\"/>\";\n  return div.innerHTML.indexOf('&#10;') > 0\n}\n\n// #3663: IE encodes newlines inside attribute values while other browsers don't\nvar shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false;\n// #6828: chrome encodes content in a[href]\nvar shouldDecodeNewlinesForHref = inBrowser ? getShouldDecode(true) : false;\n\n/*  */\n\nvar idToTemplate = cached(function (id) {\n  var el = query(id);\n  return el && el.innerHTML\n});\n\nvar mount = Vue$3.prototype.$mount;\nVue$3.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && query(el);\n\n  /* istanbul ignore if */\n  if (el === document.body || el === document.documentElement) {\n    process.env.NODE_ENV !== 'production' && warn(\n      \"Do not mount Vue to <html> or <body> - mount to normal elements instead.\"\n    );\n    return this\n  }\n\n  var options = this.$options;\n  // resolve template/el and convert to render function\n  if (!options.render) {\n    var template = options.template;\n    if (template) {\n      if (typeof template === 'string') {\n        if (template.charAt(0) === '#') {\n          template = idToTemplate(template);\n          /* istanbul ignore if */\n          if (process.env.NODE_ENV !== 'production' && !template) {\n            warn(\n              (\"Template element not found or is empty: \" + (options.template)),\n              this\n            );\n          }\n        }\n      } else if (template.nodeType) {\n        template = template.innerHTML;\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          warn('invalid template option:' + template, this);\n        }\n        return this\n      }\n    } else if (el) {\n      template = getOuterHTML(el);\n    }\n    if (template) {\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n        mark('compile');\n      }\n\n      var ref = compileToFunctions(template, {\n        shouldDecodeNewlines: shouldDecodeNewlines,\n        shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,\n        delimiters: options.delimiters,\n        comments: options.comments\n      }, this);\n      var render = ref.render;\n      var staticRenderFns = ref.staticRenderFns;\n      options.render = render;\n      options.staticRenderFns = staticRenderFns;\n\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n        mark('compile end');\n        measure((\"vue \" + (this._name) + \" compile\"), 'compile', 'compile end');\n      }\n    }\n  }\n  return mount.call(this, el, hydrating)\n};\n\n/**\n * Get outerHTML of elements, taking care\n * of SVG elements in IE as well.\n */\nfunction getOuterHTML (el) {\n  if (el.outerHTML) {\n    return el.outerHTML\n  } else {\n    var container = document.createElement('div');\n    container.appendChild(el.cloneNode(true));\n    return container.innerHTML\n  }\n}\n\nVue$3.compile = compileToFunctions;\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Vue$3);\n\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(4), __webpack_require__(5), __webpack_require__(10).setImmediate))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUMiLCJmaWxlIjoiNS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLGV2YWwpKFwidGhpc1wiKTtcclxufSBjYXRjaChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZih0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKVxyXG5cdFx0ZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qc1xuLy8gbW9kdWxlIGlkID0gNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src__ = __webpack_require__(16);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_old__ = __webpack_require__(24);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_vue_split_layout__ = __webpack_require__(29);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_vue_split_layout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_vue_split_layout__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  components: { Editable: __WEBPACK_IMPORTED_MODULE_0__src__[\"a\" /* default */], EditableOld: __WEBPACK_IMPORTED_MODULE_1__src_old__[\"a\" /* Editable */], Split: __WEBPACK_IMPORTED_MODULE_2_vue_split_layout__[\"Split\"] },\n  data: function data() {\n    var dataList = [];\n\n    for (var i = 0; i < 2; i++) {\n      dataList.push({ id: i * 4 + 1, name: 'Samsung', model: 'Note 4', active: true, password: '123', rdonly: true }, { id: i * 4 + 2, name: 'Samsung', model: 'Note 5', active: true, password: '123', rdonly: false }, { id: i * 4 + 3, name: 'Apple', model: 'iPhone 4', active: false, password: '123', rdonly: true }, { id: i * 4 + 4, name: 'Apple', model: 'iPhone X', active: true, password: '123', rdonly: true });\n    }\n    return {\n      editable: true,\n      headers: {\n        id: { header: 'Id', text: 'Id', readonly: true },\n        name: { header: 'Brands', text: 'Brands' },\n        model: { header: 'model', text: 'model' },\n        active: { header: 'active', text: 'active', type: 'checkbox' },\n        password: { header: 'Password', text: 'Password', type: 'password' },\n        rdonly: { header: 'Big ass header testing Readonly checkbox', text: 'Big ass header testing Readonly checkbox', type: 'checkbox', readonly: true }\n      },\n      dataList: dataList\n    };\n  },\n\n  methods: {\n    commit: function commit(c) {\n      var _this = this;\n\n      var _loop = function _loop(entry) {\n        switch (entry.op) {\n          case 'update':\n            _this.dataList.forEach(function (v, i) {\n              if (v.id === entry.data.id) {\n                _this.$set(_this.dataList, i, entry.data);\n              }\n            });\n            break;\n          case 'delete':\n            var id = _this.dataList.findIndex(function (d) {\n              return d.id === entry.data.id;\n            });\n            _this.dataList.splice(id, 1);\n            break;\n          case 'add':\n            _this.dataList.push(entry.data);\n            break;\n        }\n      };\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = c[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var entry = _step.value;\n\n          _loop(entry);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZGVtby9BcHAudnVlPzc1ZWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkE7QUFDQTtBQUNBOztBQUVBOzBKQUVBO3dCQUNBO21CQUVBOztnQ0FDQTtlQUNBLCtGQUNBLGtHQUNBLG9HQUNBLGtHQUVBO0FBQ0E7O2dCQUVBOztrREFFQTt3Q0FDQTt3Q0FDQTswREFDQTtnRUFDQTtvSkFFQTtBQVBBO2dCQVNBO0FBWEE7QUFZQTs7OztBQUVBOzs7c0JBRUE7ZUFDQTttREFDQTswQ0FDQTtvREFDQTtBQUNBO0FBQ0E7QUFDQTtlQUNBOzt5Q0FDQTs7c0NBQ0E7QUFDQTtlQUNBO3NDQUNBO0FBRUE7Ozs7Ozs7Ozs7QUFoQkE7OztBQWlCQTs7Ozs7Ozs7Ozs7Ozs7O0FBRUE7QUFyQkE7QUExQkEiLCJmaWxlIjoiNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cImFwcFwiPlxuICAgIDxkaXYgY2xhc3M9XCJjb250cm9sc1wiPlxuICAgICAgPGJ1dHRvbiBAY2xpY2s9XCJlZGl0YWJsZT0hZWRpdGFibGVcIj5lZGl0YWJsZSB7eyBlZGl0YWJsZSB9fTwvYnV0dG9uPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJ0YWJsZXNcIj5cbiAgICAgIDxTcGxpdCA6cmVzaXplYWJsZT1cInRydWVcIiBkaXI9XCJob3Jpem9udGFsXCI+XG4gICAgICAgIDxlZGl0YWJsZVxuICAgICAgICAgIDpoZWFkZXJzPVwiaGVhZGVyc1wiXG4gICAgICAgICAgOnJvd3M9XCJkYXRhTGlzdFwiXG4gICAgICAgICAgOmVkaXRhYmxlPVwiZWRpdGFibGVcIlxuICAgICAgICAgIEBjb21taXQ9XCJjb21taXRcIlxuICAgICAgICAvPlxuICAgICAgICA8ZGl2Lz5cbiAgICAgIDwvU3BsaXQ+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5pbXBvcnQgRWRpdGFibGUgZnJvbSAnLi4vc3JjJ1xuaW1wb3J0IHtFZGl0YWJsZSBhcyBFZGl0YWJsZU9sZH0gZnJvbSAnLi4vc3JjL29sZCdcbmltcG9ydCB7U3BsaXR9IGZyb20gJ3Z1ZS1zcGxpdC1sYXlvdXQnXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge0VkaXRhYmxlLCBFZGl0YWJsZU9sZCwgU3BsaXR9LFxuICBkYXRhICgpIHtcbiAgICB2YXIgZGF0YUxpc3QgPSBbXVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyOyBpKyspIHtcbiAgICAgIGRhdGFMaXN0LnB1c2goXG4gICAgICAgIHtpZDogaSAqIDQgKyAxLCBuYW1lOiAnU2Ftc3VuZycsIG1vZGVsOiAnTm90ZSA0JywgYWN0aXZlOiB0cnVlLCBwYXNzd29yZDogJzEyMycsIHJkb25seTogdHJ1ZX0sXG4gICAgICAgIHtpZDogaSAqIDQgKyAyLCBuYW1lOiAnU2Ftc3VuZycsIG1vZGVsOiAnTm90ZSA1JywgYWN0aXZlOiB0cnVlLCBwYXNzd29yZDogJzEyMycsIHJkb25seTogZmFsc2V9LFxuICAgICAgICB7aWQ6IGkgKiA0ICsgMywgbmFtZTogJ0FwcGxlJywgbW9kZWw6ICdpUGhvbmUgNCcsIGFjdGl2ZTogZmFsc2UsIHBhc3N3b3JkOiAnMTIzJywgcmRvbmx5OiB0cnVlfSxcbiAgICAgICAge2lkOiBpICogNCArIDQsIG5hbWU6ICdBcHBsZScsIG1vZGVsOiAnaVBob25lIFgnLCBhY3RpdmU6IHRydWUsIHBhc3N3b3JkOiAnMTIzJywgcmRvbmx5OiB0cnVlfVxuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgZWRpdGFibGU6IHRydWUsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIGlkOiB7aGVhZGVyOiAnSWQnLCB0ZXh0OiAnSWQnLCByZWFkb25seTogdHJ1ZX0sXG4gICAgICAgIG5hbWU6IHtoZWFkZXI6ICdCcmFuZHMnLCB0ZXh0OiAnQnJhbmRzJ30sXG4gICAgICAgIG1vZGVsOiB7aGVhZGVyOiAnbW9kZWwnLCB0ZXh0OiAnbW9kZWwnfSxcbiAgICAgICAgYWN0aXZlOiB7aGVhZGVyOiAnYWN0aXZlJywgdGV4dDogJ2FjdGl2ZScsIHR5cGU6ICdjaGVja2JveCd9LFxuICAgICAgICBwYXNzd29yZDoge2hlYWRlcjogJ1Bhc3N3b3JkJywgdGV4dDogJ1Bhc3N3b3JkJywgdHlwZTogJ3Bhc3N3b3JkJ30sXG4gICAgICAgIHJkb25seToge2hlYWRlcjogJ0JpZyBhc3MgaGVhZGVyIHRlc3RpbmcgUmVhZG9ubHkgY2hlY2tib3gnLCB0ZXh0OiAnQmlnIGFzcyBoZWFkZXIgdGVzdGluZyBSZWFkb25seSBjaGVja2JveCcsIHR5cGU6ICdjaGVja2JveCcsIHJlYWRvbmx5OiB0cnVlfVxuICAgICAgfSxcbiAgICAgIGRhdGFMaXN0OiBkYXRhTGlzdFxuICAgIH1cbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGNvbW1pdCAoYykge1xuICAgICAgZm9yIChsZXQgZW50cnkgb2YgYykge1xuICAgICAgICBzd2l0Y2ggKGVudHJ5Lm9wKSB7XG4gICAgICAgICAgY2FzZSAndXBkYXRlJzpcbiAgICAgICAgICAgIHRoaXMuZGF0YUxpc3QuZm9yRWFjaCgodiwgaSkgPT4ge1xuICAgICAgICAgICAgICBpZiAodi5pZCA9PT0gZW50cnkuZGF0YS5pZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuJHNldCh0aGlzLmRhdGFMaXN0LCBpLCBlbnRyeS5kYXRhKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICBjYXNlICdkZWxldGUnOlxuICAgICAgICAgICAgbGV0IGlkID0gdGhpcy5kYXRhTGlzdC5maW5kSW5kZXgoZCA9PiBkLmlkID09PSBlbnRyeS5kYXRhLmlkKVxuICAgICAgICAgICAgdGhpcy5kYXRhTGlzdC5zcGxpY2UoaWQsIDEpXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIGNhc2UgJ2FkZCc6XG4gICAgICAgICAgICB0aGlzLmRhdGFMaXN0LnB1c2goZW50cnkuZGF0YSlcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbjwvc2NyaXB0PlxuPHN0eWxlPlxuYm9keSB7XG4gIG1hcmdpbjowO1xuICBwYWRkaW5nOjA7XG4gIGhlaWdodDoxMDB2aDtcbn1cbi5hcHAge1xuICBkaXNwbGF5OmZsZXg7XG4gIGZsZXgtZmxvdzpjb2x1bW47XG4gIGJhY2tncm91bmQ6ICNmOWY5Zjk7XG4gIGhlaWdodDoxMDAlO1xufVxuLnRhYmxlcyB7XG4gIGZsZXg6MTtcbiAgbWluLWhlaWdodDo0MDBweDtcbiAgZGlzcGxheTpmbGV4O1xuICBmbGV4LWZsb3c6Y29sdW1uO1xufVxuPC9zdHlsZT5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBkZW1vL0FwcC52dWU/OGRhYzkzMTQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__dataList__ = __webpack_require__(22);\n\n\nvar arrow = {\n  // MS Edge stupidity\n  'Up': [0, -1],\n  'Down': [0, 1],\n  'Right': [1, 0],\n  'Left': [-1, 0],\n\n  'ArrowUp': [0, -1],\n  'ArrowDown': [0, 1],\n  'ArrowRight': [1, 0],\n  'ArrowLeft': [-1, 0]\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  mixins: [__WEBPACK_IMPORTED_MODULE_0__dataList__[\"a\" /* default */]], // Extends?\n  props: {\n    'editable': { type: Boolean, default: true }\n  },\n  data: function data() {\n    return {\n      state: {\n        scroll: { top: 0, left: 0 },\n        cursor: {\n          rowi: 0,\n          coli: 0,\n          editing: false,\n          value: ''\n        }\n      }\n    };\n  },\n  mounted: function mounted() {\n    this.cursorSet();\n  },\n\n  methods: {\n    // Should be computed but somehow is not refreshing properly\n    editorStyle: function editorStyle() {\n      var _state$cursor = this.state.cursor,\n          coli = _state$cursor.coli,\n          rowi = _state$cursor.rowi;\n\n      if (!this.state.cursor.editing) {\n        return { display: 'none' };\n      }\n      if (this.$el === undefined || rowi === undefined || coli === undefined) {\n        return { display: 'none' };\n      }\n      // TODO: verify coli,rowi\n      var relRect = this.$refs.table.getBoundingClientRect();\n      var rect = this.$refs.tbody.rows[rowi].cells[coli + 1].getBoundingClientRect();\n      return {\n        display: 'block',\n        left: rect.left - relRect.left + this.$refs.table.scrollLeft + 'px',\n        top: rect.top - relRect.top + this.$refs.table.scrollTop + 'px',\n        width: rect.width + 'px',\n        height: rect.height + 'px'\n      };\n    },\n    keyEvent: function keyEvent(e) {\n      var _this = this;\n\n      if (this.editable === false) {\n        return;\n      }\n      switch (e.key) {\n        case 'Tab':\n          e.preventDefault();\n          this.$refs.input.blur();\n          var dir = 1;\n          if (e.shiftKey) dir = -1;\n          this.$nextTick(function () {\n            _this.cursorMove(dir, 0, true);\n          });\n          return;\n        // Both\n        case 'Escape':\n          if (this.state.cursor.editing) {\n            this.editStop(false);\n          } else {\n            this.setCursor(); // disable cursor\n          }\n          break;\n        case 'Enter':\n          if (this.state.cursor.editing) {\n            this.$refs.input.blur(); // Stop editing somehow\n            this.$nextTick(function () {\n              _this.cursorEnterNext();\n            });\n          } else {\n            if (!this.editStart()) {\n              this.cursorMove(1, 0, true);\n            }\n          }\n          break;\n        case 'Backspace' || 'Delete':\n          if (this.state.cursor.editing) {\n            return;\n          }\n          this.rowChange(this.state.cursor.rowi, this.state.cursor.field, '');\n          // this.state.rows[this.state.cursor.rowi].data[this.state.cursor.field] = ''\n          break;\n        default:\n          var arrowDir = arrow[e.key];\n          if (arrowDir !== undefined) {\n            if (this.state.cursor.editing) {\n              // do nothing\n              return;\n            }\n            e.preventDefault();\n            // move selection and blur whatever is focused\n            // check if we can select further\n            this.cursorMove(arrowDir[0], arrowDir[1], true);\n            return;\n          }\n          // Single key as a char\n          if (e.key.length === 1) {\n            if (this.state.cursor.editing) {\n              return;\n            }\n            e.preventDefault();\n            this.editStart();\n            this.$nextTick(function () {\n              _this.state.cursor.value = e.key;\n            });\n            // Start edit clear and add this key as a value?\n            // this.state.rows[this.state.cursor.rowi].data[this.state.cursor.field] = e.key\n          }\n      }\n    },\n    scrollEvent: function scrollEvent(e) {\n      this.state.scroll.top = e.currentTarget.scrollTop;\n      this.state.scroll.left = e.currentTarget.scrollLeft;\n    },\n    editStart: function editStart() {\n      var _this2 = this;\n\n      if (this.editable === false) {\n        return false;\n      }\n      var _state$cursor2 = this.state.cursor,\n          rowi = _state$cursor2.rowi,\n          field = _state$cursor2.field;\n\n      if (this.state.headers[field].readonly) {\n        return false;\n      }\n      this.state.cursor.editing = true;\n\n      //\n      this.state.cursor.value = this.state.rows[rowi].data[field];\n      this.$nextTick(function () {\n        // Reposition the thing here computed would be better?\n        var lstyle = _this2.editorStyle();\n        for (var k in lstyle) {\n          _this2.$refs.editor.style[k] = lstyle[k];\n        }\n\n        _this2.$refs.input.focus();\n      });\n      return true;\n    },\n    editStop: function editStop(val) {\n      var _this3 = this;\n\n      // or Blur\n      if (this.state.cursor.editing === false || this.editable === false) {\n        return;\n      }\n      this.state.cursor.editing = false;\n\n      this.$nextTick(function () {\n        Object.assign(_this3.$refs.editor.style, _this3.editorStyle());\n        // commit changes\n        var _state$cursor3 = _this3.state.cursor,\n            rowi = _state$cursor3.rowi,\n            field = _state$cursor3.field;\n\n        if (val !== false) _this3.rowChange(rowi, field, _this3.state.cursor.value);\n        _this3.$refs.table.focus(); // Back to parent focus\n      });\n    },\n\n    // cellEvents\n    cellClick: function cellClick(e, rowi, coli) {\n      if (this.editable === false) {\n        return;\n      }\n      if (this.state.cursor.editing) {\n        return;\n      }\n      this.cursorSet(coli, rowi);\n      // but if cursor is same, we start edit on double click?\n    },\n    cellChange: function cellChange(rowi, field, value) {\n      if (this.editable === false) {\n        return;\n      }\n\n      this.rowChange(rowi, field, value);\n      this.$refs.table.focus();\n    },\n    cellDblClick: function cellDblClick(e, rowi, coli) {\n      if (this.editable === false) {\n        return;\n      }\n\n      if (this.state.cursor.editing) {\n        e.preventDefault();\n        return;\n      }\n      this.cursorSet(coli, rowi);\n\n      this.editStart();\n      // Start edit the cell\n    },\n    rowAddEvent: function rowAddEvent(e) {\n      var _this4 = this;\n\n      if (this.editable === false) {\n        return;\n      }\n\n      this.rowAdd();\n      this.$nextTick(function () {\n        console.log('this.state.rows.length', _this4.state.rows, _this4.state.rows.length);\n        var coli = 0;\n        for (var k in _this4.state.headers) {\n          if (!_this4.state.headers[k].readonly) {\n            break;\n          }\n          coli++;\n        }\n        _this4.cursorSet(coli, _this4.state.rows.length - 1);\n        _this4.editStart();\n      });\n    },\n\n    // This could be in history\n    // Possible improve this into dataList.js\n    rowClick: function rowClick(e, rowi) {\n      if (this.editable === false) {\n        return;\n      }\n\n      e.preventDefault();\n      e.stopPropagation();\n\n      if (e.shiftKey && this.state.selection.lasti !== null) {\n        this.rowDeselectAll();\n        // selectRange\n        var start = rowi;\n        var end = this.state.selection.lasti;\n        this.rowSelectRange(start, end);\n        this.$forceUpdate();\n        return;\n      }\n      // Deselect if found is selected\n      var found = this.state.selection.rows.indexOf(this.state.rows[rowi]);\n      if (found !== -1 && (e.ctrlKey || this.state.selection.rows.length === 1)) {\n        // deselect one\n        this.rowSelect(found, false);\n        return;\n      }\n      if (!e.ctrlKey) {\n        this.rowDeselectAll();\n      }\n      this.rowSelect(rowi, true);\n\n      // Why not reactive\n      this.$forceUpdate();\n    },\n\n    // Set the cell/multicell cursor or disable cursor if no arguments\n    cursorSet: function cursorSet(coli, rowi) {\n      if (this.editable === false) {\n        return;\n      }\n\n      // Same as before\n      if (coli === this.state.cursor.coli && rowi === this.state.cursor.rowi) {\n        return false;\n      }\n      this.state.cursor.rowi = rowi;\n      this.state.cursor.coli = coli;\n      if (rowi === undefined && coli === undefined) {\n        return false;\n      }\n\n      console.log('rowi', rowi, this.$refs.tbody.rows.length);\n\n      var cellEl = this.$refs.tbody.rows[rowi].cells[coli + 1];\n      this.state.cursor.field = cellEl.getAttribute('data-field');\n\n      // cellEl.setAttribute('contenteditable', true)\n      // cellEl.focus()\n      // cellEl.removeAttribute('contenteditable')\n      // this.$refs.table.focus()\n\n      // Auto scroller\n      var cellRect = cellEl.getBoundingClientRect();\n      var pRect = this.$refs.table.getBoundingClientRect();\n      // relaative to the scroller\n      //\n      var relRect = {\n        top: cellRect.top - pRect.top,\n        left: cellRect.left - pRect.left\n        // Scrolling operation\n      };if (relRect.top > pRect.height - cellRect.height * 2) {\n        // Remove excess?\n        var top = pRect.height - cellRect.height * 2 - relRect.top;\n        this.$refs.table.scrollTop -= top;\n      }\n      if (relRect.top < cellRect.height * 2) {\n        this.$refs.table.scrollTop += relRect.top - cellRect.height * 2;\n      }\n      if (relRect.left > pRect.width - cellRect.width) {\n        var left = pRect.width - cellRect.width - relRect.left;\n        this.$refs.table.scrollLeft -= left;\n      }\n      if (relRect.left < cellRect.width) {\n        this.$refs.table.scrollLeft += relRect.left - cellRect.width;\n      }\n      return true;\n    },\n    cursorMove: function cursorMove(colm, rowm, circle) {\n      if (this.editable === false) {\n        return;\n      }\n\n      // if we have focus, we blur\n      var newColi = this.state.cursor.coli + colm;\n      var newRowi = this.state.cursor.rowi + rowm;\n\n      if (circle) {\n        var tEl = this.$refs.tbody;\n        // Round about\n        if (newColi >= tEl.rows[0].cells.length - 1) {\n          newRowi++;\n          newColi = 0;\n        } else if (newColi < 0) {\n          newColi = tEl.rows[0].cells.length - 1;\n          newRowi--;\n        }\n        // vertical round\n        if (newRowi >= tEl.rows.length) {\n          newRowi = 0;\n        } else if (newRowi < 0) {\n          newRowi = tEl.rows.length - 1;\n        }\n      }\n      newColi = limit(newColi, 0, this.$refs.tbody.rows[0].cells.length - 2);\n      newRowi = limit(newRowi, 0, this.state.rows.length - 1);\n      return this.cursorSet(newColi, newRowi);\n      // Cell Blur and focus\n    },\n    cursorEnterNext: function cursorEnterNext() {\n      if (!this.cursorMove(0, 1)) {\n        return this.cursorMove(1, 0);\n      }\n      return true;\n    }\n  }\n});\n\nfunction limit(val, min, max) {\n  return Math.min(Math.max(val, min), max);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n/**\n * A node in the DOM tree.\n *\n * @external DOMElement\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Element DOMElement}\n *\n * @external DOMEvent\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Event DOMEvent}\n */\n\n// import ContextMenu from '../contextmenu/contextmenu.vue'\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  props: {\n    columns: Object,\n    dataList: Array,\n    editable: { type: Boolean, default: true },\n    debug: { type: Boolean, default: false }\n  },\n  data: function data() {\n    return {\n      rows: this.getRows(this.dataList),\n      cols: Object.keys(this.columns),\n      // data: JSON.parse(JSON.stringify(this.propdata)),\n      //\n      //\n      cursor: null, // cel At Cursor\n      newRow: {},\n      // changeSet: [],\n      historySet: [], // New Testing\n      selectedRows: [],\n      editMode: false,\n      currentValue: '',\n      hoverValue: ''\n    };\n  },\n\n  watch: {\n    dataList: function dataList(val, oldVal) {\n      this.rows = this.getRows(val);\n      // Reset changes?\n      // this.changeSet = {update: [], delete: []} // reset changeset on new list\n      // this.changeSet = [] // reset changeset on new list\n      this.historySet = [];\n    }\n  },\n  mounted: function mounted() {\n    // Cache elements?\n    // this.selElement = this.$el.querySelector('#selection')\n    var relEl = this.$refs.selection;\n    while (true) {\n      // Find relative parent\n      if (relEl == null) {\n        break;\n      }\n      var s = window.getComputedStyle(relEl, null);\n      if (s['position'] === 'relative') {\n        break; // found\n      }\n      relEl = relEl.parentElement;\n    }\n    if (relEl == null) {\n      relEl = document.body;\n    }\n    this.selRelParent = relEl;\n\n    // console.log(\"El is:\", this.$el)\n    // this.$refs.tabletableElement = this.$el.querySelector('table')\n    // console.log('Component started')\n    document.addEventListener('keydown', this.keyEvent);\n    window.addEventListener('resize', this.resizeEvent);\n    this.resizeEvent();\n  },\n  destroyed: function destroyed() {\n    // console.log('component destroyed')\n    document.removeEventListener('keydown', this.keyEvent);\n    window.removeEventListener('resize', this.resizeEvent);\n  },\n\n  methods: {\n    /* dragStart (e) {\n      e.preventDefault()\n      var el = e.currentTarget\n      this.cursor = el\n    },\n    dragOver (e) {\n      // e.currentTarget.classList.add('selected')\n      console.log('Draging over:', e.currentTarget)\n      var el = e.currentTarget\n      var x = el.cellIndex\n      var y = el.parentElement.rowIndex\n       this.setCursor(\n        this.selecting.start.x,\n        this.selecting.start.y,\n        x, y)\n    }, /**/\n    // Iterate rows and fetch a thingy Transform data into editable rows\n\n    getRows: function getRows(data) {\n      return data.map(function (e) {\n        return { data: e };\n      });\n    },\n\n\n    /**\n     * Handle html window resize event\n     * @param {DOMEvent} e\n     */\n    resizeEvent: function resizeEvent(e) {\n      var _this = this;\n\n      setTimeout(function () {\n        document.activeElement.blur();\n        var theadEl = _this.$refs.table.querySelector('thead'); // should be in this div\n        theadEl.style['padding-right'] = getScrollbarWidth() - 1 + 'px';\n        // console.log('Resize thead', getScrollbarWidth(), theadEl.style)\n      }); // nextTick\n    },\n\n\n    /**\n     * Handle global key event\n     * @param {DOMEvent}\n     */\n    keyEvent: function keyEvent(e) {\n      var _this2 = this;\n\n      if (this.editable !== true) {\n        // ignore if not editable\n        return;\n      }\n      // console.log('Key event', e.which)\n      var el = document.activeElement;\n      if (el === document.body && !el.classList.contains('edit') /* !el.matches('.edit') */) {\n          // Something is focused but its not our edit\n          return;\n        }\n      // var el = e.currentTarget\n      if (this.editMode === true) {\n        if (e.which === 27) {\n          // ESC blur element\n          this.editMode = false;\n          e.preventDefault();\n          el.readOnly = true;\n        }\n        // ENTER key submit change and move to next cell\n        if (e.which === 13) {\n          var ptd = el.parentElement; // upQuerySelector(el, 'td') // using parentElement breaks support for complex inputs\n          /* eslint-disable no-undef */\n          el.dispatchEvent(new Event('change'));\n          el.readOnly = true;\n          this.editMode = false;\n          var nextCell = this.cellNext(el);\n          if (nextCell === null) {\n            this.rowAdd(); // Special case\n            setTimeout(function () {\n              // Next tick\n              var newCell = _this2.cellAt(1, ptd.parentElement.rowIndex);\n              newCell.focus();\n            });\n            return;\n          }\n          nextCell.focus();\n        }\n        return;\n      }\n      /*********************\n       * Not Editing\n       *************/\n\n      // Trick enable editing if key is a single char , works on chrome not sure others\n      // ANY CHAR KEY\n      if (el !== undefined) {\n        if (e.key.length === 1) {\n          this.cellEdit(el);\n          return;\n        }\n        // ENTER KEY - Start editing on focused cell\n        if (e.which === 13) {\n          if (this.cellEdit(el) !== true) {\n            var _nextCell = this.cellNext(el);\n            if (_nextCell === undefined) return;\n            _nextCell.focus();\n          }\n          return;\n        }\n        // Handle direction keys\n        var arrow = { 38: [0, -1], 40: [0, 1], 39: [1, 0], 37: [-1, 0] };\n        var v = void 0;\n        if ((v = arrow[e.which]) !== undefined) {\n          var nel = this.cellRelAt.apply(this, [el].concat(_toConsumableArray(v)));\n          if (nel === null) {\n            return;\n          }\n          nel.focus();\n          e.preventDefault();\n          return;\n        }\n      }\n      // DELETE KEY - deletes selected rows\n      if (e.which === 46) {\n        // delete key\n        e.preventDefault();\n        if (this.selectedRows.length === 0) return;\n        this.rowDelete(this.selectedRows);\n      }\n    },\n\n\n    /**\n     * Start editing a cell or ignore if cell is not editable\n     * @param {DOMElement} el\n     * @returns {Boolean} - true if edit allowed, false ignore\n     */\n    cellEdit: function cellEdit(el) {\n      var pTd = el.parentElement; // upQuerySelector(el, 'td') // using parentElement breaks support for complex inputs\n      if (pTd == null) {\n        return;\n      }\n      var cols = Object.keys(this.columns);\n      var col = this.columns[cols[pTd.cellIndex - 1]]; // exclude header\n      if (col.editable === false || this.editable !== true) {\n        return false; // No edit\n      }\n      this.editMode = true;\n      var editEl = pTd.querySelector('.edit');\n      editEl.readOnly = false;\n\n      // editEl.select() // Select all and pass key over?\n      return true;\n    },\n\n\n    /**\n     * Helper to find next cell (after enter key for example)\n     * @param {DOMElement} el - starting element\n     * @returns {DOMElement} - next cell\n     */\n    cellNext: function cellNext(el) {\n      var nextCell = void 0;\n      if ((nextCell = this.cellRelAt(el, 0, 1)) === null) {\n        if ((nextCell = this.cellRelAt(el, 1, 0)) === null) {\n          /* this.rowAdd() // Special case\n          setTimeout(() => { // Next tick\n            var newCell = this.cellAt(1, ptd.parentElement.rowIndex)\n            newCell.focus()\n          })\n          return */\n        }\n      }\n      return nextCell;\n    },\n\n\n    /**\n     * Retrieve .edit element of a cell at specific position\n     * @param {Number} colIndex - column index\n     * @param {rowIndex} rowIndex - row Index\n     * @returns {DOMElement} - the cell input DOMElement\n     */\n    cellAt: function cellAt(colIndex, rowIndex) {\n      if (this.$refs.table.rows[rowIndex] === undefined) {\n        return null;\n      }\n      var targetCell = this.$refs.table.rows[rowIndex].cells[colIndex];\n      if (targetCell === undefined) {\n        return null;\n      }\n      return targetCell.querySelector('.edit');\n    },\n\n\n    /**\n     * Relative .edit element from cell at position of el\n     * @param {DOMElement} el\n     * @param {Number} x - Relative horizontal: X -1 goes left, 1 goes right\n     * @param {Number} y - Number relative vertical: -1 goes up, 1 goes down\n     * @returns {DOMElement} - returns the input cell\n     */\n    cellRelAt: function cellRelAt(el, x, y) {\n      var pTd = el.parentElement; // upQuerySelector(el, 'td') // using parentElement breaks support for complex inputs\n      if (pTd === null) {\n        return;\n      }\n      var curCI = pTd.cellIndex + x;\n      var curRI = pTd.parentElement.rowIndex + y;\n\n      return this.cellAt(curCI, curRI);\n    },\n\n\n    /**\n     * Sets the value of underlying input\n     * @param {DOMEvent} e - event\n     */\n    cellHoverEvent: function cellHoverEvent(e) {\n      // var el = e.currentTarget\n      /* Drag case\n      if (this.cursor !== null && e.buttons === 1) {\n        // select area\n        this.setCursor(\n          this.cursor.cellIndex,\n          this.cursor.parentElement.rowIndex,\n          el.cellIndex,\n          el.parentElement.rowIndex)\n      }\n      */\n\n      // const editor = el.querySelector('.edit')\n      // if (editor === undefined) return\n\n      // this.hoverValue = editor.value\n    },\n\n\n    /**\n     * On mouse down it will focus on target Element and if click\n     * again it will start editing\n     * @param {DOMEvent} e - event\n     **/\n    cellDownEvent: function cellDownEvent(e) {\n      // downEvent // or up?\n      var el = e.currentTarget;\n      this.cursor = el;\n\n      var editor = el.querySelector('.edit');\n      if (editor === document.activeElement) {\n        if (this.editMode === true) {\n          return;\n        }\n        this.cellEdit(editor); // Start editing\n      }\n      // cellDown already focus event\n      // editor.focus() // in case the mousedown was on TD\n    },\n\n\n    /**\n     * cell Change Event\n     * @param {DOMEvent} evt - default dom event\n     * @param {Number} ri - Row index\n     * @param {Column} k - Column name which changed\n     */\n    // called after cell edit\n    cellChangeEvent: function cellChangeEvent(evt, ri, k) {\n      if (this.rows[ri].data[k] === evt.currentTarget.value) {\n        return;\n      }\n      // Deep clone\n      var oldRow = JSON.parse(JSON.stringify(this.rows[ri]));\n\n      if (this.columns[k].type === 'checkbox') {\n        // Special case\n        this.rows[ri].data[k] = evt.currentTarget.checked;\n      } else {\n        this.rows[ri].data[k] = evt.currentTarget.value;\n      }\n      // Update data here\n\n      // Mark modifiedj\n      this.rows[ri].modified = true;\n\n      this.historySet.push({ op: 'update', row: this.rows[ri], index: ri, oldRow: oldRow });\n      // XXX: Auto commit here\n    },\n\n\n    /**\n     * Same as cellChange but for the extra new row\n     * XXX: Should be changed to cellNewChangeEvent\n     * @param {DOMEvent} e - default dom event\n     * @param {Object} k - row data object\n     */\n    cellNewChange: function cellNewChange(e, k) {\n      if (this.columns[k].type === 'checkbox') {\n        // Special case\n        this.newRow[k] = e.currentTarget.checked;\n      } else {\n        this.newRow[k] = e.currentTarget.value;\n      }\n    },\n\n\n    /**\n     * Handle cellBlur event, deselect cell and disable editMode\n     * @param {DOMEvent} e - default dom event\n     */\n    cellBlurEvent: function cellBlurEvent(e) {\n      // console.log('BLUR setting readonly', e.currentTarget)\n      var el = e.currentTarget;\n      el.parentElement.classList.remove('active');\n      e.currentTarget.readOnly = true;\n      this.editMode = false;\n      this.setCursor(); // Disable cursor\n    },\n\n\n    /**\n     * Handle cellFocus event, select text internally\n     * @param {DOMEvent} e - default dom event\n     */\n    cellFocusEvent: function cellFocusEvent(e) {\n      if (this.editable !== true) {\n        e.preventDefault();\n        e.stopPropagation();\n        return false;\n      }\n\n      var el = e.currentTarget;\n      this.currentValue = el.value;\n      el.parentElement.classList.add('active');\n      // el.setSelectionRange(0, 0)\n\n      if (this.editMode) {\n        // not needed anymore?\n        el.readOnly = false;\n      }\n      el.select();\n\n      // Test\n      var pTd = el;\n      while (pTd !== null && pTd.tagName !== 'TD') {\n        pTd = pTd.parentElement;\n      }\n\n      this.setCursor(pTd.cellIndex, pTd.parentElement.rowIndex);\n    },\n\n\n    /**\n     * Deselect all selected cells\n     */\n    deselectAll: function deselectAll() {\n      var elList = this.$el.querySelectorAll('td.selected');\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = elList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var e = _step.value;\n          e.classList.remove('selected');\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this.selectedRows = [];\n    },\n\n\n    /**\n     * Row click event\n     * @param {DOMEvent} e - default dom event\n     */\n    rowClickEvent: function rowClickEvent(e) {\n      var ri = e.currentTarget.rowIndex - 1;\n\n      this.$emit('rowClick', this.rows[ri].data);\n      // pass event trough\n    },\n\n\n    /**\n     * handle rowAdd event (the plus button bottom left)\n     * @param {DOMEvent} e - default dom event\n     */\n    rowAdd: function rowAdd() {\n      // from newRow object\n      // Add to row\n      var newRow = {};\n      for (var k in this.columns) {\n        if (this.newRow[k] === undefined || this.newRow[k] === '') {\n          newRow[k] = this.columns[k].default;\n          continue;\n        }\n        newRow[k] = this.newRow[k];\n      }\n      this.rows.push({ data: newRow, modified: true });\n      var ri = this.rows.length - 1;\n\n      // this.changeSet.push({op: 'add', row: this.rows[ri].data})\n      this.historySet.push({ op: 'add', row: this.rows[ri], index: ri });\n\n      this.newRow = {};\n    },\n\n\n    /**\n     * handle rowheader click\n     * XXX: rowHeaderClick??\n     * @param {DOMEvent} e - default dom event\n     */\n    rowSelect: function rowSelect(e) {\n      // this.showMenu = true; deprecated\n      // check if row is selected and toggle\n      var el = e.currentTarget;\n      var elList = el.parentElement.querySelectorAll('td');\n      var ri = el.parentElement.rowIndex - 1;\n\n      // Deselect if found\n      var found = this.selectedRows.indexOf(this.rows[ri]);\n      if (found !== -1 && (e.ctrlKey || this.selectedRows.length === 1)) {\n        // deselect one\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = elList[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var _e = _step2.value;\n            _e.classList.remove('selected');\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n\n        this.selectedRows.splice(found, 1);\n        return;\n      }\n      if (!e.ctrlKey) {\n        this.deselectAll();\n      }\n\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = elList[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var _e2 = _step3.value;\n          _e2.classList.add('selected');\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      this.selectedRows.push(this.rows[ri]);\n      // Add row to selectionList\n    },\n\n    /**\n     * delete list of rows\n     * @param {Array} rowList - list of rows\n     */\n    rowDelete: function rowDelete(rowList) {\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = this.selectedRows[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var item = _step4.value;\n\n          /*\n          let found\n          // Find existent operation\n          if ((found = this.changeSet.find(e => e.row === item.data))) {\n            // Change op to delete\n            found.op = 'delete'\n          } else {\n            // Not found we push\n            this.changeSet.push({op: 'delete', row: item.data})\n          }\n          */\n\n          // delete from rows\n          var vindex = this.rows.indexOf(item);\n          if (vindex === -1) continue;\n          this.historySet.push({ op: 'delete', row: item, index: vindex, oldRow: JSON.parse(JSON.stringify(item)) });\n          this.rows.splice(vindex, 1);\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n\n      this.deselectAll();\n      // XXX: If auto commit, commit changes here\n      if (this.autocommit === true) {\n        this.commitChanges();\n      }\n    },\n\n    /**\n     * Multi cell selector\n     *\n     * if No param it will remove cursor\n     * @param {Number} c1 - starting column\n     * @param {Number} r1 - starting row\n     * @param {Number} c2 - last column\n     * @param {Number} r2 - last row\n     */\n    // Set the cell/multicell cursor or disable cursor if no arguments\n    setCursor: function setCursor(c1, r1, c2, r2) {\n      if (c1 === undefined) {\n        this.$refs.selection.classList.remove('active');\n        return;\n      }\n      if (c2 < c1) {\n        ;\n        var _ref = [c2, c1];\n        c1 = _ref[0];\n        c2 = _ref[1];\n      }if (r2 < r1) {\n        ;\n        var _ref2 = [r2, r1];\n        r1 = _ref2[0];\n        r2 = _ref2[1];\n      } // Find relative parent from selection\n      var relEl = this.selRelParent;\n      // console.log('Setting selection to:', r1, c1)\n      // Get position of those cells\n      // var tbodyEl = this.tableElement.querySelector('tbody')\n      var relRect = relEl.getBoundingClientRect();\n      // First cell\n      var cellEl = this.$refs.table.rows[r1].cells[c1];\n      var rect = cellEl.getBoundingClientRect();\n\n      this.$refs.selection.classList.add('active');\n      this.$refs.selection.style.left = rect.left - relRect.left + relEl.scrollLeft + 'px';\n      this.$refs.selection.style.top = rect.top - relRect.top + relEl.scrollTop + 'px';\n\n      var width = rect.width;\n      var height = rect.height;\n      if (c2 !== undefined && r2 !== undefined) {\n        // Square selection\n        // Sum widths\n        for (var i = c1 + 1; i <= c2; i++) {\n          width += this.tableElement.rows[r1].cells[i].getBoundingClientRect().width;\n        }\n        for (var _i = r1 + 1; _i <= r2; _i++) {\n          height += this.tableElement.rows[_i].cells[c1].getBoundingClientRect().height + 1; // border compensation\n        }\n      }\n      // Width & Height\n      this.$refs.selection.style.width = width + 'px';\n      this.$refs.selection.style.height = height + 'px';\n    },\n\n\n    /**\n     * Experimental undo\n     */\n    undoLast: function undoLast() {\n      var change = this.historySet.pop();\n      var vindex;\n      switch (change.op) {\n        case 'add':\n          vindex = this.rows.indexOf(change.row);\n          this.rows.splice(vindex, 1); // delete row\n          break;\n        case 'update':\n          // vindex = this.rows.indexOf(change.row)\n          this.rows[change.index] = change.oldRow;\n          break;\n        case 'delete':\n          this.rows.splice(change.index, 0, change.row);\n          break;\n      }\n    },\n\n    /**\n     * Will send event to parent element\n     */\n    commitChanges: function commitChanges() {\n      // build changeSet from history\n      var changeControl = new Map();\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n\n      try {\n        for (var _iterator5 = this.historySet[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var histItem = _step5.value;\n\n          changeControl.set(histItem.row, histItem.op);\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5.return) {\n            _iterator5.return();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n\n      var changeSet = [];\n\n      var _iteratorNormalCompletion6 = true;\n      var _didIteratorError6 = false;\n      var _iteratorError6 = undefined;\n\n      try {\n        for (var _iterator6 = changeControl[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n          var _ref3 = _step6.value;\n\n          var _ref4 = _slicedToArray(_ref3, 2),\n              row = _ref4[0],\n              op = _ref4[1];\n\n          changeSet.push({ op: op, data: row.data });\n        }\n      } catch (err) {\n        _didIteratorError6 = true;\n        _iteratorError6 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion6 && _iterator6.return) {\n            _iterator6.return();\n          }\n        } finally {\n          if (_didIteratorError6) {\n            throw _iteratorError6;\n          }\n        }\n      }\n\n      console.log('final:', changeSet);\n      this.$emit('commit', changeSet);\n    }\n  }\n\n  // Helper function to get scrollbar Width\n});function getScrollbarWidth() {\n  var outer = document.createElement('div');\n  outer.style.visibility = 'hidden';\n  outer.style.width = '100px';\n  outer.style.msOverflowStyle = 'scrollbar'; // needed for WinJS apps\n\n  document.body.appendChild(outer);\n\n  var widthNoScroll = outer.offsetWidth;\n  // force scrollbars\n  outer.style.overflow = 'scroll';\n\n  // add innerdiv\n  var inner = document.createElement('div');\n  inner.style.width = '100%';\n  outer.appendChild(inner);\n\n  var widthWithScroll = inner.offsetWidth;\n\n  // remove divs\n  outer.parentNode.removeChild(outer);\n\n  return widthNoScroll - widthWithScroll;\n}\n// Search up to 10\n/* function upQuerySelector (el, selector) {\n  var pel = el\n  var max = 50\n  while (max > 0 && pel !== null && !pel.matches(selector)) {\n    pel = pel.parentElement\n    max-- // Safe trigger\n  }\n  return pel\n} */\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__App_vue__ = __webpack_require__(12);\n\n\n\n/* eslint-disable no-new */\nnew __WEBPACK_IMPORTED_MODULE_0_vue__[\"default\"]({\n  el: '#app',\n  render: function render(h) {\n    return h(__WEBPACK_IMPORTED_MODULE_1__App_vue__[\"a\" /* default */]);\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kZW1vL21haW4uanM/ODk3OCJdLCJuYW1lcyI6WyJlbCIsInJlbmRlciIsImgiXSwibWFwcGluZ3MiOiI7OztBQUFBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJLDRDQUFKLENBQVE7QUFDTkEsTUFBSSxNQURFO0FBRU5DLFVBQVE7QUFBQSxXQUFLQyxFQUFFLHlEQUFGLENBQUw7QUFBQTtBQUZGLENBQVIiLCJmaWxlIjoiOS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWdWUgZnJvbSAndnVlJ1xuaW1wb3J0IEFwcCBmcm9tICcuL0FwcC52dWUnXG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLW5ldyAqL1xubmV3IFZ1ZSh7XG4gIGVsOiAnI2FwcCcsXG4gIHJlbmRlcjogaCA9PiBoKEFwcClcbn0pXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9kZW1vL21haW4uanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

eval("var apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(11);\nexports.setImmediate = setImmediate;\nexports.clearImmediate = clearImmediate;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcz9kN2FkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG5cbi8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzXG5cbmV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCB3aW5kb3csIGFyZ3VtZW50cyksIGNsZWFyVGltZW91dCk7XG59O1xuZXhwb3J0cy5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRJbnRlcnZhbCwgd2luZG93LCBhcmd1bWVudHMpLCBjbGVhckludGVydmFsKTtcbn07XG5leHBvcnRzLmNsZWFyVGltZW91dCA9XG5leHBvcnRzLmNsZWFySW50ZXJ2YWwgPSBmdW5jdGlvbih0aW1lb3V0KSB7XG4gIGlmICh0aW1lb3V0KSB7XG4gICAgdGltZW91dC5jbG9zZSgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBUaW1lb3V0KGlkLCBjbGVhckZuKSB7XG4gIHRoaXMuX2lkID0gaWQ7XG4gIHRoaXMuX2NsZWFyRm4gPSBjbGVhckZuO1xufVxuVGltZW91dC5wcm90b3R5cGUudW5yZWYgPSBUaW1lb3V0LnByb3RvdHlwZS5yZWYgPSBmdW5jdGlvbigpIHt9O1xuVGltZW91dC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fY2xlYXJGbi5jYWxsKHdpbmRvdywgdGhpcy5faWQpO1xufTtcblxuLy8gRG9lcyBub3Qgc3RhcnQgdGhlIHRpbWUsIGp1c3Qgc2V0cyB1cCB0aGUgbWVtYmVycyBuZWVkZWQuXG5leHBvcnRzLmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0sIG1zZWNzKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSBtc2Vjcztcbn07XG5cbmV4cG9ydHMudW5lbnJvbGwgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSAtMTtcbn07XG5cbmV4cG9ydHMuX3VucmVmQWN0aXZlID0gZXhwb3J0cy5hY3RpdmUgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcblxuICB2YXIgbXNlY3MgPSBpdGVtLl9pZGxlVGltZW91dDtcbiAgaWYgKG1zZWNzID49IDApIHtcbiAgICBpdGVtLl9pZGxlVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiBvblRpbWVvdXQoKSB7XG4gICAgICBpZiAoaXRlbS5fb25UaW1lb3V0KVxuICAgICAgICBpdGVtLl9vblRpbWVvdXQoKTtcbiAgICB9LCBtc2Vjcyk7XG4gIH1cbn07XG5cbi8vIHNldGltbWVkaWF0ZSBhdHRhY2hlcyBpdHNlbGYgdG8gdGhlIGdsb2JhbCBvYmplY3RcbnJlcXVpcmUoXCJzZXRpbW1lZGlhdGVcIik7XG5leHBvcnRzLnNldEltbWVkaWF0ZSA9IHNldEltbWVkaWF0ZTtcbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSBjbGVhckltbWVkaWF0ZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3RpbWVycy1icm93c2VyaWZ5L21haW4uanNcbi8vIG1vZHVsZSBpZCA9IDEwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5), __webpack_require__(4)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///11\n");

/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_bustCache_App_vue__ = __webpack_require__(6);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_1bd2bee3_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_bustCache_App_vue__ = __webpack_require__(30);\nvar disposed = false\nfunction injectStyle (ssrContext) {\n  if (disposed) return\n  __webpack_require__(13)\n}\nvar normalizeComponent = __webpack_require__(2)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_bustCache_App_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_1bd2bee3_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_bustCache_App_vue__[\"a\" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\nComponent.options.__file = \"demo/App.vue\"\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-1bd2bee3\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-1bd2bee3\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kZW1vL0FwcC52dWU/ZGFkZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0Esd0JBQTJMO0FBQzNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNxSztBQUNySztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsWUFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7O0FBRUQiLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZGlzcG9zZWQgPSBmYWxzZVxuZnVuY3Rpb24gaW5qZWN0U3R5bGUgKHNzckNvbnRleHQpIHtcbiAgaWYgKGRpc3Bvc2VkKSByZXR1cm5cbiAgcmVxdWlyZShcIiEhdnVlLXN0eWxlLWxvYWRlciFjc3MtbG9hZGVyP3NvdXJjZU1hcCEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXg/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTFiZDJiZWUzXFxcIixcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c3R5bGVzJmluZGV4PTAmYnVzdENhY2hlIS4vQXBwLnZ1ZVwiKVxufVxudmFyIG5vcm1hbGl6ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpXG4vKiBzY3JpcHQgKi9cbmV4cG9ydCAqIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCZidXN0Q2FjaGUhLi9BcHAudnVlXCJcbmltcG9ydCBfX3Z1ZV9zY3JpcHRfXyBmcm9tIFwiISFiYWJlbC1sb2FkZXIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAmYnVzdENhY2hlIS4vQXBwLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSAqL1xuaW1wb3J0IF9fdnVlX3RlbXBsYXRlX18gZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtMWJkMmJlZTNcXFwiLFxcXCJoYXNTY29wZWRcXFwiOmZhbHNlLFxcXCJidWJsZVxcXCI6e1xcXCJ0cmFuc2Zvcm1zXFxcIjp7fX19IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAmYnVzdENhY2hlIS4vQXBwLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gaW5qZWN0U3R5bGVcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3RlbXBsYXRlX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuQ29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJkZW1vL0FwcC52dWVcIlxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkgeyhmdW5jdGlvbiAoKSB7XG4gIHZhciBob3RBUEkgPSByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpXG4gIGhvdEFQSS5pbnN0YWxsKHJlcXVpcmUoXCJ2dWVcIiksIGZhbHNlKVxuICBpZiAoIWhvdEFQSS5jb21wYXRpYmxlKSByZXR1cm5cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgIGhvdEFQSS5jcmVhdGVSZWNvcmQoXCJkYXRhLXYtMWJkMmJlZTNcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH0gZWxzZSB7XG4gICAgaG90QVBJLnJlbG9hZChcImRhdGEtdi0xYmQyYmVlM1wiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfVxuICBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBkaXNwb3NlZCA9IHRydWVcbiAgfSlcbn0pKCl9XG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2RlbW8vQXBwLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///12\n");

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(14);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(1)(\"50ba6d1a\", content, false);\n// Hot Module Replacement\nif(false) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../node_modules/css-loader/index.js?sourceMap!../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-1bd2bee3\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../node_modules/vue-loader/lib/selector.js?type=styles&index=0&bustCache!./App.vue\", function() {\n     var newContent = require(\"!!../node_modules/css-loader/index.js?sourceMap!../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-1bd2bee3\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../node_modules/vue-loader/lib/selector.js?type=styles&index=0&bustCache!./App.vue\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kZW1vL0FwcC52dWU/NWU1NiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLG9DQUFrTjtBQUNsTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEhBQThILG1GQUFtRjtBQUNqTix1SUFBdUksbUZBQW1GO0FBQzFOO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLGdDQUFnQyxVQUFVLEVBQUU7QUFDNUMiLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtMWJkMmJlZTNcXFwiLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCZidXN0Q2FjaGUhLi9BcHAudnVlXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikoXCI1MGJhNmQxYVwiLCBjb250ZW50LCBmYWxzZSk7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG4gLy8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3NcbiBpZighY29udGVudC5sb2NhbHMpIHtcbiAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi0xYmQyYmVlM1xcXCIsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wJmJ1c3RDYWNoZSEuL0FwcC52dWVcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtMWJkMmJlZTNcXFwiLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCZidXN0Q2FjaGUhLi9BcHAudnVlXCIpO1xuICAgICBpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcbiAgICAgdXBkYXRlKG5ld0NvbnRlbnQpO1xuICAgfSk7XG4gfVxuIC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3NcbiBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXI/c291cmNlTWFwIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyP3tcInZ1ZVwiOnRydWUsXCJpZFwiOlwiZGF0YS12LTFiZDJiZWUzXCIsXCJzY29wZWRcIjpmYWxzZSxcImhhc0lubGluZUNvbmZpZ1wiOmZhbHNlfSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wJmJ1c3RDYWNoZSEuL2RlbW8vQXBwLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///13\n");

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(0)(true);\n// imports\n\n\n// module\nexports.push([module.i, \"\\nbody {\\n  margin:0;\\n  padding:0;\\n  height:100vh;\\n}\\n.app {\\n  display:flex;\\n  flex-flow:column;\\n  background: #f9f9f9;\\n  height:100%;\\n}\\n.tables {\\n  flex:1;\\n  min-height:400px;\\n  display:flex;\\n  flex-flow:column;\\n}\\n\", \"\", {\"version\":3,\"sources\":[\"/home/stdio/coding/Projects/vue-hxs/vue-edi-table/demo/demo/App.vue?8dac9314\"],\"names\":[],\"mappings\":\";AA0EA;EACA,SAAA;EACA,UAAA;EACA,aAAA;CACA;AACA;EACA,aAAA;EACA,iBAAA;EACA,oBAAA;EACA,YAAA;CACA;AACA;EACA,OAAA;EACA,iBAAA;EACA,aAAA;EACA,iBAAA;CACA\",\"file\":\"App.vue\",\"sourcesContent\":[\"<template>\\n  <div class=\\\"app\\\">\\n    <div class=\\\"controls\\\">\\n      <button @click=\\\"editable=!editable\\\">editable {{ editable }}</button>\\n    </div>\\n    <div class=\\\"tables\\\">\\n      <Split :resizeable=\\\"true\\\" dir=\\\"horizontal\\\">\\n        <editable\\n          :headers=\\\"headers\\\"\\n          :rows=\\\"dataList\\\"\\n          :editable=\\\"editable\\\"\\n          @commit=\\\"commit\\\"\\n        />\\n        <div/>\\n      </Split>\\n    </div>\\n  </div>\\n</template>\\n<script>\\nimport Editable from '../src'\\nimport {Editable as EditableOld} from '../src/old'\\nimport {Split} from 'vue-split-layout'\\n\\nexport default {\\n  components: {Editable, EditableOld, Split},\\n  data () {\\n    var dataList = []\\n\\n    for (let i = 0; i < 2; i++) {\\n      dataList.push(\\n        {id: i * 4 + 1, name: 'Samsung', model: 'Note 4', active: true, password: '123', rdonly: true},\\n        {id: i * 4 + 2, name: 'Samsung', model: 'Note 5', active: true, password: '123', rdonly: false},\\n        {id: i * 4 + 3, name: 'Apple', model: 'iPhone 4', active: false, password: '123', rdonly: true},\\n        {id: i * 4 + 4, name: 'Apple', model: 'iPhone X', active: true, password: '123', rdonly: true}\\n      )\\n    }\\n    return {\\n      editable: true,\\n      headers: {\\n        id: {header: 'Id', text: 'Id', readonly: true},\\n        name: {header: 'Brands', text: 'Brands'},\\n        model: {header: 'model', text: 'model'},\\n        active: {header: 'active', text: 'active', type: 'checkbox'},\\n        password: {header: 'Password', text: 'Password', type: 'password'},\\n        rdonly: {header: 'Big ass header testing Readonly checkbox', text: 'Big ass header testing Readonly checkbox', type: 'checkbox', readonly: true}\\n      },\\n      dataList: dataList\\n    }\\n  },\\n  methods: {\\n    commit (c) {\\n      for (let entry of c) {\\n        switch (entry.op) {\\n          case 'update':\\n            this.dataList.forEach((v, i) => {\\n              if (v.id === entry.data.id) {\\n                this.$set(this.dataList, i, entry.data)\\n              }\\n            })\\n            break\\n          case 'delete':\\n            let id = this.dataList.findIndex(d => d.id === entry.data.id)\\n            this.dataList.splice(id, 1)\\n            break\\n          case 'add':\\n            this.dataList.push(entry.data)\\n            break\\n        }\\n      }\\n    }\\n  }\\n}\\n</script>\\n<style>\\nbody {\\n  margin:0;\\n  padding:0;\\n  height:100vh;\\n}\\n.app {\\n  display:flex;\\n  flex-flow:column;\\n  background: #f9f9f9;\\n  height:100%;\\n}\\n.tables {\\n  flex:1;\\n  min-height:400px;\\n  display:flex;\\n  flex-flow:column;\\n}\\n</style>\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kZW1vL0FwcC52dWU/YmEzMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOzs7QUFHQTtBQUNBLGlDQUFrQyxhQUFhLGNBQWMsaUJBQWlCLEdBQUcsUUFBUSxpQkFBaUIscUJBQXFCLHdCQUF3QixnQkFBZ0IsR0FBRyxXQUFXLFdBQVcscUJBQXFCLGlCQUFpQixxQkFBcUIsR0FBRyxVQUFVLCtIQUErSCxNQUFNLFVBQVUsVUFBVSxVQUFVLEtBQUssS0FBSyxVQUFVLFdBQVcsV0FBVyxVQUFVLEtBQUssS0FBSyxVQUFVLFdBQVcsVUFBVSxXQUFXLGtLQUFrSyxZQUFZLDJYQUEyWCx3QkFBd0IsNEJBQTRCLE1BQU0sNENBQTRDLGlCQUFpQiw2QkFBNkIsY0FBYyw4Q0FBOEMsT0FBTyxPQUFPLGlDQUFpQyw2RkFBNkYsWUFBWSw4RkFBOEYsWUFBWSw4RkFBOEYsWUFBWSw2RkFBNkYsZ0JBQWdCLGNBQWMseUNBQXlDLGVBQWUseUNBQXlDLGtCQUFrQixpQ0FBaUMsbUJBQW1CLCtCQUErQixvQkFBb0IsbURBQW1ELHNCQUFzQix1REFBdUQsb0JBQW9CLHVJQUF1SSxTQUFTLGtDQUFrQyxLQUFLLGVBQWUsa0JBQWtCLDhCQUE4Qiw2QkFBNkIseUVBQXlFLDZDQUE2QywwRUFBMEUsZUFBZSxzUkFBc1IsU0FBUyxPQUFPLEtBQUssR0FBRyw0QkFBNEIsYUFBYSxjQUFjLGlCQUFpQixHQUFHLFFBQVEsaUJBQWlCLHFCQUFxQix3QkFBd0IsZ0JBQWdCLEdBQUcsV0FBVyxXQUFXLHFCQUFxQixpQkFBaUIscUJBQXFCLEdBQUcsK0JBQStCOztBQUV4b0ciLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKHRydWUpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiXFxuYm9keSB7XFxuICBtYXJnaW46MDtcXG4gIHBhZGRpbmc6MDtcXG4gIGhlaWdodDoxMDB2aDtcXG59XFxuLmFwcCB7XFxuICBkaXNwbGF5OmZsZXg7XFxuICBmbGV4LWZsb3c6Y29sdW1uO1xcbiAgYmFja2dyb3VuZDogI2Y5ZjlmOTtcXG4gIGhlaWdodDoxMDAlO1xcbn1cXG4udGFibGVzIHtcXG4gIGZsZXg6MTtcXG4gIG1pbi1oZWlnaHQ6NDAwcHg7XFxuICBkaXNwbGF5OmZsZXg7XFxuICBmbGV4LWZsb3c6Y29sdW1uO1xcbn1cXG5cIiwgXCJcIiwge1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wiL2hvbWUvc3RkaW8vY29kaW5nL1Byb2plY3RzL3Z1ZS1oeHMvdnVlLWVkaS10YWJsZS9kZW1vL2RlbW8vQXBwLnZ1ZT84ZGFjOTMxNFwiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiO0FBMEVBO0VBQ0EsU0FBQTtFQUNBLFVBQUE7RUFDQSxhQUFBO0NBQ0E7QUFDQTtFQUNBLGFBQUE7RUFDQSxpQkFBQTtFQUNBLG9CQUFBO0VBQ0EsWUFBQTtDQUNBO0FBQ0E7RUFDQSxPQUFBO0VBQ0EsaUJBQUE7RUFDQSxhQUFBO0VBQ0EsaUJBQUE7Q0FDQVwiLFwiZmlsZVwiOlwiQXBwLnZ1ZVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCI8dGVtcGxhdGU+XFxuICA8ZGl2IGNsYXNzPVxcXCJhcHBcXFwiPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sc1xcXCI+XFxuICAgICAgPGJ1dHRvbiBAY2xpY2s9XFxcImVkaXRhYmxlPSFlZGl0YWJsZVxcXCI+ZWRpdGFibGUge3sgZWRpdGFibGUgfX08L2J1dHRvbj5cXG4gICAgPC9kaXY+XFxuICAgIDxkaXYgY2xhc3M9XFxcInRhYmxlc1xcXCI+XFxuICAgICAgPFNwbGl0IDpyZXNpemVhYmxlPVxcXCJ0cnVlXFxcIiBkaXI9XFxcImhvcml6b250YWxcXFwiPlxcbiAgICAgICAgPGVkaXRhYmxlXFxuICAgICAgICAgIDpoZWFkZXJzPVxcXCJoZWFkZXJzXFxcIlxcbiAgICAgICAgICA6cm93cz1cXFwiZGF0YUxpc3RcXFwiXFxuICAgICAgICAgIDplZGl0YWJsZT1cXFwiZWRpdGFibGVcXFwiXFxuICAgICAgICAgIEBjb21taXQ9XFxcImNvbW1pdFxcXCJcXG4gICAgICAgIC8+XFxuICAgICAgICA8ZGl2Lz5cXG4gICAgICA8L1NwbGl0PlxcbiAgICA8L2Rpdj5cXG4gIDwvZGl2PlxcbjwvdGVtcGxhdGU+XFxuPHNjcmlwdD5cXG5pbXBvcnQgRWRpdGFibGUgZnJvbSAnLi4vc3JjJ1xcbmltcG9ydCB7RWRpdGFibGUgYXMgRWRpdGFibGVPbGR9IGZyb20gJy4uL3NyYy9vbGQnXFxuaW1wb3J0IHtTcGxpdH0gZnJvbSAndnVlLXNwbGl0LWxheW91dCdcXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICBjb21wb25lbnRzOiB7RWRpdGFibGUsIEVkaXRhYmxlT2xkLCBTcGxpdH0sXFxuICBkYXRhICgpIHtcXG4gICAgdmFyIGRhdGFMaXN0ID0gW11cXG5cXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyOyBpKyspIHtcXG4gICAgICBkYXRhTGlzdC5wdXNoKFxcbiAgICAgICAge2lkOiBpICogNCArIDEsIG5hbWU6ICdTYW1zdW5nJywgbW9kZWw6ICdOb3RlIDQnLCBhY3RpdmU6IHRydWUsIHBhc3N3b3JkOiAnMTIzJywgcmRvbmx5OiB0cnVlfSxcXG4gICAgICAgIHtpZDogaSAqIDQgKyAyLCBuYW1lOiAnU2Ftc3VuZycsIG1vZGVsOiAnTm90ZSA1JywgYWN0aXZlOiB0cnVlLCBwYXNzd29yZDogJzEyMycsIHJkb25seTogZmFsc2V9LFxcbiAgICAgICAge2lkOiBpICogNCArIDMsIG5hbWU6ICdBcHBsZScsIG1vZGVsOiAnaVBob25lIDQnLCBhY3RpdmU6IGZhbHNlLCBwYXNzd29yZDogJzEyMycsIHJkb25seTogdHJ1ZX0sXFxuICAgICAgICB7aWQ6IGkgKiA0ICsgNCwgbmFtZTogJ0FwcGxlJywgbW9kZWw6ICdpUGhvbmUgWCcsIGFjdGl2ZTogdHJ1ZSwgcGFzc3dvcmQ6ICcxMjMnLCByZG9ubHk6IHRydWV9XFxuICAgICAgKVxcbiAgICB9XFxuICAgIHJldHVybiB7XFxuICAgICAgZWRpdGFibGU6IHRydWUsXFxuICAgICAgaGVhZGVyczoge1xcbiAgICAgICAgaWQ6IHtoZWFkZXI6ICdJZCcsIHRleHQ6ICdJZCcsIHJlYWRvbmx5OiB0cnVlfSxcXG4gICAgICAgIG5hbWU6IHtoZWFkZXI6ICdCcmFuZHMnLCB0ZXh0OiAnQnJhbmRzJ30sXFxuICAgICAgICBtb2RlbDoge2hlYWRlcjogJ21vZGVsJywgdGV4dDogJ21vZGVsJ30sXFxuICAgICAgICBhY3RpdmU6IHtoZWFkZXI6ICdhY3RpdmUnLCB0ZXh0OiAnYWN0aXZlJywgdHlwZTogJ2NoZWNrYm94J30sXFxuICAgICAgICBwYXNzd29yZDoge2hlYWRlcjogJ1Bhc3N3b3JkJywgdGV4dDogJ1Bhc3N3b3JkJywgdHlwZTogJ3Bhc3N3b3JkJ30sXFxuICAgICAgICByZG9ubHk6IHtoZWFkZXI6ICdCaWcgYXNzIGhlYWRlciB0ZXN0aW5nIFJlYWRvbmx5IGNoZWNrYm94JywgdGV4dDogJ0JpZyBhc3MgaGVhZGVyIHRlc3RpbmcgUmVhZG9ubHkgY2hlY2tib3gnLCB0eXBlOiAnY2hlY2tib3gnLCByZWFkb25seTogdHJ1ZX1cXG4gICAgICB9LFxcbiAgICAgIGRhdGFMaXN0OiBkYXRhTGlzdFxcbiAgICB9XFxuICB9LFxcbiAgbWV0aG9kczoge1xcbiAgICBjb21taXQgKGMpIHtcXG4gICAgICBmb3IgKGxldCBlbnRyeSBvZiBjKSB7XFxuICAgICAgICBzd2l0Y2ggKGVudHJ5Lm9wKSB7XFxuICAgICAgICAgIGNhc2UgJ3VwZGF0ZSc6XFxuICAgICAgICAgICAgdGhpcy5kYXRhTGlzdC5mb3JFYWNoKCh2LCBpKSA9PiB7XFxuICAgICAgICAgICAgICBpZiAodi5pZCA9PT0gZW50cnkuZGF0YS5pZCkge1xcbiAgICAgICAgICAgICAgICB0aGlzLiRzZXQodGhpcy5kYXRhTGlzdCwgaSwgZW50cnkuZGF0YSlcXG4gICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9KVxcbiAgICAgICAgICAgIGJyZWFrXFxuICAgICAgICAgIGNhc2UgJ2RlbGV0ZSc6XFxuICAgICAgICAgICAgbGV0IGlkID0gdGhpcy5kYXRhTGlzdC5maW5kSW5kZXgoZCA9PiBkLmlkID09PSBlbnRyeS5kYXRhLmlkKVxcbiAgICAgICAgICAgIHRoaXMuZGF0YUxpc3Quc3BsaWNlKGlkLCAxKVxcbiAgICAgICAgICAgIGJyZWFrXFxuICAgICAgICAgIGNhc2UgJ2FkZCc6XFxuICAgICAgICAgICAgdGhpcy5kYXRhTGlzdC5wdXNoKGVudHJ5LmRhdGEpXFxuICAgICAgICAgICAgYnJlYWtcXG4gICAgICAgIH1cXG4gICAgICB9XFxuICAgIH1cXG4gIH1cXG59XFxuPC9zY3JpcHQ+XFxuPHN0eWxlPlxcbmJvZHkge1xcbiAgbWFyZ2luOjA7XFxuICBwYWRkaW5nOjA7XFxuICBoZWlnaHQ6MTAwdmg7XFxufVxcbi5hcHAge1xcbiAgZGlzcGxheTpmbGV4O1xcbiAgZmxleC1mbG93OmNvbHVtbjtcXG4gIGJhY2tncm91bmQ6ICNmOWY5Zjk7XFxuICBoZWlnaHQ6MTAwJTtcXG59XFxuLnRhYmxlcyB7XFxuICBmbGV4OjE7XFxuICBtaW4taGVpZ2h0OjQwMHB4O1xcbiAgZGlzcGxheTpmbGV4O1xcbiAgZmxleC1mbG93OmNvbHVtbjtcXG59XFxuPC9zdHlsZT5cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcblxuLy8gZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlcj9zb3VyY2VNYXAhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXI/e1widnVlXCI6dHJ1ZSxcImlkXCI6XCJkYXRhLXYtMWJkMmJlZTNcIixcInNjb3BlZFwiOmZhbHNlLFwiaGFzSW5saW5lQ29uZmlnXCI6ZmFsc2V9IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAmYnVzdENhY2hlIS4vZGVtby9BcHAudnVlXG4vLyBtb2R1bGUgaWQgPSAxNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///14\n");

/***/ }),
/* 15 */
/***/ (function(module, exports) {

eval("/**\n * Translates the list format produced by css-loader into something\n * easier to manipulate.\n */\nmodule.exports = function listToStyles (parentId, list) {\n  var styles = []\n  var newStyles = {}\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i]\n    var id = item[0]\n    var css = item[1]\n    var media = item[2]\n    var sourceMap = item[3]\n    var part = {\n      id: parentId + ':' + i,\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    }\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = { id: id, parts: [part] })\n    } else {\n      newStyles[id].parts.push(part)\n    }\n  }\n  return styles\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvbGlzdFRvU3R5bGVzLmpzP2I1MzUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsaUJBQWlCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyx3QkFBd0I7QUFDM0QsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRyYW5zbGF0ZXMgdGhlIGxpc3QgZm9ybWF0IHByb2R1Y2VkIGJ5IGNzcy1sb2FkZXIgaW50byBzb21ldGhpbmdcbiAqIGVhc2llciB0byBtYW5pcHVsYXRlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGxpc3RUb1N0eWxlcyAocGFyZW50SWQsIGxpc3QpIHtcbiAgdmFyIHN0eWxlcyA9IFtdXG4gIHZhciBuZXdTdHlsZXMgPSB7fVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV1cbiAgICB2YXIgaWQgPSBpdGVtWzBdXG4gICAgdmFyIGNzcyA9IGl0ZW1bMV1cbiAgICB2YXIgbWVkaWEgPSBpdGVtWzJdXG4gICAgdmFyIHNvdXJjZU1hcCA9IGl0ZW1bM11cbiAgICB2YXIgcGFydCA9IHtcbiAgICAgIGlkOiBwYXJlbnRJZCArICc6JyArIGksXG4gICAgICBjc3M6IGNzcyxcbiAgICAgIG1lZGlhOiBtZWRpYSxcbiAgICAgIHNvdXJjZU1hcDogc291cmNlTWFwXG4gICAgfVxuICAgIGlmICghbmV3U3R5bGVzW2lkXSkge1xuICAgICAgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHsgaWQ6IGlkLCBwYXJ0czogW3BhcnRdIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KVxuICAgIH1cbiAgfVxuICByZXR1cm4gc3R5bGVzXG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9saXN0VG9TdHlsZXMuanNcbi8vIG1vZHVsZSBpZCA9IDE1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///15\n");

/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Table_vue__ = __webpack_require__(17);\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (__WEBPACK_IMPORTED_MODULE_0__Table_vue__[\"a\" /* default */]);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanM/OTU1MiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0FBRUEseURBQWUsMkRBQWYiLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRWRpdGFibGUgZnJvbSAnLi9UYWJsZS52dWUnXG5cbmV4cG9ydCBkZWZhdWx0IEVkaXRhYmxlXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvaW5kZXguanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///16\n");

/***/ }),
/* 17 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_Table_vue_js__ = __webpack_require__(7);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_5a7200a5_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_bustCache_Table_vue__ = __webpack_require__(23);\nvar disposed = false\nfunction injectStyle (ssrContext) {\n  if (disposed) return\n  __webpack_require__(18)\n  __webpack_require__(20)\n}\nvar normalizeComponent = __webpack_require__(2)\n/* script */\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-5a7200a5\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_Table_vue_js__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_5a7200a5_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_bustCache_Table_vue__[\"a\" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\nComponent.options.__file = \"src/Table.vue\"\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-5a7200a5\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-5a7200a5\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvVGFibGUudnVlPzg5MGYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBLHdCQUEwTDtBQUMxTCx3QkFBMkw7QUFDM0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNvSztBQUNwSztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsWUFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7O0FBRUQiLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZGlzcG9zZWQgPSBmYWxzZVxuZnVuY3Rpb24gaW5qZWN0U3R5bGUgKHNzckNvbnRleHQpIHtcbiAgaWYgKGRpc3Bvc2VkKSByZXR1cm5cbiAgcmVxdWlyZShcIiEhdnVlLXN0eWxlLWxvYWRlciFjc3MtbG9hZGVyP3NvdXJjZU1hcCEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXg/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTVhNzIwMGE1XFxcIixcXFwic2NvcGVkXFxcIjp0cnVlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSEuL1RhYmxlLmNzc1wiKVxuICByZXF1aXJlKFwiISF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXI/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleD97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNWE3MjAwYTVcXFwiLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSEuL1RhYmxlLnRoZW1lLmNzc1wiKVxufVxudmFyIG5vcm1hbGl6ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpXG4vKiBzY3JpcHQgKi9cbmV4cG9ydCAqIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuL1RhYmxlLnZ1ZS5qc1wiXG5pbXBvcnQgX192dWVfc2NyaXB0X18gZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4vVGFibGUudnVlLmpzXCIvKiB0ZW1wbGF0ZSAqL1xuaW1wb3J0IF9fdnVlX3RlbXBsYXRlX18gZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNWE3MjAwYTVcXFwiLFxcXCJoYXNTY29wZWRcXFwiOnRydWUsXFxcImJ1YmxlXFxcIjp7XFxcInRyYW5zZm9ybXNcXFwiOnt9fX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCZidXN0Q2FjaGUhLi9UYWJsZS52dWVcIlxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IGluamVjdFN0eWxlXG4vKiBzY29wZUlkICovXG52YXIgX192dWVfc2NvcGVJZF9fID0gXCJkYXRhLXYtNWE3MjAwYTVcIlxuLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG52YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IG51bGxcbnZhciBDb21wb25lbnQgPSBub3JtYWxpemVDb21wb25lbnQoXG4gIF9fdnVlX3NjcmlwdF9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18sXG4gIF9fdnVlX3N0eWxlc19fLFxuICBfX3Z1ZV9zY29wZUlkX18sXG4gIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX19cbilcbkNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwic3JjL1RhYmxlLnZ1ZVwiXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7KGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhvdEFQSSA9IHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIilcbiAgaG90QVBJLmluc3RhbGwocmVxdWlyZShcInZ1ZVwiKSwgZmFsc2UpXG4gIGlmICghaG90QVBJLmNvbXBhdGlibGUpIHJldHVyblxuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgaG90QVBJLmNyZWF0ZVJlY29yZChcImRhdGEtdi01YTcyMDBhNVwiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfSBlbHNlIHtcbiAgICBob3RBUEkucmVsb2FkKFwiZGF0YS12LTVhNzIwMGE1XCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9XG4gIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbiAoZGF0YSkge1xuICAgIGRpc3Bvc2VkID0gdHJ1ZVxuICB9KVxufSkoKX1cblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL1RhYmxlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///17\n");

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(19);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(1)(\"0e9d4428\", content, false);\n// Hot Module Replacement\nif(false) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../node_modules/css-loader/index.js?sourceMap!../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-5a7200a5\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!./Table.css\", function() {\n     var newContent = require(\"!!../node_modules/css-loader/index.js?sourceMap!../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-5a7200a5\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!./Table.css\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvVGFibGUuY3NzPzk2YzIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQSxvQ0FBaU47QUFDak47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhIQUE4SCxrRkFBa0Y7QUFDaE4sdUlBQXVJLGtGQUFrRjtBQUN6TjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxnQ0FBZ0MsVUFBVSxFQUFFO0FBQzVDIiwiZmlsZSI6IjE4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzP3NvdXJjZU1hcCEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTVhNzIwMGE1XFxcIixcXFwic2NvcGVkXFxcIjp0cnVlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSEuL1RhYmxlLmNzc1wiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpKFwiMGU5ZDQ0MjhcIiwgY29udGVudCwgZmFsc2UpO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNWE3MjAwYTVcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IS4vVGFibGUuY3NzXCIsIGZ1bmN0aW9uKCkge1xuICAgICB2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzP3NvdXJjZU1hcCEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTVhNzIwMGE1XFxcIixcXFwic2NvcGVkXFxcIjp0cnVlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSEuL1RhYmxlLmNzc1wiKTtcbiAgICAgaWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgIH0pO1xuIH1cbiAvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG4gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlciEuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyP3NvdXJjZU1hcCEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi01YTcyMDBhNVwiLFwic2NvcGVkXCI6dHJ1ZSxcImhhc0lubGluZUNvbmZpZ1wiOmZhbHNlfSEuL3NyYy9UYWJsZS5jc3Ncbi8vIG1vZHVsZSBpZCA9IDE4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///18\n");

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(0)(true);\n// imports\n\n\n// module\nexports.push([module.i, \"\\n#editable[data-v-5a7200a5] {\\n  display: flex;\\n  flex-flow: column;\\n  height: 100%;\\n}\\n#editable .table-container[data-v-5a7200a5] {\\n  display: flex;\\n  position: relative;\\n  flex: 1;\\n}\\n\\n/* scroll area */\\n#editable table[data-v-5a7200a5] {\\n  background: #fff;\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  max-height: 100%;\\n  display: block;\\n  overflow: auto;\\n}\\n#editable thead[data-v-5a7200a5] {\\n  display: flex;\\n  position: sticky;\\n  top: 0;\\n  min-width: min-content;\\n  min-width: -moz-min-content;\\n  z-index: 100;\\n}\\n\\n/* corner */\\n#editable thead .index[data-v-5a7200a5] {\\n  z-index: 200;\\n}\\n#editable .header[data-v-5a7200a5] {\\n  z-index: 50;\\n}\\n#editable tbody[data-v-5a7200a5] {\\n  display: flex;\\n  flex-flow: column;\\n  min-width: min-content;\\n  min-width: -moz-min-content;\\n  min-width: -ms-min-content;\\n}\\n#editable table tr[data-v-5a7200a5] {\\n  display: flex;\\n  min-width: min-content;\\n  min-width: -moz-min-content;\\n  min-width: -ms-min-content;\\n  width: 100%;\\n}\\n#editable table td[data-v-5a7200a5],\\n#editable table th[data-v-5a7200a5] {\\n  position: relative;\\n  flex: 1;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n}\\n#editable table thead th[data-v-5a7200a5]:not(.index),\\n#editable table tbody td[data-v-5a7200a5]:not(.index) {\\n  min-width: 200px;\\n}\\n#editable table .index[data-v-5a7200a5] {\\n  user-select: none;\\n  -moz-user-select: none;\\n  -ms-user-select: none;\\n  position: sticky;\\n  left: 0;\\n}\\n#editable.editable table td.active[data-v-5a7200a5]::before {\\n  content: \\\" \\\";\\n  z-index: 30;\\n  position: absolute;\\n  top: 0;\\n  right: 0;\\n  bottom: 0;\\n  left: 0;\\n  border: solid 2px rgba(250, 0, 0, 0.2);\\n  pointer-events: none;\\n}\\n#editable.editable table:focus td.active[data-v-5a7200a5]::before {\\n  border: solid 2px #f00;\\n}\\n#editable.editable .editor[data-v-5a7200a5] {\\n  position: absolute;\\n  margin: 0;\\n  padding: 0;\\n  display: none;\\n  box-shadow: 0 4px 20px rgba(50, 50, 50, 0.3);\\n  z-index: 20;\\n}\\n#editable.editable .editor.editing[data-v-5a7200a5] {\\n  display: block;\\n}\\n\\n/* Input thing */\\n#editable .editor > .input[data-v-5a7200a5] {\\n  box-sizing: border-box;\\n  outline: none;\\n  background: transparent;\\n  resize: unset;\\n  color: inherit;\\n  font-family: inherit;\\n  font-size: inherit;\\n  border: none;\\n  padding: 0;\\n  margin: 0;\\n}\\n\\n/* anything inside a td  (usually inputs) */\\n#editable table tbody td > *[data-v-5a7200a5] {\\n  overflow: hidden;\\n  border: none;\\n  background: transparent;\\n  margin: 0;\\n  padding: 0;\\n  resize: unset;\\n  font-family: inherit;\\n  font-size: inherit;\\n  z-index: 20;\\n}\\n#editable table tbody td > .readonly[data-v-5a7200a5] {\\n  pointer-events: none;\\n}\\n\", \"\", {\"version\":3,\"sources\":[\"/home/stdio/coding/Projects/vue-hxs/vue-edi-table/src/Table.css\"],\"names\":[],\"mappings\":\";AAAA;EACE,cAAc;EACd,kBAAkB;EAClB,aAAa;CACd;AAED;EACE,cAAc;EACd,mBAAmB;EACnB,QAAQ;CACT;;AAED,iBAAiB;AACjB;EACE,iBAAiB;EACjB,mBAAmB;EACnB,OAAO;EACP,QAAQ;EACR,SAAS;EACT,iBAAiB;EACjB,eAAe;EACf,eAAe;CAChB;AAED;EACE,cAAc;EACd,iBAAiB;EACjB,OAAO;EACP,uBAAuB;EACvB,4BAA4B;EAC5B,aAAa;CACd;;AAED,YAAY;AACZ;EACE,aAAa;CACd;AAED;EACE,YAAY;CACb;AAED;EACE,cAAc;EACd,kBAAkB;EAClB,uBAAuB;EACvB,4BAA4B;EAC5B,2BAA2B;CAC5B;AAED;EACE,cAAc;EACd,uBAAuB;EACvB,4BAA4B;EAC5B,2BAA2B;EAC3B,YAAY;CACb;AAED;;EAEE,mBAAmB;EACnB,QAAQ;EACR,cAAc;EACd,oBAAoB;EACpB,wBAAwB;CACzB;AAED;;EAEE,iBAAiB;CAClB;AAED;EACE,kBAAkB;EAClB,uBAAuB;EACvB,sBAAsB;EACtB,iBAAiB;EACjB,QAAQ;CACT;AAED;EACE,aAAa;EACb,YAAY;EACZ,mBAAmB;EACnB,OAAO;EACP,SAAS;EACT,UAAU;EACV,QAAQ;EACR,uCAAuC;EACvC,qBAAqB;CACtB;AAED;EACE,uBAAuB;CACxB;AAED;EACE,mBAAmB;EACnB,UAAU;EACV,WAAW;EACX,cAAc;EACd,6CAA6C;EAC7C,YAAY;CACb;AAED;EACE,eAAe;CAChB;;AAED,iBAAiB;AACjB;EACE,uBAAuB;EACvB,cAAc;EACd,wBAAwB;EACxB,cAAc;EACd,eAAe;EACf,qBAAqB;EACrB,mBAAmB;EACnB,aAAa;EACb,WAAW;EACX,UAAU;CACX;;AAED,4CAA4C;AAC5C;EACE,iBAAiB;EACjB,aAAa;EACb,wBAAwB;EACxB,UAAU;EACV,WAAW;EACX,cAAc;EACd,qBAAqB;EACrB,mBAAmB;EACnB,YAAY;CACb;AAED;EACE,qBAAqB;CACtB\",\"file\":\"Table.css\",\"sourcesContent\":[\"#editable {\\n  display: flex;\\n  flex-flow: column;\\n  height: 100%;\\n}\\n\\n#editable .table-container {\\n  display: flex;\\n  position: relative;\\n  flex: 1;\\n}\\n\\n/* scroll area */\\n#editable table {\\n  background: #fff;\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  max-height: 100%;\\n  display: block;\\n  overflow: auto;\\n}\\n\\n#editable thead {\\n  display: flex;\\n  position: sticky;\\n  top: 0;\\n  min-width: min-content;\\n  min-width: -moz-min-content;\\n  z-index: 100;\\n}\\n\\n/* corner */\\n#editable thead .index {\\n  z-index: 200;\\n}\\n\\n#editable .header {\\n  z-index: 50;\\n}\\n\\n#editable tbody {\\n  display: flex;\\n  flex-flow: column;\\n  min-width: min-content;\\n  min-width: -moz-min-content;\\n  min-width: -ms-min-content;\\n}\\n\\n#editable table tr {\\n  display: flex;\\n  min-width: min-content;\\n  min-width: -moz-min-content;\\n  min-width: -ms-min-content;\\n  width: 100%;\\n}\\n\\n#editable table td,\\n#editable table th {\\n  position: relative;\\n  flex: 1;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n}\\n\\n#editable table thead th:not(.index),\\n#editable table tbody td:not(.index) {\\n  min-width: 200px;\\n}\\n\\n#editable table .index {\\n  user-select: none;\\n  -moz-user-select: none;\\n  -ms-user-select: none;\\n  position: sticky;\\n  left: 0;\\n}\\n\\n#editable.editable table td.active::before {\\n  content: \\\" \\\";\\n  z-index: 30;\\n  position: absolute;\\n  top: 0;\\n  right: 0;\\n  bottom: 0;\\n  left: 0;\\n  border: solid 2px rgba(250, 0, 0, 0.2);\\n  pointer-events: none;\\n}\\n\\n#editable.editable table:focus td.active::before {\\n  border: solid 2px #f00;\\n}\\n\\n#editable.editable .editor {\\n  position: absolute;\\n  margin: 0;\\n  padding: 0;\\n  display: none;\\n  box-shadow: 0 4px 20px rgba(50, 50, 50, 0.3);\\n  z-index: 20;\\n}\\n\\n#editable.editable .editor.editing {\\n  display: block;\\n}\\n\\n/* Input thing */\\n#editable .editor > .input {\\n  box-sizing: border-box;\\n  outline: none;\\n  background: transparent;\\n  resize: unset;\\n  color: inherit;\\n  font-family: inherit;\\n  font-size: inherit;\\n  border: none;\\n  padding: 0;\\n  margin: 0;\\n}\\n\\n/* anything inside a td  (usually inputs) */\\n#editable table tbody td > * {\\n  overflow: hidden;\\n  border: none;\\n  background: transparent;\\n  margin: 0;\\n  padding: 0;\\n  resize: unset;\\n  font-family: inherit;\\n  font-size: inherit;\\n  z-index: 20;\\n}\\n\\n#editable table tbody td > .readonly {\\n  pointer-events: none;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///19\n");

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(21);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(1)(\"176754b6\", content, false);\n// Hot Module Replacement\nif(false) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../node_modules/css-loader/index.js?sourceMap!../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-5a7200a5\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!./Table.theme.css\", function() {\n     var newContent = require(\"!!../node_modules/css-loader/index.js?sourceMap!../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-5a7200a5\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!./Table.theme.css\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvVGFibGUudGhlbWUuY3NzPzQzOTEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQSxvQ0FBa047QUFDbE47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhIQUE4SCxtRkFBbUY7QUFDak4sdUlBQXVJLG1GQUFtRjtBQUMxTjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxnQ0FBZ0MsVUFBVSxFQUFFO0FBQzVDIiwiZmlsZSI6IjIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzP3NvdXJjZU1hcCEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTVhNzIwMGE1XFxcIixcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hLi9UYWJsZS50aGVtZS5jc3NcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKShcIjE3Njc1NGI2XCIsIGNvbnRlbnQsIGZhbHNlKTtcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcbiAvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuIGlmKCFjb250ZW50LmxvY2Fscykge1xuICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzP3NvdXJjZU1hcCEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTVhNzIwMGE1XFxcIixcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hLi9UYWJsZS50aGVtZS5jc3NcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNWE3MjAwYTVcXFwiLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSEuL1RhYmxlLnRoZW1lLmNzc1wiKTtcbiAgICAgaWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgIH0pO1xuIH1cbiAvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG4gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlciEuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyP3NvdXJjZU1hcCEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi01YTcyMDBhNVwiLFwic2NvcGVkXCI6ZmFsc2UsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9zcmMvVGFibGUudGhlbWUuY3NzXG4vLyBtb2R1bGUgaWQgPSAyMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///20\n");

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(0)(true);\n// imports\n\n\n// module\nexports.push([module.i, \"\\n#editable .header {\\n  background: #f1f1f1;\\n}\\n#editable .actions {\\n  margin: 10px 0;\\n}\\n\\n/*\\n#editable table td,\\n#editable table th {\\n  border-right: solid 1px rgba(0, 0, 0, 0.1);\\n  border-bottom: solid 1px rgba(0, 0, 0, 0.1);\\n}\\n*/\\n\\n/* headers */\\n#editable table {\\n  outline: none;\\n}\\n#editable table thead,\\n#editable table tr {\\n  height: 40px;\\n}\\n#editable table .index {\\n  box-sizing: border-box;\\n  width: 40px;\\n  max-width: 40px;\\n}\\n#editable table thead th {\\n  font-weight: bold;\\n  overflow: hidden;\\n}\\n#editable .editor .input,\\n#editable table tbody tr {\\n  font: 400 15px Arial, sans-serif;\\n  color: #444;\\n}\\n#editable table tbody tr > td > input,\\n#editable table tbody tr > td {\\n  text-align: center;\\n  justify-content: center;\\n  align-content: center;\\n  align-items: center;\\n}\\n#editable .editor .input {\\n  display: flex;\\n  justify-content: center;\\n  text-align: center;\\n  width: 100%;\\n  height: 100%;\\n}\\n#editable:not(.editable) table tbody tr:hover {\\n  background: rgba(150, 150, 150, 0.1);\\n}\\n#editable.editable table td:hover::after {\\n  content: \\\" \\\";\\n  position: absolute;\\n  top: 0;\\n  right: 0;\\n  bottom: 0;\\n  left: 0;\\n  background: rgba(150, 150, 150, 0.1);\\n}\\n#editable table tr.modified {\\n  font-weight: bold;\\n  background: #f9f9f9;\\n}\\n#editable table tr.selected > td {\\n  background: #ccf;\\n}\\n#editable table tr.modified td.index::before {\\n  content: \\\"*\\\";\\n}\\n\", \"\", {\"version\":3,\"sources\":[\"/home/stdio/coding/Projects/vue-hxs/vue-edi-table/src/Table.theme.css\"],\"names\":[],\"mappings\":\";AAAA;EACE,oBAAoB;CACrB;AAED;EACE,eAAe;CAChB;;AAED;;;;;;EAME;;AAEF,aAAa;AAEb;EACE,cAAc;CACf;AAED;;EAEE,aAAa;CACd;AAED;EACE,uBAAuB;EACvB,YAAY;EACZ,gBAAgB;CACjB;AAED;EACE,kBAAkB;EAClB,iBAAiB;CAClB;AAED;;EAEE,iCAAiC;EACjC,YAAY;CACb;AAED;;EAEE,mBAAmB;EACnB,wBAAwB;EACxB,sBAAsB;EACtB,oBAAoB;CACrB;AAED;EACE,cAAc;EACd,wBAAwB;EACxB,mBAAmB;EACnB,YAAY;EACZ,aAAa;CACd;AAED;EACE,qCAAqC;CACtC;AAED;EACE,aAAa;EACb,mBAAmB;EACnB,OAAO;EACP,SAAS;EACT,UAAU;EACV,QAAQ;EACR,qCAAqC;CACtC;AAED;EACE,kBAAkB;EAClB,oBAAoB;CACrB;AAED;EACE,iBAAiB;CAClB;AAED;EACE,aAAa;CACd\",\"file\":\"Table.theme.css\",\"sourcesContent\":[\"#editable .header {\\n  background: #f1f1f1;\\n}\\n\\n#editable .actions {\\n  margin: 10px 0;\\n}\\n\\n/*\\n#editable table td,\\n#editable table th {\\n  border-right: solid 1px rgba(0, 0, 0, 0.1);\\n  border-bottom: solid 1px rgba(0, 0, 0, 0.1);\\n}\\n*/\\n\\n/* headers */\\n\\n#editable table {\\n  outline: none;\\n}\\n\\n#editable table thead,\\n#editable table tr {\\n  height: 40px;\\n}\\n\\n#editable table .index {\\n  box-sizing: border-box;\\n  width: 40px;\\n  max-width: 40px;\\n}\\n\\n#editable table thead th {\\n  font-weight: bold;\\n  overflow: hidden;\\n}\\n\\n#editable .editor .input,\\n#editable table tbody tr {\\n  font: 400 15px Arial, sans-serif;\\n  color: #444;\\n}\\n\\n#editable table tbody tr > td > input,\\n#editable table tbody tr > td {\\n  text-align: center;\\n  justify-content: center;\\n  align-content: center;\\n  align-items: center;\\n}\\n\\n#editable .editor .input {\\n  display: flex;\\n  justify-content: center;\\n  text-align: center;\\n  width: 100%;\\n  height: 100%;\\n}\\n\\n#editable:not(.editable) table tbody tr:hover {\\n  background: rgba(150, 150, 150, 0.1);\\n}\\n\\n#editable.editable table td:hover::after {\\n  content: \\\" \\\";\\n  position: absolute;\\n  top: 0;\\n  right: 0;\\n  bottom: 0;\\n  left: 0;\\n  background: rgba(150, 150, 150, 0.1);\\n}\\n\\n#editable table tr.modified {\\n  font-weight: bold;\\n  background: #f9f9f9;\\n}\\n\\n#editable table tr.selected > td {\\n  background: #ccf;\\n}\\n\\n#editable table tr.modified td.index::before {\\n  content: \\\"*\\\";\\n}\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvVGFibGUudGhlbWUuY3NzPzk4ZjMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7O0FBR0E7QUFDQSw4Q0FBK0Msd0JBQXdCLEdBQUcsc0JBQXNCLG1CQUFtQixHQUFHLGlEQUFpRCwrQ0FBK0MsZ0RBQWdELEdBQUcsd0NBQXdDLGtCQUFrQixHQUFHLDhDQUE4QyxpQkFBaUIsR0FBRywwQkFBMEIsMkJBQTJCLGdCQUFnQixvQkFBb0IsR0FBRyw0QkFBNEIsc0JBQXNCLHFCQUFxQixHQUFHLHVEQUF1RCxxQ0FBcUMsZ0JBQWdCLEdBQUcseUVBQXlFLHVCQUF1Qiw0QkFBNEIsMEJBQTBCLHdCQUF3QixHQUFHLDRCQUE0QixrQkFBa0IsNEJBQTRCLHVCQUF1QixnQkFBZ0IsaUJBQWlCLEdBQUcsaURBQWlELHlDQUF5QyxHQUFHLDRDQUE0QyxtQkFBbUIsdUJBQXVCLFdBQVcsYUFBYSxjQUFjLFlBQVkseUNBQXlDLEdBQUcsK0JBQStCLHNCQUFzQix3QkFBd0IsR0FBRyxvQ0FBb0MscUJBQXFCLEdBQUcsZ0RBQWdELG1CQUFtQixHQUFHLFVBQVUsd0hBQXdILEtBQUssWUFBWSxNQUFNLEtBQUssVUFBVSxPQUFPLFVBQVUsTUFBTSxVQUFVLEtBQUssVUFBVSxLQUFLLE1BQU0sVUFBVSxLQUFLLEtBQUssWUFBWSxXQUFXLFlBQVksTUFBTSxLQUFLLFlBQVksYUFBYSxNQUFNLE1BQU0sWUFBWSxXQUFXLEtBQUssTUFBTSxZQUFZLGFBQWEsYUFBYSxhQUFhLE1BQU0sS0FBSyxVQUFVLFlBQVksYUFBYSxXQUFXLFVBQVUsS0FBSyxLQUFLLFlBQVksTUFBTSxLQUFLLFVBQVUsWUFBWSxXQUFXLFVBQVUsVUFBVSxVQUFVLFlBQVksTUFBTSxLQUFLLFlBQVksYUFBYSxNQUFNLEtBQUssWUFBWSxNQUFNLEtBQUssVUFBVSxxRUFBcUUsd0JBQXdCLEdBQUcsd0JBQXdCLG1CQUFtQixHQUFHLGlEQUFpRCwrQ0FBK0MsZ0RBQWdELEdBQUcsMENBQTBDLGtCQUFrQixHQUFHLGdEQUFnRCxpQkFBaUIsR0FBRyw0QkFBNEIsMkJBQTJCLGdCQUFnQixvQkFBb0IsR0FBRyw4QkFBOEIsc0JBQXNCLHFCQUFxQixHQUFHLHlEQUF5RCxxQ0FBcUMsZ0JBQWdCLEdBQUcsMkVBQTJFLHVCQUF1Qiw0QkFBNEIsMEJBQTBCLHdCQUF3QixHQUFHLDhCQUE4QixrQkFBa0IsNEJBQTRCLHVCQUF1QixnQkFBZ0IsaUJBQWlCLEdBQUcsbURBQW1ELHlDQUF5QyxHQUFHLDhDQUE4QyxtQkFBbUIsdUJBQXVCLFdBQVcsYUFBYSxjQUFjLFlBQVkseUNBQXlDLEdBQUcsaUNBQWlDLHNCQUFzQix3QkFBd0IsR0FBRyxzQ0FBc0MscUJBQXFCLEdBQUcsa0RBQWtELG1CQUFtQixHQUFHLHFCQUFxQjs7QUFFL2tIIiwiZmlsZSI6IjIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSh0cnVlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIlxcbiNlZGl0YWJsZSAuaGVhZGVyIHtcXG4gIGJhY2tncm91bmQ6ICNmMWYxZjE7XFxufVxcbiNlZGl0YWJsZSAuYWN0aW9ucyB7XFxuICBtYXJnaW46IDEwcHggMDtcXG59XFxuXFxuLypcXG4jZWRpdGFibGUgdGFibGUgdGQsXFxuI2VkaXRhYmxlIHRhYmxlIHRoIHtcXG4gIGJvcmRlci1yaWdodDogc29saWQgMXB4IHJnYmEoMCwgMCwgMCwgMC4xKTtcXG4gIGJvcmRlci1ib3R0b206IHNvbGlkIDFweCByZ2JhKDAsIDAsIDAsIDAuMSk7XFxufVxcbiovXFxuXFxuLyogaGVhZGVycyAqL1xcbiNlZGl0YWJsZSB0YWJsZSB7XFxuICBvdXRsaW5lOiBub25lO1xcbn1cXG4jZWRpdGFibGUgdGFibGUgdGhlYWQsXFxuI2VkaXRhYmxlIHRhYmxlIHRyIHtcXG4gIGhlaWdodDogNDBweDtcXG59XFxuI2VkaXRhYmxlIHRhYmxlIC5pbmRleCB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgd2lkdGg6IDQwcHg7XFxuICBtYXgtd2lkdGg6IDQwcHg7XFxufVxcbiNlZGl0YWJsZSB0YWJsZSB0aGVhZCB0aCB7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxufVxcbiNlZGl0YWJsZSAuZWRpdG9yIC5pbnB1dCxcXG4jZWRpdGFibGUgdGFibGUgdGJvZHkgdHIge1xcbiAgZm9udDogNDAwIDE1cHggQXJpYWwsIHNhbnMtc2VyaWY7XFxuICBjb2xvcjogIzQ0NDtcXG59XFxuI2VkaXRhYmxlIHRhYmxlIHRib2R5IHRyID4gdGQgPiBpbnB1dCxcXG4jZWRpdGFibGUgdGFibGUgdGJvZHkgdHIgPiB0ZCB7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcbiNlZGl0YWJsZSAuZWRpdG9yIC5pbnB1dCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG59XFxuI2VkaXRhYmxlOm5vdCguZWRpdGFibGUpIHRhYmxlIHRib2R5IHRyOmhvdmVyIHtcXG4gIGJhY2tncm91bmQ6IHJnYmEoMTUwLCAxNTAsIDE1MCwgMC4xKTtcXG59XFxuI2VkaXRhYmxlLmVkaXRhYmxlIHRhYmxlIHRkOmhvdmVyOjphZnRlciB7XFxuICBjb250ZW50OiBcXFwiIFxcXCI7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICByaWdodDogMDtcXG4gIGJvdHRvbTogMDtcXG4gIGxlZnQ6IDA7XFxuICBiYWNrZ3JvdW5kOiByZ2JhKDE1MCwgMTUwLCAxNTAsIDAuMSk7XFxufVxcbiNlZGl0YWJsZSB0YWJsZSB0ci5tb2RpZmllZCB7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIGJhY2tncm91bmQ6ICNmOWY5Zjk7XFxufVxcbiNlZGl0YWJsZSB0YWJsZSB0ci5zZWxlY3RlZCA+IHRkIHtcXG4gIGJhY2tncm91bmQ6ICNjY2Y7XFxufVxcbiNlZGl0YWJsZSB0YWJsZSB0ci5tb2RpZmllZCB0ZC5pbmRleDo6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCIqXFxcIjtcXG59XFxuXCIsIFwiXCIsIHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIi9ob21lL3N0ZGlvL2NvZGluZy9Qcm9qZWN0cy92dWUtaHhzL3Z1ZS1lZGktdGFibGUvc3JjL1RhYmxlLnRoZW1lLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiO0FBQUE7RUFDRSxvQkFBb0I7Q0FDckI7QUFFRDtFQUNFLGVBQWU7Q0FDaEI7O0FBRUQ7Ozs7OztFQU1FOztBQUVGLGFBQWE7QUFFYjtFQUNFLGNBQWM7Q0FDZjtBQUVEOztFQUVFLGFBQWE7Q0FDZDtBQUVEO0VBQ0UsdUJBQXVCO0VBQ3ZCLFlBQVk7RUFDWixnQkFBZ0I7Q0FDakI7QUFFRDtFQUNFLGtCQUFrQjtFQUNsQixpQkFBaUI7Q0FDbEI7QUFFRDs7RUFFRSxpQ0FBaUM7RUFDakMsWUFBWTtDQUNiO0FBRUQ7O0VBRUUsbUJBQW1CO0VBQ25CLHdCQUF3QjtFQUN4QixzQkFBc0I7RUFDdEIsb0JBQW9CO0NBQ3JCO0FBRUQ7RUFDRSxjQUFjO0VBQ2Qsd0JBQXdCO0VBQ3hCLG1CQUFtQjtFQUNuQixZQUFZO0VBQ1osYUFBYTtDQUNkO0FBRUQ7RUFDRSxxQ0FBcUM7Q0FDdEM7QUFFRDtFQUNFLGFBQWE7RUFDYixtQkFBbUI7RUFDbkIsT0FBTztFQUNQLFNBQVM7RUFDVCxVQUFVO0VBQ1YsUUFBUTtFQUNSLHFDQUFxQztDQUN0QztBQUVEO0VBQ0Usa0JBQWtCO0VBQ2xCLG9CQUFvQjtDQUNyQjtBQUVEO0VBQ0UsaUJBQWlCO0NBQ2xCO0FBRUQ7RUFDRSxhQUFhO0NBQ2RcIixcImZpbGVcIjpcIlRhYmxlLnRoZW1lLmNzc1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCIjZWRpdGFibGUgLmhlYWRlciB7XFxuICBiYWNrZ3JvdW5kOiAjZjFmMWYxO1xcbn1cXG5cXG4jZWRpdGFibGUgLmFjdGlvbnMge1xcbiAgbWFyZ2luOiAxMHB4IDA7XFxufVxcblxcbi8qXFxuI2VkaXRhYmxlIHRhYmxlIHRkLFxcbiNlZGl0YWJsZSB0YWJsZSB0aCB7XFxuICBib3JkZXItcmlnaHQ6IHNvbGlkIDFweCByZ2JhKDAsIDAsIDAsIDAuMSk7XFxuICBib3JkZXItYm90dG9tOiBzb2xpZCAxcHggcmdiYSgwLCAwLCAwLCAwLjEpO1xcbn1cXG4qL1xcblxcbi8qIGhlYWRlcnMgKi9cXG5cXG4jZWRpdGFibGUgdGFibGUge1xcbiAgb3V0bGluZTogbm9uZTtcXG59XFxuXFxuI2VkaXRhYmxlIHRhYmxlIHRoZWFkLFxcbiNlZGl0YWJsZSB0YWJsZSB0ciB7XFxuICBoZWlnaHQ6IDQwcHg7XFxufVxcblxcbiNlZGl0YWJsZSB0YWJsZSAuaW5kZXgge1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIHdpZHRoOiA0MHB4O1xcbiAgbWF4LXdpZHRoOiA0MHB4O1xcbn1cXG5cXG4jZWRpdGFibGUgdGFibGUgdGhlYWQgdGgge1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG5cXG4jZWRpdGFibGUgLmVkaXRvciAuaW5wdXQsXFxuI2VkaXRhYmxlIHRhYmxlIHRib2R5IHRyIHtcXG4gIGZvbnQ6IDQwMCAxNXB4IEFyaWFsLCBzYW5zLXNlcmlmO1xcbiAgY29sb3I6ICM0NDQ7XFxufVxcblxcbiNlZGl0YWJsZSB0YWJsZSB0Ym9keSB0ciA+IHRkID4gaW5wdXQsXFxuI2VkaXRhYmxlIHRhYmxlIHRib2R5IHRyID4gdGQge1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4jZWRpdGFibGUgLmVkaXRvciAuaW5wdXQge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxufVxcblxcbiNlZGl0YWJsZTpub3QoLmVkaXRhYmxlKSB0YWJsZSB0Ym9keSB0cjpob3ZlciB7XFxuICBiYWNrZ3JvdW5kOiByZ2JhKDE1MCwgMTUwLCAxNTAsIDAuMSk7XFxufVxcblxcbiNlZGl0YWJsZS5lZGl0YWJsZSB0YWJsZSB0ZDpob3Zlcjo6YWZ0ZXIge1xcbiAgY29udGVudDogXFxcIiBcXFwiO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAwO1xcbiAgcmlnaHQ6IDA7XFxuICBib3R0b206IDA7XFxuICBsZWZ0OiAwO1xcbiAgYmFja2dyb3VuZDogcmdiYSgxNTAsIDE1MCwgMTUwLCAwLjEpO1xcbn1cXG5cXG4jZWRpdGFibGUgdGFibGUgdHIubW9kaWZpZWQge1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBiYWNrZ3JvdW5kOiAjZjlmOWY5O1xcbn1cXG5cXG4jZWRpdGFibGUgdGFibGUgdHIuc2VsZWN0ZWQgPiB0ZCB7XFxuICBiYWNrZ3JvdW5kOiAjY2NmO1xcbn1cXG5cXG4jZWRpdGFibGUgdGFibGUgdHIubW9kaWZpZWQgdGQuaW5kZXg6OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiKlxcXCI7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuXG4vLyBleHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyP3NvdXJjZU1hcCEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi01YTcyMDBhNVwiLFwic2NvcGVkXCI6ZmFsc2UsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9zcmMvVGFibGUudGhlbWUuY3NzXG4vLyBtb2R1bGUgaWQgPSAyMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///21\n");

/***/ }),
/* 22 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\n/* row code */\n\n// Data handler\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  props: {\n    'headers': { type: Object, default: {} },\n    'rows': { type: Array, default: [] }\n  },\n  data: function data() {\n    return {\n      state: {\n        rows: this.transformRows(this.rows),\n        selection: {\n          rows: [],\n          lasti: null\n        },\n        historySet: [],\n        headers: this.headers\n      }\n    };\n  },\n\n  watch: {\n    rows: function rows(val, oldVal) {\n      this.rowsSet(val);\n    }\n  },\n  methods: {\n    rowsSet: function rowsSet(rows) {\n      this.state.historySet = [];\n      this.state.selection.rows = [];\n      this.state.rows = this.transformRows(rows);\n    },\n    transformRows: function transformRows(rows) {\n      return rows.map(function (row) {\n        return { data: clone(row) };\n      });\n    },\n    rowHasSelected: function rowHasSelected() {\n      return this.state.selection.rows.length > 0;\n    },\n    rowSelect: function rowSelect(rowi, val) {\n      // or ref?\n      if (val === false) {\n        this.state.selection.rows[rowi].selected = false;\n        this.state.selection.rows.splice(rowi, 1);\n        return;\n      }\n      this.state.selection.lasti = rowi;\n      this.state.selection.rows.push(this.state.rows[rowi]);\n      this.state.rows[rowi].selected = true;\n    },\n    rowSelectRange: function rowSelectRange(start, end) {\n      if (start > end) {\n        var _ref = [end, start];\n        start = _ref[0];\n        end = _ref[1];\n      }\n      for (var i = start; i <= end; i++) {\n        this.state.selection.rows.push(this.state.rows[i]);\n        this.state.rows[i].selected = true;\n      }\n    },\n    rowDeselectAll: function rowDeselectAll() {\n      console.log('Deselecting all');\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.state.selection.rows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var row = _step.value;\n\n          row.selected = false;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this.state.selection.rows = [];\n    },\n    rowAdd: function rowAdd() {\n      var changes = [];\n      var newRow = {};\n      for (var k in this.state.headers) {\n        newRow[k] = this.state.headers[k].default || '';\n      }\n      this.state.rows.push({ data: newRow, modified: true });\n      var rowi = this.state.rows.length - 1;\n      changes.push({ row: this.state.rows[rowi], index: rowi });\n      // this.changeSet.push({op: 'add', row: this.rows[ri].data})\n      this.state.historySet.push({ op: 'add', rows: changes });\n    },\n    rowDelete: function rowDelete(rowList) {\n      var changes = [];\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = rowList[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var row = _step2.value;\n\n          var oldRow = clone(row); // Save current\n          var vindex = this.state.rows.indexOf(row);\n          if (vindex === -1) continue;\n\n          changes.push({ row: row, index: vindex, oldRow: oldRow });\n          this.state.rows.splice(vindex, 1);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      this.state.historySet.push({ op: 'delete', rows: changes });\n      this.rowDeselectAll();\n      // XXX: If auto commit, commit changes here\n      /* if (this.autocommit === true) {\n        this.commitChanges()\n      } */\n    },\n\n    // Manipulators, mutators whatever?\n    rowChange: function rowChange(rowi, field, newValue) {\n      if (this.state.headers[field].readonly) {\n        return false;\n      }\n      if (this.state.rows[rowi].data[field] === newValue) {\n        return false;\n      }\n      var oldRow = clone(this.state.rows[rowi]); // Save current\n      this.state.rows[rowi].data[field] = newValue;\n      this.state.rows[rowi].modified = true; // Set as modified\n      this.state.historySet.push({\n        op: 'update',\n        rows: [{ row: this.state.rows[rowi], index: rowi, oldRow: oldRow }]\n      });\n    },\n\n    /**\n     * Experimental undo\n     */\n    // actionsUndo\n    changesUndo: function changesUndo() {\n      var change = this.state.historySet.pop();\n      var vindex;\n      switch (change.op) {\n        case 'add':\n          for (var i = change.rows.length - 1; i >= 0; i--) {\n            var changeItem = change.rows[i];\n            vindex = this.state.rows.indexOf(changeItem.row);\n            this.state.rows.splice(vindex, 1); // delete row\n          }\n          break;\n        case 'update':\n          for (var _i = change.rows.length - 1; _i >= 0; _i--) {\n            var _changeItem = change.rows[_i];\n            // vindex = this.rows.indexOf(change.row)\n            this.state.rows[_changeItem.index] = _changeItem.oldRow;\n          }\n          break;\n        case 'delete':\n          this.rowDeselectAll();\n          for (var _i2 = change.rows.length - 1; _i2 >= 0; _i2--) {\n            var _changeItem2 = change.rows[_i2];\n            this.state.rows.splice(_changeItem2.index, 0, _changeItem2.row);\n            this.state.rows[_changeItem2.index].selected = true;\n            this.state.selection.rows.push(this.state.rows[_changeItem2.index]);\n          }\n          break;\n      }\n    },\n\n    // actionsCommit\n    changesCommit: function changesCommit() {\n      // Flatten the changes\n      // build changeSet from history\n      var changeControl = new Map();\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = this.state.historySet[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var histItem = _step3.value;\n          var _iteratorNormalCompletion5 = true;\n          var _didIteratorError5 = false;\n          var _iteratorError5 = undefined;\n\n          try {\n            for (var _iterator5 = histItem.rows[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n              var data = _step5.value;\n\n              changeControl.set(data.row, histItem.op);\n            }\n          } catch (err) {\n            _didIteratorError5 = true;\n            _iteratorError5 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                _iterator5.return();\n              }\n            } finally {\n              if (_didIteratorError5) {\n                throw _iteratorError5;\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      var changeSet = [];\n\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = changeControl[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var _ref2 = _step4.value;\n\n          var _ref3 = _slicedToArray(_ref2, 2);\n\n          var row = _ref3[0];\n          var op = _ref3[1];\n\n          changeSet.push({ op: op, data: row.data });\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n\n      console.log('final:', changeSet);\n      this.$emit('commit', changeSet);\n    }\n  }\n});\n\nfunction clone(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///22\n");

/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    {\n      class: { editable: _vm.editable },\n      attrs: { id: \"editable\" },\n      on: { keydown: _vm.keyEvent }\n    },\n    [\n      _c(\"div\", { staticClass: \"actions\" }, [\n        _vm.editable\n          ? _c(\n              \"button\",\n              {\n                staticClass: \"primary-inv\",\n                attrs: { disabled: _vm.state.historySet.length == 0 },\n                on: { click: _vm.changesCommit }\n              },\n              [_vm._v(\"save\")]\n            )\n          : _vm._e(),\n        _vm._v(\" \"),\n        _vm.editable\n          ? _c(\n              \"button\",\n              {\n                on: {\n                  click: function($event) {\n                    _vm.rowAddEvent()\n                  }\n                }\n              },\n              [_vm._v(\"New\")]\n            )\n          : _vm._e(),\n        _vm._v(\" \"),\n        _vm.editable && _vm.rowHasSelected()\n          ? _c(\n              \"button\",\n              {\n                on: {\n                  click: function($event) {\n                    _vm.rowDelete(_vm.state.selection.rows)\n                  }\n                }\n              },\n              [_vm._v(\"Delete selected rows\")]\n            )\n          : _vm._e(),\n        _vm._v(\" \"),\n        _vm.state.historySet.length > 0\n          ? _c(\"button\", { on: { click: _vm.changesUndo } }, [_vm._v(\"< Undo\")])\n          : _vm._e()\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"table-container\" }, [\n        _c(\n          \"table\",\n          {\n            ref: \"table\",\n            class: {\n              scrollingTop: _vm.state.scroll.top > 0,\n              scrollingLeft: _vm.state.scroll.left > 0\n            },\n            attrs: { tabindex: \"1\" },\n            on: { scroll: _vm.scrollEvent }\n          },\n          [\n            _vm.editable\n              ? _c(\"div\", { ref: \"editor\", staticClass: \"editor\" }, [\n                  _vm.state.cursor.field != undefined &&\n                  _vm.state.headers[_vm.state.cursor.field].type == \"checkbox\"\n                    ? _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model\",\n                            value: _vm.state.cursor.value,\n                            expression: \"state.cursor.value\"\n                          }\n                        ],\n                        ref: \"input\",\n                        staticClass: \"input\",\n                        attrs: { type: \"checkbox\" },\n                        domProps: {\n                          checked: Array.isArray(_vm.state.cursor.value)\n                            ? _vm._i(_vm.state.cursor.value, null) > -1\n                            : _vm.state.cursor.value\n                        },\n                        on: {\n                          blur: _vm.editStop,\n                          change: function($event) {\n                            var $$a = _vm.state.cursor.value,\n                              $$el = $event.target,\n                              $$c = $$el.checked ? true : false\n                            if (Array.isArray($$a)) {\n                              var $$v = null,\n                                $$i = _vm._i($$a, $$v)\n                              if ($$el.checked) {\n                                $$i < 0 &&\n                                  (_vm.state.cursor.value = $$a.concat([$$v]))\n                              } else {\n                                $$i > -1 &&\n                                  (_vm.state.cursor.value = $$a\n                                    .slice(0, $$i)\n                                    .concat($$a.slice($$i + 1)))\n                              }\n                            } else {\n                              _vm.$set(_vm.state.cursor, \"value\", $$c)\n                            }\n                          }\n                        }\n                      })\n                    : (_vm.state.cursor.field\n                        ? _vm.state.headers[_vm.state.cursor.field].type\n                        : \"\") === \"checkbox\"\n                      ? _c(\"input\", {\n                          directives: [\n                            {\n                              name: \"model\",\n                              rawName: \"v-model\",\n                              value: _vm.state.cursor.value,\n                              expression: \"state.cursor.value\"\n                            }\n                          ],\n                          ref: \"input\",\n                          staticClass: \"input\",\n                          attrs: { type: \"checkbox\" },\n                          domProps: {\n                            checked: Array.isArray(_vm.state.cursor.value)\n                              ? _vm._i(_vm.state.cursor.value, null) > -1\n                              : _vm.state.cursor.value\n                          },\n                          on: {\n                            blur: _vm.editStop,\n                            change: function($event) {\n                              var $$a = _vm.state.cursor.value,\n                                $$el = $event.target,\n                                $$c = $$el.checked ? true : false\n                              if (Array.isArray($$a)) {\n                                var $$v = null,\n                                  $$i = _vm._i($$a, $$v)\n                                if ($$el.checked) {\n                                  $$i < 0 &&\n                                    (_vm.state.cursor.value = $$a.concat([$$v]))\n                                } else {\n                                  $$i > -1 &&\n                                    (_vm.state.cursor.value = $$a\n                                      .slice(0, $$i)\n                                      .concat($$a.slice($$i + 1)))\n                                }\n                              } else {\n                                _vm.$set(_vm.state.cursor, \"value\", $$c)\n                              }\n                            }\n                          }\n                        })\n                      : (_vm.state.cursor.field\n                          ? _vm.state.headers[_vm.state.cursor.field].type\n                          : \"\") === \"radio\"\n                        ? _c(\"input\", {\n                            directives: [\n                              {\n                                name: \"model\",\n                                rawName: \"v-model\",\n                                value: _vm.state.cursor.value,\n                                expression: \"state.cursor.value\"\n                              }\n                            ],\n                            ref: \"input\",\n                            staticClass: \"input\",\n                            attrs: { type: \"radio\" },\n                            domProps: {\n                              checked: _vm._q(_vm.state.cursor.value, null)\n                            },\n                            on: {\n                              blur: _vm.editStop,\n                              change: function($event) {\n                                _vm.$set(_vm.state.cursor, \"value\", null)\n                              }\n                            }\n                          })\n                        : _c(\"input\", {\n                            directives: [\n                              {\n                                name: \"model\",\n                                rawName: \"v-model\",\n                                value: _vm.state.cursor.value,\n                                expression: \"state.cursor.value\"\n                              }\n                            ],\n                            ref: \"input\",\n                            staticClass: \"input\",\n                            attrs: {\n                              type: _vm.state.cursor.field\n                                ? _vm.state.headers[_vm.state.cursor.field].type\n                                : \"\"\n                            },\n                            domProps: { value: _vm.state.cursor.value },\n                            on: {\n                              blur: _vm.editStop,\n                              input: function($event) {\n                                if ($event.target.composing) {\n                                  return\n                                }\n                                _vm.$set(\n                                  _vm.state.cursor,\n                                  \"value\",\n                                  $event.target.value\n                                )\n                              }\n                            }\n                          })\n                ])\n              : _vm._e(),\n            _vm._v(\" \"),\n            _c(\"thead\", { ref: \"thead\" }, [\n              _c(\n                \"tr\",\n                [\n                  _c(\"th\", { staticClass: \"index header\" }, [_vm._v(\"#\")]),\n                  _vm._v(\" \"),\n                  _vm._l(_vm.headers, function(header, k) {\n                    return header.visible != false\n                      ? _c(\"th\", { key: k, staticClass: \"header\" }, [\n                          _vm._v(\n                            \"\\n            \" +\n                              _vm._s(\n                                header.text == undefined ? k : header.text\n                              ) +\n                              \"\\n          \"\n                          )\n                        ])\n                      : _vm._e()\n                  })\n                ],\n                2\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\n              \"tbody\",\n              { ref: \"tbody\" },\n              _vm._l(_vm.state.rows, function(row, rowi) {\n                return _c(\n                  \"tr\",\n                  {\n                    key: rowi,\n                    class: { modified: row.modified, selected: row.selected }\n                  },\n                  [\n                    _c(\n                      \"td\",\n                      {\n                        class: {\n                          header: true,\n                          index: true,\n                          modified: row.modified,\n                          selected: row.selected\n                        },\n                        on: {\n                          click: function($event) {\n                            _vm.rowClick($event, rowi)\n                          }\n                        }\n                      },\n                      [_vm._v(\"\\n            \" + _vm._s(rowi) + \"\\n          \")]\n                    ),\n                    _vm._v(\" \"),\n                    _vm._l(_vm.headers, function(header, field, coli) {\n                      return header.visible != false\n                        ? _c(\n                            \"td\",\n                            {\n                              key: field,\n                              class: {\n                                active:\n                                  _vm.state.cursor.rowi == rowi &&\n                                  _vm.state.cursor.coli == coli\n                              },\n                              attrs: { \"data-field\": field },\n                              on: {\n                                click: function($event) {\n                                  _vm.cellClick($event, rowi, coli)\n                                },\n                                dblclick: function($event) {\n                                  _vm.cellDblClick($event, rowi, coli)\n                                }\n                              }\n                            },\n                            [\n                              !(\n                                _vm.state.cursor.editing &&\n                                _vm.state.cursor.rowi == rowi &&\n                                _vm.state.cursor.field == field\n                              )\n                                ? [\n                                    header.type == \"checkbox\"\n                                      ? [\n                                          _c(\"input\", {\n                                            class: {\n                                              readonly:\n                                                _vm.state.headers[field]\n                                                  .readonly || !_vm.editable\n                                            },\n                                            attrs: { type: \"checkbox\" },\n                                            domProps: {\n                                              checked: row.data[field]\n                                            },\n                                            on: {\n                                              change: function($event) {\n                                                _vm.cellChange(\n                                                  rowi,\n                                                  field,\n                                                  $event.target.checked\n                                                )\n                                              }\n                                            }\n                                          })\n                                        ]\n                                      : header.type != undefined\n                                        ? [\n                                            _c(\"input\", {\n                                              class: {\n                                                readonly:\n                                                  _vm.state.headers[field]\n                                                    .readonly || !_vm.editable\n                                              },\n                                              attrs: {\n                                                type: header.type,\n                                                readonly: \"\"\n                                              },\n                                              domProps: {\n                                                value: row.data[field]\n                                              }\n                                            })\n                                          ]\n                                        : [\n                                            _vm._v(\n                                              \"\\n                \" +\n                                                _vm._s(row.data[field]) +\n                                                \"\\n              \"\n                                            )\n                                          ]\n                                  ]\n                                : _vm._e()\n                            ],\n                            2\n                          )\n                        : _vm._e()\n                    })\n                  ],\n                  2\n                )\n              })\n            )\n          ]\n        )\n      ])\n    ]\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__[\"a\"] = (esExports);\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n    require(\"vue-hot-reload-api\")      .rerender(\"data-v-5a7200a5\", esExports)\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///23\n");

/***/ }),
/* 24 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__editable_vue__ = __webpack_require__(25);\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return __WEBPACK_IMPORTED_MODULE_0__editable_vue__[\"a\"]; });\n\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvb2xkL2luZGV4LmpzP2E1YWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSIsImZpbGUiOiIyNC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBFZGl0YWJsZSBmcm9tICcuL2VkaXRhYmxlLnZ1ZSdcblxuZXhwb3J0IHtFZGl0YWJsZX1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9vbGQvaW5kZXguanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///24\n");

/***/ }),
/* 25 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_editable_vue_js__ = __webpack_require__(8);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_94de70b6_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_bustCache_editable_vue__ = __webpack_require__(28);\nvar disposed = false\nfunction injectStyle (ssrContext) {\n  if (disposed) return\n  __webpack_require__(26)\n}\nvar normalizeComponent = __webpack_require__(2)\n/* script */\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-94de70b6\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_editable_vue_js__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_94de70b6_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_bustCache_editable_vue__[\"a\" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\nComponent.options.__file = \"src/old/editable.vue\"\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-94de70b6\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-94de70b6\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvb2xkL2VkaXRhYmxlLnZ1ZT9iOTkwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQSx3QkFBNkw7QUFDN0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN1SztBQUN2SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsWUFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7O0FBRUQiLCJmaWxlIjoiMjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZGlzcG9zZWQgPSBmYWxzZVxuZnVuY3Rpb24gaW5qZWN0U3R5bGUgKHNzckNvbnRleHQpIHtcbiAgaWYgKGRpc3Bvc2VkKSByZXR1cm5cbiAgcmVxdWlyZShcIiEhdnVlLXN0eWxlLWxvYWRlciFjc3MtbG9hZGVyP3NvdXJjZU1hcCEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXg/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTk0ZGU3MGI2XFxcIixcXFwic2NvcGVkXFxcIjp0cnVlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSFzYXNzLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zdHlsZXMmaW5kZXg9MCZidXN0Q2FjaGUhLi9lZGl0YWJsZS52dWVcIilcbn1cbnZhciBub3JtYWxpemVDb21wb25lbnQgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKVxuLyogc2NyaXB0ICovXG5leHBvcnQgKiBmcm9tIFwiISFiYWJlbC1sb2FkZXIhLi9lZGl0YWJsZS52dWUuanNcIlxuaW1wb3J0IF9fdnVlX3NjcmlwdF9fIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuL2VkaXRhYmxlLnZ1ZS5qc1wiLyogdGVtcGxhdGUgKi9cbmltcG9ydCBfX3Z1ZV90ZW1wbGF0ZV9fIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTk0ZGU3MGI2XFxcIixcXFwiaGFzU2NvcGVkXFxcIjp0cnVlLFxcXCJidWJsZVxcXCI6e1xcXCJ0cmFuc2Zvcm1zXFxcIjp7fX19IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAmYnVzdENhY2hlIS4vZWRpdGFibGUudnVlXCJcbi8qIHRlbXBsYXRlIGZ1bmN0aW9uYWwgKi9cbnZhciBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18gPSBmYWxzZVxuLyogc3R5bGVzICovXG52YXIgX192dWVfc3R5bGVzX18gPSBpbmplY3RTdHlsZVxuLyogc2NvcGVJZCAqL1xudmFyIF9fdnVlX3Njb3BlSWRfXyA9IFwiZGF0YS12LTk0ZGU3MGI2XCJcbi8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xudmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSBudWxsXG52YXIgQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBfX3Z1ZV9zY3JpcHRfXyxcbiAgX192dWVfdGVtcGxhdGVfXyxcbiAgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fLFxuICBfX3Z1ZV9zdHlsZXNfXyxcbiAgX192dWVfc2NvcGVJZF9fLFxuICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fXG4pXG5Db21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInNyYy9vbGQvZWRpdGFibGUudnVlXCJcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHsoZnVuY3Rpb24gKCkge1xuICB2YXIgaG90QVBJID0gcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKVxuICBob3RBUEkuaW5zdGFsbChyZXF1aXJlKFwidnVlXCIpLCBmYWxzZSlcbiAgaWYgKCFob3RBUEkuY29tcGF0aWJsZSkgcmV0dXJuXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICBob3RBUEkuY3JlYXRlUmVjb3JkKFwiZGF0YS12LTk0ZGU3MGI2XCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9IGVsc2Uge1xuICAgIGhvdEFQSS5yZWxvYWQoXCJkYXRhLXYtOTRkZTcwYjZcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH1cbiAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgZGlzcG9zZWQgPSB0cnVlXG4gIH0pXG59KSgpfVxuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvb2xkL2VkaXRhYmxlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///25\n");

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(27);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(1)(\"55818288\", content, false);\n// Hot Module Replacement\nif(false) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-94de70b6\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/sass-loader/lib/loader.js!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0&bustCache!./editable.vue\", function() {\n     var newContent = require(\"!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-94de70b6\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/sass-loader/lib/loader.js!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0&bustCache!./editable.vue\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvb2xkL2VkaXRhYmxlLnZ1ZT9mYzkxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0Esb0NBQXVOO0FBQ3ZOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvSUFBb0ksa0ZBQWtGO0FBQ3ROLDZJQUE2SSxrRkFBa0Y7QUFDL047QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsZ0NBQWdDLFVBQVUsRUFBRTtBQUM1QyIsImZpbGUiOiIyNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9zb3VyY2VNYXAhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi05NGRlNzBiNlxcXCIsXFxcInNjb3BlZFxcXCI6dHJ1ZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAmYnVzdENhY2hlIS4vZWRpdGFibGUudnVlXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikoXCI1NTgxODI4OFwiLCBjb250ZW50LCBmYWxzZSk7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG4gLy8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3NcbiBpZighY29udGVudC5sb2NhbHMpIHtcbiAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9zb3VyY2VNYXAhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi05NGRlNzBiNlxcXCIsXFxcInNjb3BlZFxcXCI6dHJ1ZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAmYnVzdENhY2hlIS4vZWRpdGFibGUudnVlXCIsIGZ1bmN0aW9uKCkge1xuICAgICB2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzP3NvdXJjZU1hcCEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTk0ZGU3MGI2XFxcIixcXFwic2NvcGVkXFxcIjp0cnVlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCZidXN0Q2FjaGUhLi9lZGl0YWJsZS52dWVcIik7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIhLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlcj9zb3VyY2VNYXAhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXI/e1widnVlXCI6dHJ1ZSxcImlkXCI6XCJkYXRhLXYtOTRkZTcwYjZcIixcInNjb3BlZFwiOnRydWUsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wJmJ1c3RDYWNoZSEuL3NyYy9vbGQvZWRpdGFibGUudnVlXG4vLyBtb2R1bGUgaWQgPSAyNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///26\n");

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(0)(true);\n// imports\n\n\n// module\nexports.push([module.i, \"\\n.editable[data-v-94de70b6] {\\n  position: relative;\\n  /* table .edit:focus {\\n\\tborder: solid 2px $editable-cursor-color;\\n} */\\n}\\n.editable .table-container[data-v-94de70b6] {\\n    width: 100%;\\n    overflow: auto;\\n}\\n.editable .actions[data-v-94de70b6] {\\n    margin: 10px 0;\\n}\\n.editable table[data-v-94de70b6] {\\n    width: 100%;\\n    border-collapse: separate;\\n    border-spacing: 0;\\n}\\n.editable table .header[data-v-94de70b6] {\\n    text-align: center;\\n    cursor: default;\\n    background: #eee;\\n    color: #333;\\n}\\n.editable table .header[data-v-94de70b6]:first-child {\\n    width: 40px !important;\\n    max-width: 40px;\\n}\\n.editable table .header.plus[data-v-94de70b6] {\\n    cursor: pointer;\\n    font-weight: bold;\\n    background: #ef5544;\\n    color: #fff;\\n}\\n.editable table .header.plus[data-v-94de70b6]:hover {\\n    background: #ef6554;\\n    color: #fff;\\n}\\n.editable table thead[data-v-94de70b6],\\n  .editable table tbody[data-v-94de70b6],\\n  .editable table tfoot[data-v-94de70b6] {\\n    display: flex;\\n    flex-flow: column;\\n    position: relative;\\n}\\n.editable table thead[data-v-94de70b6],\\n  .editable table tfoot[data-v-94de70b6] {\\n    padding-right: 1.05em;\\n    z-index: 1;\\n}\\n.editable table td[data-v-94de70b6],\\n  .editable table th[data-v-94de70b6] {\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    width: 200px;\\n    flex-grow: 1;\\n    border: none;\\n    height: 40px;\\n}\\n.editable table thead > tr > th[data-v-94de70b6] {\\n    text-overflow: ellipsis;\\n    white-space: nowrap;\\n    overflow: hidden;\\n}\\n.editable table tr[data-v-94de70b6] {\\n    display: flex;\\n    flex-flow: row;\\n    flex-shrink: 0;\\n}\\n.editable table tbody[data-v-94de70b6] {\\n    max-height: 50vh;\\n    overflow-y: scroll;\\n}\\n.editable table tbody > tr > td[data-v-94de70b6] {\\n    position: relative;\\n    margin: 0;\\n    padding: 0;\\n    outline: none;\\n    text-align: center;\\n    background: transparent;\\n    border: none;\\n}\\n.editable table .edit[data-v-94de70b6] {\\n    line-height: 35px;\\n    padding: 0;\\n    outline: none;\\n    border: none;\\n    resize: none;\\n    text-align: inherit;\\n    width: 100%;\\n    background: transparent;\\n    margin: 0;\\n    font-weight: inherit;\\n}\\n.editable table .edit[data-v-94de70b6]::placeholder {\\n    opacity: 0.2;\\n    font-weight: normal;\\n}\\n.editable table .edit[readonly][data-v-94de70b6]::selection {\\n    /* background: transparent;\\n\\t\\tuser-select:none;\\n    color: inherit; */\\n}\\n.editable table tr.modified > td[data-v-94de70b6] {\\n    font-weight: bold;\\n}\\n.editable table tr.modified > td.header[data-v-94de70b6]::before {\\n    content: \\\"*\\\";\\n}\\n.editable table tr.modified > td[data-v-94de70b6]:not(.header) {\\n    background: rgba(155, 180, 155, 0.1);\\n}\\n.editable table:not(.editable) > tbody > tr[data-v-94de70b6] {\\n    cursor: pointer;\\n}\\n.editable table:not(.editable) > tbody > tr[data-v-94de70b6]:hover {\\n    background: #efefef;\\n}\\n.editable table:not(.editable) > tbody > tr > td > .edit[data-v-94de70b6] {\\n    pointer-events: none;\\n}\\n.editable table.editable tr > td[data-v-94de70b6]:hover {\\n    background: #efefef;\\n    color: #000;\\n}\\n.editable table.editable > tbody > tr > td.selected[data-v-94de70b6] {\\n    background: #ccf;\\n}\\n.editable #selection[data-v-94de70b6] {\\n    box-sizing: border-box;\\n    display: none;\\n    position: absolute;\\n    border: solid 2px #ef5544;\\n    pointer-events: none;\\n    /* .handle {\\n\\t\\tpointer-events:all;\\n\\t\\tposition:absolute;\\n\\t\\tcontent:\\\"&nbsp;\\\";\\n\\t\\tbottom:-4px;\\n\\t\\tright:-4px;\\n\\t\\twidth:8px;\\n\\t\\theight:8px;\\n\\t\\tcursor:grab;\\n\\t\\tbackground: $editable-cursor-color;\\n\\t\\tborder: solid 2x #F00;\\n\\t} */\\n}\\n.editable #selection.active[data-v-94de70b6] {\\n    display: block;\\n}\\n\", \"\", {\"version\":3,\"sources\":[\"/home/stdio/coding/Projects/vue-hxs/vue-edi-table/src/old/editable.vue\"],\"names\":[],\"mappings\":\";AAAA;EACE,mBAAmB;EACnB;;IAEE;CAAE;AACJ;IACE,YAAY;IACZ,eAAe;CAAE;AACnB;IACE,eAAe;CAAE;AACnB;IACE,YAAY;IACZ,0BAA0B;IAC1B,kBAAkB;CAAE;AACtB;IACE,mBAAmB;IACnB,gBAAgB;IAChB,iBAAiB;IACjB,YAAY;CAAE;AAChB;IACE,uBAAuB;IACvB,gBAAgB;CAAE;AACpB;IACE,gBAAgB;IAChB,kBAAkB;IAClB,oBAAoB;IACpB,YAAY;CAAE;AAChB;IACE,oBAAoB;IACpB,YAAY;CAAE;AAChB;;;IAGE,cAAc;IACd,kBAAkB;IAClB,mBAAmB;CAAE;AACvB;;IAEE,sBAAsB;IACtB,WAAW;CAAE;AACf;;IAEE,cAAc;IACd,oBAAoB;IACpB,wBAAwB;IACxB,aAAa;IACb,aAAa;IACb,aAAa;IACb,aAAa;CAAE;AACjB;IACE,wBAAwB;IACxB,oBAAoB;IACpB,iBAAiB;CAAE;AACrB;IACE,cAAc;IACd,eAAe;IACf,eAAe;CAAE;AACnB;IACE,iBAAiB;IACjB,mBAAmB;CAAE;AACvB;IACE,mBAAmB;IACnB,UAAU;IACV,WAAW;IACX,cAAc;IACd,mBAAmB;IACnB,wBAAwB;IACxB,aAAa;CAAE;AACjB;IACE,kBAAkB;IAClB,WAAW;IACX,cAAc;IACd,aAAa;IACb,aAAa;IACb,oBAAoB;IACpB,YAAY;IACZ,wBAAwB;IACxB,UAAU;IACV,qBAAqB;CAAE;AACzB;IACE,aAAa;IACb,oBAAoB;CAAE;AACxB;IACE;;sBAEkB;CAAE;AACtB;IACE,kBAAkB;CAAE;AACtB;IACE,aAAa;CAAE;AACjB;IACE,qCAAqC;CAAE;AACzC;IACE,gBAAgB;CAAE;AACpB;IACE,oBAAoB;CAAE;AACxB;IACE,qBAAqB;CAAE;AACzB;IACE,oBAAoB;IACpB,YAAY;CAAE;AAChB;IACE,iBAAiB;CAAE;AACrB;IACE,uBAAuB;IACvB,cAAc;IACd,mBAAmB;IACnB,0BAA0B;IAC1B,qBAAqB;IACrB;;;;;;;;;;;KAWC;CAAE;AACL;IACE,eAAe;CAAE\",\"file\":\"editable.vue\",\"sourcesContent\":[\".editable {\\n  position: relative;\\n  /* table .edit:focus {\\n\\tborder: solid 2px $editable-cursor-color;\\n} */ }\\n  .editable .table-container {\\n    width: 100%;\\n    overflow: auto; }\\n  .editable .actions {\\n    margin: 10px 0; }\\n  .editable table {\\n    width: 100%;\\n    border-collapse: separate;\\n    border-spacing: 0; }\\n  .editable table .header {\\n    text-align: center;\\n    cursor: default;\\n    background: #eee;\\n    color: #333; }\\n  .editable table .header:first-child {\\n    width: 40px !important;\\n    max-width: 40px; }\\n  .editable table .header.plus {\\n    cursor: pointer;\\n    font-weight: bold;\\n    background: #ef5544;\\n    color: #fff; }\\n  .editable table .header.plus:hover {\\n    background: #ef6554;\\n    color: #fff; }\\n  .editable table thead,\\n  .editable table tbody,\\n  .editable table tfoot {\\n    display: flex;\\n    flex-flow: column;\\n    position: relative; }\\n  .editable table thead,\\n  .editable table tfoot {\\n    padding-right: 1.05em;\\n    z-index: 1; }\\n  .editable table td,\\n  .editable table th {\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    width: 200px;\\n    flex-grow: 1;\\n    border: none;\\n    height: 40px; }\\n  .editable table thead > tr > th {\\n    text-overflow: ellipsis;\\n    white-space: nowrap;\\n    overflow: hidden; }\\n  .editable table tr {\\n    display: flex;\\n    flex-flow: row;\\n    flex-shrink: 0; }\\n  .editable table tbody {\\n    max-height: 50vh;\\n    overflow-y: scroll; }\\n  .editable table tbody > tr > td {\\n    position: relative;\\n    margin: 0;\\n    padding: 0;\\n    outline: none;\\n    text-align: center;\\n    background: transparent;\\n    border: none; }\\n  .editable table .edit {\\n    line-height: 35px;\\n    padding: 0;\\n    outline: none;\\n    border: none;\\n    resize: none;\\n    text-align: inherit;\\n    width: 100%;\\n    background: transparent;\\n    margin: 0;\\n    font-weight: inherit; }\\n  .editable table .edit::placeholder {\\n    opacity: 0.2;\\n    font-weight: normal; }\\n  .editable table .edit[readonly]::selection {\\n    /* background: transparent;\\n\\t\\tuser-select:none;\\n    color: inherit; */ }\\n  .editable table tr.modified > td {\\n    font-weight: bold; }\\n  .editable table tr.modified > td.header::before {\\n    content: \\\"*\\\"; }\\n  .editable table tr.modified > td:not(.header) {\\n    background: rgba(155, 180, 155, 0.1); }\\n  .editable table:not(.editable) > tbody > tr {\\n    cursor: pointer; }\\n  .editable table:not(.editable) > tbody > tr:hover {\\n    background: #efefef; }\\n  .editable table:not(.editable) > tbody > tr > td > .edit {\\n    pointer-events: none; }\\n  .editable table.editable tr > td:hover {\\n    background: #efefef;\\n    color: #000; }\\n  .editable table.editable > tbody > tr > td.selected {\\n    background: #ccf; }\\n  .editable #selection {\\n    box-sizing: border-box;\\n    display: none;\\n    position: absolute;\\n    border: solid 2px #ef5544;\\n    pointer-events: none;\\n    /* .handle {\\n\\t\\tpointer-events:all;\\n\\t\\tposition:absolute;\\n\\t\\tcontent:\\\"&nbsp;\\\";\\n\\t\\tbottom:-4px;\\n\\t\\tright:-4px;\\n\\t\\twidth:8px;\\n\\t\\theight:8px;\\n\\t\\tcursor:grab;\\n\\t\\tbackground: $editable-cursor-color;\\n\\t\\tborder: solid 2x #F00;\\n\\t} */ }\\n  .editable #selection.active {\\n    display: block; }\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///27\n");

/***/ }),
/* 28 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    { staticClass: \"editable\" },\n    [\n      _vm._l(_vm.columns, function(c, k) {\n        return c.list\n          ? _c(\n              \"datalist\",\n              { key: k, attrs: { id: k + \"dtlist\" } },\n              _vm._l(c.list, function(it) {\n                return _c(\"option\", { key: it, domProps: { value: it } })\n              })\n            )\n          : _vm._e()\n      }),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"actions\" }, [\n        _vm.editable\n          ? _c(\n              \"button\",\n              {\n                staticClass: \"primary-inv\",\n                attrs: { disabled: _vm.historySet.length == 0 },\n                on: { click: _vm.commitChanges }\n              },\n              [_vm._v(\"save\")]\n            )\n          : _vm._e(),\n        _vm._v(\" \"),\n        _vm.editable && _vm.selectedRows.length > 0\n          ? _c(\n              \"button\",\n              {\n                on: {\n                  click: function($event) {\n                    _vm.rowDelete(_vm.selectedRows)\n                  }\n                }\n              },\n              [_vm._v(\"Delete selected rows\")]\n            )\n          : _vm._e(),\n        _vm._v(\" \"),\n        _vm.historySet.length > 0\n          ? _c(\n              \"button\",\n              {\n                on: {\n                  click: function($event) {\n                    _vm.undoLast()\n                  }\n                }\n              },\n              [_vm._v(\"< Undo\")]\n            )\n          : _vm._e()\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"table-container\" }, [\n        _c(\"table\", { ref: \"table\", class: { editable: _vm.editable } }, [\n          _c(\"thead\", [\n            _c(\n              \"tr\",\n              [\n                _c(\"th\", { staticClass: \"header\" }, [_vm._v(\"#\")]),\n                _vm._v(\" \"),\n                _vm._l(_vm.columns, function(c, k) {\n                  return _c(\n                    \"th\",\n                    { key: k, staticClass: \"header\", style: c.style },\n                    [_vm._v(_vm._s(c.header ? c.header : k) + \"\\n          \")]\n                  )\n                })\n              ],\n              2\n            )\n          ]),\n          _vm._v(\" \"),\n          _c(\n            \"tbody\",\n            [\n              _vm._l(_vm.rows, function(row, ri) {\n                return _c(\n                  \"tr\",\n                  {\n                    key: ri,\n                    class: { modified: row.modified },\n                    on: { click: _vm.rowClickEvent }\n                  },\n                  [\n                    _c(\n                      \"td\",\n                      {\n                        staticClass: \"header\",\n                        attrs: { contextmenu: \"mymenu\" },\n                        on: { click: _vm.rowSelect }\n                      },\n                      [_vm._v(_vm._s(ri))]\n                    ),\n                    _vm._v(\" \"),\n                    _vm._l(_vm.columns, function(c, k) {\n                      return _c(\n                        \"td\",\n                        {\n                          key: k,\n                          style: c.style,\n                          on: {\n                            mouseover: _vm.cellHoverEvent,\n                            mousedown: _vm.cellDownEvent,\n                            dragstart: function(e) {\n                              return e.preventDefault()\n                            }\n                          }\n                        },\n                        [\n                          c.type == \"textarea\"\n                            ? _c(\n                                \"textarea\",\n                                {\n                                  staticClass: \"edit\",\n                                  attrs: { readonly: \"\" },\n                                  on: {\n                                    change: function($event) {\n                                      _vm.cellChangeEvent($event, ri, k)\n                                    },\n                                    focus: _vm.cellFocusEvent,\n                                    blur: _vm.cellBlurEvent\n                                  }\n                                },\n                                [\n                                  _vm._v(\n                                    \"              \" +\n                                      _vm._s(row.data[k]) +\n                                      \"\\n            \"\n                                  )\n                                ]\n                              )\n                            : c.type == \"checkbox\"\n                              ? _c(\"input\", {\n                                  staticClass: \"edit\",\n                                  attrs: { type: c.type, readonly: \"\" },\n                                  domProps: { checked: row.data[k] },\n                                  on: {\n                                    change: function($event) {\n                                      _vm.cellChangeEvent($event, ri, k)\n                                    },\n                                    focus: _vm.cellFocusEvent,\n                                    blur: _vm.cellBlurEvent\n                                  }\n                                })\n                              : _c(\"input\", {\n                                  staticClass: \"edit\",\n                                  attrs: {\n                                    type: c.type,\n                                    placeholder: c.placeholder,\n                                    list: k + \"dtlist\",\n                                    readonly: \"\"\n                                  },\n                                  domProps: { value: row.data[k] },\n                                  on: {\n                                    change: function($event) {\n                                      _vm.cellChangeEvent($event, ri, k)\n                                    },\n                                    focus: _vm.cellFocusEvent,\n                                    blur: _vm.cellBlurEvent\n                                  }\n                                })\n                        ]\n                      )\n                    })\n                  ],\n                  2\n                )\n              }),\n              _vm._v(\" \"),\n              _vm.editable\n                ? _c(\n                    \"tr\",\n                    [\n                      _c(\n                        \"td\",\n                        {\n                          staticClass: \"header plus\",\n                          on: { click: _vm.rowAdd }\n                        },\n                        [_vm._v(\"+\")]\n                      ),\n                      _vm._v(\" \"),\n                      _vm._l(_vm.columns, function(c, k) {\n                        return _c(\n                          \"td\",\n                          {\n                            key: k,\n                            style: c.style,\n                            on: {\n                              mouseover: _vm.cellHoverEvent,\n                              mousedown: _vm.cellDownEvent\n                            }\n                          },\n                          [\n                            c.type == \"textarea\"\n                              ? _c(\n                                  \"textarea\",\n                                  {\n                                    staticClass: \"edit\",\n                                    attrs: { readonly: \"\" },\n                                    on: {\n                                      change: function($event) {\n                                        _vm.cellNewChange($event, k)\n                                      },\n                                      focus: _vm.cellFocusEvent,\n                                      blur: _vm.cellBlurEvent\n                                    }\n                                  },\n                                  [_vm._v(\" \" + _vm._s(_vm.newRow[k]))]\n                                )\n                              : c.type == \"checkbox\"\n                                ? _c(\"input\", {\n                                    staticClass: \"edit\",\n                                    attrs: { type: c.type },\n                                    domProps: { checked: _vm.newRow[k] },\n                                    on: {\n                                      change: function($event) {\n                                        _vm.cellNewChange($event, k)\n                                      },\n                                      focus: _vm.cellFocusEvent,\n                                      blur: _vm.cellBlurEvent\n                                    }\n                                  })\n                                : _c(\"input\", {\n                                    staticClass: \"edit\",\n                                    attrs: {\n                                      type: c.type,\n                                      list: k + \"dtlist\",\n                                      readonly: \"\"\n                                    },\n                                    domProps: { value: _vm.newRow[k] },\n                                    on: {\n                                      change: function($event) {\n                                        _vm.cellNewChange($event, k)\n                                      },\n                                      focus: _vm.cellFocusEvent,\n                                      blur: _vm.cellBlurEvent\n                                    }\n                                  })\n                          ]\n                        )\n                      })\n                    ],\n                    2\n                  )\n                : _vm._e(),\n              _vm._v(\" \"),\n              _c(\"div\", { ref: \"selection\", attrs: { id: \"selection\" } }, [\n                _c(\"div\", { staticClass: \"handle\" })\n              ])\n            ],\n            2\n          )\n        ])\n      ]),\n      _vm._v(\" \"),\n      _vm.debug\n        ? _c(\n            \"div\",\n            { staticStyle: { color: \"rgba(0,0,0,0.2)\", position: \"relative\" } },\n            [\n              _vm._v(\n                \"\\n    DEBUG\\n    EditMode: \" + _vm._s(_vm.editMode) + \"\\n    \"\n              ),\n              _c(\"div\", [_vm._v(\"Current: \" + _vm._s(_vm.currentValue))]),\n              _vm._v(\" \"),\n              _c(\"div\", [_vm._v(\"Hover: \" + _vm._s(_vm.hoverValue))]),\n              _vm._v(\"\\n\\n    History set:\\n    \"),\n              _c(\"div\", [_vm._v(_vm._s(_vm.historySet))])\n            ]\n          )\n        : _vm._e()\n    ],\n    2\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__[\"a\"] = (esExports);\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n    require(\"vue-hot-reload-api\")      .rerender(\"data-v-94de70b6\", esExports)\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///28\n");

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports=function(t){function n(e){if(r[e])return r[e].exports;var i=r[e]={i:e,l:!1,exports:{}};return t[e].call(i.exports,i,i.exports,n),i.l=!0,i.exports}var r={};return n.m=t,n.c=r,n.d=function(t,r,e){n.o(t,r)||Object.defineProperty(t,r,{configurable:!1,enumerable:!0,get:e})},n.n=function(t){var r=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(r,\"a\",r),r},n.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},n.p=\"/dist\",n(n.s=6)}([function(t,n){function r(t,n){var r=t[1]||\"\",i=t[3];if(!i)return r;if(n&&\"function\"==typeof btoa){var u=e(i);return[r].concat(i.sources.map(function(t){return\"/*# sourceURL=\"+i.sourceRoot+t+\" */\"})).concat([u]).join(\"\\n\")}return[r].join(\"\\n\")}function e(t){return\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(t))))+\" */\"}t.exports=function(t){var n=[];return n.toString=function(){return this.map(function(n){var e=r(n,t);return n[2]?\"@media \"+n[2]+\"{\"+e+\"}\":e}).join(\"\")},n.i=function(t,r){\"string\"==typeof t&&(t=[[null,t,\"\"]]);for(var e={},i=0;i<this.length;i++){var u=this[i][0];\"number\"==typeof u&&(e[u]=!0)}for(i=0;i<t.length;i++){var o=t[i];\"number\"==typeof o[0]&&e[o[0]]||(r&&!o[2]?o[2]=r:r&&(o[2]=\"(\"+o[2]+\") and (\"+r+\")\"),n.push(o))}},n}},function(t,n,r){function e(t){for(var n=0;n<t.length;n++){var r=t[n],e=s[r.id];if(e){e.refs++;for(var i=0;i<e.parts.length;i++)e.parts[i](r.parts[i]);for(;i<r.parts.length;i++)e.parts.push(u(r.parts[i]));e.parts.length>r.parts.length&&(e.parts.length=r.parts.length)}else{for(var o=[],i=0;i<r.parts.length;i++)o.push(u(r.parts[i]));s[r.id]={id:r.id,refs:1,parts:o}}}}function i(){var t=document.createElement(\"style\");return t.type=\"text/css\",l.appendChild(t),t}function u(t){var n,r,e=document.querySelector('style[data-vue-ssr-id~=\"'+t.id+'\"]');if(e){if(v)return d;e.parentNode.removeChild(e)}if(g){var u=h++;e=p||(p=i()),n=o.bind(null,e,u,!1),r=o.bind(null,e,u,!0)}else e=i(),n=a.bind(null,e),r=function(){e.parentNode.removeChild(e)};return n(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n(t=e)}else r()}}function o(t,n,r,e){var i=r?\"\":e.css;if(t.styleSheet)t.styleSheet.cssText=_(n,i);else{var u=document.createTextNode(i),o=t.childNodes;o[n]&&t.removeChild(o[n]),o.length?t.insertBefore(u,o[n]):t.appendChild(u)}}function a(t,n){var r=n.css,e=n.media,i=n.sourceMap;if(e&&t.setAttribute(\"media\",e),i&&(r+=\"\\n/*# sourceURL=\"+i.sources[0]+\" */\",r+=\"\\n/*# sourceMappingURL=data:application/json;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+\" */\"),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var f=\"undefined\"!=typeof document;if(\"undefined\"!=typeof DEBUG&&DEBUG&&!f)throw new Error(\"vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\");var c=r(10),s={},l=f&&(document.head||document.getElementsByTagName(\"head\")[0]),p=null,h=0,v=!1,d=function(){},g=\"undefined\"!=typeof navigator&&/msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());t.exports=function(t,n,r){v=r;var i=c(t,n);return e(i),function(n){for(var r=[],u=0;u<i.length;u++){var o=i[u],a=s[o.id];a.refs--,r.push(a)}n?(i=c(t,n),e(i)):i=[];for(var u=0;u<r.length;u++){var a=r[u];if(0===a.refs){for(var f=0;f<a.parts.length;f++)a.parts[f]();delete s[a.id]}}}};var _=function(){var t=[];return function(n,r){return t[n]=r,t.filter(Boolean).join(\"\\n\")}}()},function(t,n){t.exports=__webpack_require__(3)},function(t,n){function r(t,n){return function(){t&&t.apply(this,arguments),n&&n.apply(this,arguments)}}var e=/^(attrs|props|on|nativeOn|class|style|hook)$/;t.exports=function(t){return t.reduce(function(t,n){var i,u,o,a,f;for(o in n)if(i=t[o],u=n[o],i&&e.test(o))if(\"class\"===o&&(\"string\"==typeof i&&(f=i,t[o]=i={},i[f]=!0),\"string\"==typeof u&&(f=u,n[o]=u={},u[f]=!0)),\"on\"===o||\"nativeOn\"===o||\"hook\"===o)for(a in u)i[a]=r(i[a],u[a]);else if(Array.isArray(i))t[o]=i.concat(u);else if(Array.isArray(u))t[o]=[i].concat(u);else for(a in u)i[a]=u[a];else t[o]=n[o];return t},{})}},function(t,n,r){\"use strict\";var e=r(3),i=r.n(e),u=r(2),o=r.n(u),a=r(8);r.n(a);n.a=o.a.component(\"Split\",{props:[\"resizeable\",\"dir\",\"split\"],data:function(){return{state:{resizing:!1,split:this.split||\"50%\"}}},methods:{startResize:function(t){t.stopPropagation(),t.preventDefault(),this.state.resizing=!0,document.addEventListener(\"mousemove\",this.splitResize),document.addEventListener(\"mouseup\",this.stopResize)},splitResize:function(t){t.stopPropagation(),t.preventDefault();var n={horizontal:{dimProp:\"width\",mouseProp:\"clientX\",posProp:\"left\"},vertical:{dimProp:\"height\",mouseProp:\"clientY\",posProp:\"top\"}},r=n[this.dir],e=r.dimProp,i=r.mouseProp,u=r.posProp,o=this.$el,a=o.children[1].getBoundingClientRect()[e]/2,f=o.getBoundingClientRect(),c=(t[i]-f[u]-a)/f[e]*100,s=c+\"%\";this.state.split=s,this.$emit(\"onSplitResize\",t,this,s)},stopResize:function(t){this.state.resizing=!1,document.removeEventListener(\"mousemove\",this.splitResize),document.removeEventListener(\"mouseup\",this.stopResize)}},render:function(){var t,n=this,r=arguments[0],e=[\"split\",this.dir,this.state.resizing?\"resizing\":\"\",this.resizeable?\"resizeable\":\"\"];t=this.resizeable?r(\"div\",i()([{class:\"splitter\"},{on:{mousedown:function(t){for(var r=arguments.length,e=Array(r>1?r-1:0),i=1;i<r;i++)e[i-1]=arguments[i];n.startResize.apply(n,[t].concat(e))}}}]),[]):r(\"div\",{class:\"splitter\"},[]);var u=this.$slots.default.filter(function(t){return void 0!==t.tag});return r(\"div\",{class:e.join(\" \")},[r(\"div\",{class:\"content\",style:{flexBasis:this.state.split}},[\" \",u[0],\" \"]),t,r(\"div\",{class:\"content\"},[\" \",u[1],\" \"])])}})},function(t,n,r){\"use strict\";function e(t,n){if(!(t instanceof n))throw new TypeError(\"Cannot call a class as a function\")}var i=function(){function t(t,n){var r=[],e=!0,i=!1,u=void 0;try{for(var o,a=t[Symbol.iterator]();!(e=(o=a.next()).done)&&(r.push(o.value),!n||r.length!==n);e=!0);}catch(t){i=!0,u=t}finally{try{!e&&a.return&&a.return()}finally{if(i)throw u}}return r}return function(n,r){if(Array.isArray(n))return n;if(Symbol.iterator in Object(n))return t(n,r);throw new TypeError(\"Invalid attempt to destructure non-iterable instance\")}}(),u=function(){function t(t,n){for(var r=0;r<n.length;r++){var e=n[r];e.enumerable=e.enumerable||!1,e.configurable=!0,\"value\"in e&&(e.writable=!0),Object.defineProperty(t,e.key,e)}}return function(n,r,e){return r&&t(n.prototype,r),e&&t(n,e),n}}(),o=function(){function t(n){e(this,t),this.tree=n||[]}return u(t,[{key:\"push\",value:function(n){return void 0===n.id&&(n.id=t.gid++),this.tree.push(n),n}},{key:\"findById\",value:function(t){return this.tree.find(function(n){return n.id===t})}},{key:\"childrenOf\",value:function(t){return this.tree.filter(function(n){return n.parent===t})}},{key:\"removeChild\",value:function(t){var n=this.tree.indexOf(t);if(-1!==n){this.tree.splice(n,1);var r=this.tree.indexOf(t.parent),e=this.childrenOf(t.parent),u=i(e,1),o=u[0],a=this.tree.indexOf(o);this.tree.splice(a,1),this.tree[r]=o,o.parent=o.parent.parent}}},{key:\"attachChild\",value:function(n,r,e,i){void 0===e.id&&(e.id=t.gid++),i=i||33;var u=this.tree.indexOf(n),o={id:t.gid++,type:\"split\",parent:n.parent,dir:r%2==0?\"vertical\":\"horizontal\"};return n.parent=o,e.parent=o,this.tree[u]=o,0===r||3===r?(o.split=i+\"%\",this.tree.push(e,n)):(o.split=100-i+\"%\",this.tree.push(n,e)),e}}]),t}();o.gid=0,n.a=o,o.from=function(t){return new o(t)}},function(t,n,r){\"use strict\";Object.defineProperty(n,\"__esModule\",{value:!0});var e=r(7),i=r(4),u=r(16),o=r(5),a=r(19);r.n(a);r.d(n,\"Layout\",function(){return e.a}),r.d(n,\"Pane\",function(){return u.a}),r.d(n,\"Split\",function(){return i.a}),r.d(n,\"Tree\",function(){return o.a})},function(t,n,r){\"use strict\";function e(t,n,r){r=r||33;var e=r/100,i=t.getBoundingClientRect(),u=i.width*e,o=i.height*e,a={x:n.clientX-i.left,y:n.clientY-i.top},f=[a.y-o,i.width-u-a.x,i.height-o-a.y,a.x-u],c=0,s=-1;return f.forEach(function(t,n){t<c&&(c=t,s=n)}),s}var i=r(3),u=r.n(i),o=r(2),a=r.n(o),f=r(4),c=r(5),s=r(11),l=r.n(s),p=r(14);r.n(p);n.a=a.a.component(\"Layout\",{props:[\"edit\",\"resize\",\"splits\"],created:function(){this.views=this.$slots.default.filter(function(t){return void 0!==t.tag})},data:function(){var t=[],n=c.a.from(t);return function t(r){if(r instanceof Object){var e=n.push({type:\"split\",dir:r.dir,split:r.size});return t(r.first).parent=e,t(r.second).parent=e,e}return n.push({type:\"view\",viewId:r})}(this.splits),{state:{nodes:t}}},methods:{onSplitResize:function(t,n,r){console.log(\"Split resizing:\",n,r);var e=n.props[\"node-id\"];this.setState(function(t){return c.a.from(t.nodes).findById(e).split=r,t})},previewPane:function(t,n,r){if(-1===t)return void(this.$refs.preview.style.opacity=0);if(void 0===n)return-1;r=r||33;var e=r/100,i=n.getBoundingClientRect(),u={left:i.left,top:i.top,width:i.width,height:i.height};1===t?u.left+=u.width-u.width*e:2===t&&(u.top+=u.height-u.height*e),t%2==0?u.height*=e:t%2==1&&(u.width*=e),this.$refs.preview.style.opacity=1,this.$refs.preview.style.position=\"fixed\";for(var o in u)this.$refs.preview.style[o]=u[o]+\"px\"},onViewDragStart:function(t){var n=parseInt(t.target.getAttribute(\"node-id\"),10);if(void 0!==n){var r=this.state.nodes.find(function(t){return t.id===n});if(void 0!==r){t.preventDefault(),t.stopPropagation();var e=this.$refs.container.getBoundingClientRect(),i=t.target.getBoundingClientRect();this.drag={node:r,offset:{x:t.clientX-i.left,y:t.clientY-i.top}},this.state.savedNodes=l.a.cloneDeep(this.state.nodes),c.a.from(this.state.nodes).removeChild(r),this.$refs.drag.style.top=i.y-e.top+\"px\",this.$refs.drag.style.left=i.x-e.left+\"px\",this.$refs.drag.style.width=i.width+\"px\",this.$refs.drag.style.height=i.height+\"px\",document.addEventListener(\"mousemove\",this.onViewDrag),document.addEventListener(\"mouseup\",this.onViewDrop)}}},onViewDrag:function(t){t.preventDefault(),t.stopPropagation(),this.drag.over=null;var n=this.$refs.container.getBoundingClientRect(),r={x:t.clientX-n.left,y:t.clientY-n.top};this.$refs.drag.style.left=r.x-this.drag.offset.x+\"px\",this.$refs.drag.style.top=r.y-this.drag.offset.y+\"px\",this.$refs.drag.style.pointerEvents=\"none\";var i=document.elementFromPoint(t.clientX,t.clientY);this.$refs.drag.style.pointerEvents=null;for(var u=i;u&&u.matches&&!u.matches(\".view\");u=u.parentNode);if(!u||!u.matches)return void this.previewPane(-1);var o=e(u,t);-1!==o&&(this.drag.over={viewDom:u,attach:o}),this.previewPane(o,u)},onViewDrop:function(t){if(document.removeEventListener(\"mousemove\",this.onViewDrag),document.removeEventListener(\"mouseup\",this.onViewDrop),this.$refs.drag.style.right=this.$refs.drag.style.bottom=this.$refs.drag.style.left=this.$refs.drag.style.width=this.$refs.drag.style.height=0,this.previewPane(-1),null==this.drag.over)return this.drag=null,void(this.state.nodes=this.state.savedNodes);var n=this.drag.over,r=n.viewDom,e=n.attach,i=parseInt(r.getAttribute(\"node-id\"),10),u=c.a.from(this.state.nodes),o=u.findById(i);u.attachChild(o,e,this.drag.node),this.drag=null}},beforeUpdate:function(){var t=this;if(this.$refs.container){var n=this.$refs.container.querySelectorAll(\"[target-view]\");Array.from(n).forEach(function(n,r){t.$refs.container.querySelector(\"[src-view=\"+n.getAttribute(\"target-view\")+\"]\").appendChild(n.children[0])})}},render:function(){var t=this,n=arguments[0];this.$nextTick(function(){var n=t.$refs.container.querySelectorAll(\"[target-view]\");Array.from(n).forEach(function(n,r){n.appendChild(t.$refs.container.querySelector(\"[src-view=\"+n.getAttribute(\"target-view\")+\"]\").children[0])})});var r=function r(e){switch(e.type){case\"split\":var i=c.a.from(t.state.nodes).childrenOf(e).map(function(t){return r(t)});return n(f.a,u()([{key:e.id,attrs:{\"node-id\":e.id,resizeable:t.resize,dir:e.dir,split:e.split}},{on:{splitResize:function(n){for(var r=arguments.length,e=Array(r>1?r-1:0),i=1;i<r;i++)e[i-1]=arguments[i];t.onSplitResize.apply(t,[n].concat(e))}}}]),[i]);default:return t.edit?n(\"div\",u()([{class:\"view\",attrs:{\"node-id\":e.id,\"target-view\":\"view-\"+e.viewId}},{on:{mousedown:function(n){for(var r=arguments.length,e=Array(r>1?r-1:0),i=1;i<r;i++)e[i-1]=arguments[i];t.onViewDragStart.apply(t,[n].concat(e))}}}]),[]):n(\"div\",{class:\"view\",attrs:{\"node-id\":e.id,\"target-view\":\"view-\"+e.viewId}},[])}}(this.state.nodes[0]),e=[\"layout-container\",this.edit?\"edit\":\"\"];return n(\"div\",{class:e.join(\" \"),ref:\"container\"},[n(\"div\",{class:\"views\",ref:\"views\"},[r]),n(\"div\",{class:\"preview\",ref:\"preview\"},[]),n(\"div\",{class:\"drag \"+(this.drag?\"dragging\":\"\"),ref:\"drag\",style:{transformOrigin:this.drag?this.drag.offset.x+\"px \"+this.drag.offset.y+\"px\":\"\"}},[this.drag&&n(\"div\",{class:\"view\",attrs:{\"target-view\":\"view-\"+this.drag.node.viewId}},[])]),n(\"div\",{style:{display:\"none\"}},[this.views.map(function(t,r){return n(\"div\",{key:r,attrs:{\"src-view\":\"view-\"+r}},[\" \",t,\" \"])})])])}})},function(t,n,r){var e=r(9);\"string\"==typeof e&&(e=[[t.i,e,\"\"]]),e.locals&&(t.exports=e.locals);r(1)(\"5eb4c000\",e,!0)},function(t,n,r){n=t.exports=r(0)(void 0),n.push([t.i,\".split{display:flex;flex:1}.split>.content{position:relative;display:flex;box-sizing:border-box}.split>.content>*{flex:1;height:100%}.split>.content:last-child{flex:1}.split>.splitter{flex-basis:4px}.split.vertical{flex-direction:column}.split.horizontal{flex-direction:row}.split.resizeable.vertical>.splitter{cursor:row-resize}.split.resizeable.horizontal>.splitter{cursor:col-resize}\",\"\"])},function(t,n){t.exports=function(t,n){for(var r=[],e={},i=0;i<n.length;i++){var u=n[i],o=u[0],a=u[1],f=u[2],c=u[3],s={id:t+\":\"+i,css:a,media:f,sourceMap:c};e[o]?e[o].parts.push(s):r.push(e[o]={id:o,parts:[s]})}return r}},function(t,n,r){(function(t,e){var i;(function(){function u(t,n){return t.set(n[0],n[1]),t}function o(t,n){return t.add(n),t}function a(t,n,r){switch(r.length){case 0:return t.call(n);case 1:return t.call(n,r[0]);case 2:return t.call(n,r[0],r[1]);case 3:return t.call(n,r[0],r[1],r[2])}return t.apply(n,r)}function f(t,n,r,e){for(var i=-1,u=null==t?0:t.length;++i<u;){var o=t[i];n(e,o,r(o),t)}return e}function c(t,n){for(var r=-1,e=null==t?0:t.length;++r<e&&!1!==n(t[r],r,t););return t}function s(t,n){for(var r=null==t?0:t.length;r--&&!1!==n(t[r],r,t););return t}function l(t,n){for(var r=-1,e=null==t?0:t.length;++r<e;)if(!n(t[r],r,t))return!1;return!0}function p(t,n){for(var r=-1,e=null==t?0:t.length,i=0,u=[];++r<e;){var o=t[r];n(o,r,t)&&(u[i++]=o)}return u}function h(t,n){return!!(null==t?0:t.length)&&A(t,n,0)>-1}function v(t,n,r){for(var e=-1,i=null==t?0:t.length;++e<i;)if(r(n,t[e]))return!0;return!1}function d(t,n){for(var r=-1,e=null==t?0:t.length,i=Array(e);++r<e;)i[r]=n(t[r],r,t);return i}function g(t,n){for(var r=-1,e=n.length,i=t.length;++r<e;)t[i+r]=n[r];return t}function _(t,n,r,e){var i=-1,u=null==t?0:t.length;for(e&&u&&(r=t[++i]);++i<u;)r=n(r,t[i],i,t);return r}function y(t,n,r,e){var i=null==t?0:t.length;for(e&&i&&(r=t[--i]);i--;)r=n(r,t[i],i,t);return r}function b(t,n){for(var r=-1,e=null==t?0:t.length;++r<e;)if(n(t[r],r,t))return!0;return!1}function w(t){return t.split(\"\")}function m(t){return t.match(Nn)||[]}function x(t,n,r){var e;return r(t,function(t,r,i){if(n(t,r,i))return e=r,!1}),e}function j(t,n,r,e){for(var i=t.length,u=r+(e?1:-1);e?u--:++u<i;)if(n(t[u],u,t))return u;return-1}function A(t,n,r){return n===n?X(t,n,r):j(t,k,r)}function z(t,n,r,e){for(var i=r-1,u=t.length;++i<u;)if(e(t[i],n))return i;return-1}function k(t){return t!==t}function R(t,n){var r=null==t?0:t.length;return r?C(t,n)/r:Bt}function O(t){return function(n){return null==n?it:n[t]}}function E(t){return function(n){return null==t?it:t[n]}}function S(t,n,r,e,i){return i(t,function(t,i,u){r=e?(e=!1,t):n(r,t,i,u)}),r}function I(t,n){var r=t.length;for(t.sort(n);r--;)t[r]=t[r].value;return t}function C(t,n){for(var r,e=-1,i=t.length;++e<i;){var u=n(t[e]);u!==it&&(r=r===it?u:r+u)}return r}function $(t,n){for(var r=-1,e=Array(t);++r<t;)e[r]=n(r);return e}function L(t,n){return d(n,function(n){return[n,t[n]]})}function B(t){return function(n){return t(n)}}function P(t,n){return d(n,function(n){return t[n]})}function D(t,n){return t.has(n)}function U(t,n){for(var r=-1,e=t.length;++r<e&&A(n,t[r],0)>-1;);return r}function T(t,n){for(var r=t.length;r--&&A(n,t[r],0)>-1;);return r}function W(t,n){for(var r=t.length,e=0;r--;)t[r]===n&&++e;return e}function N(t){return\"\\\\\"+Or[t]}function M(t,n){return null==t?it:t[n]}function F(t){return br.test(t)}function q(t){return wr.test(t)}function V(t){for(var n,r=[];!(n=t.next()).done;)r.push(n.value);return r}function Z(t){var n=-1,r=Array(t.size);return t.forEach(function(t,e){r[++n]=[e,t]}),r}function Y(t,n){return function(r){return t(n(r))}}function G(t,n){for(var r=-1,e=t.length,i=0,u=[];++r<e;){var o=t[r];o!==n&&o!==st||(t[r]=st,u[i++]=r)}return u}function K(t){var n=-1,r=Array(t.size);return t.forEach(function(t){r[++n]=t}),r}function J(t){var n=-1,r=Array(t.size);return t.forEach(function(t){r[++n]=[t,t]}),r}function X(t,n,r){for(var e=r-1,i=t.length;++e<i;)if(t[e]===n)return e;return-1}function H(t,n,r){for(var e=r+1;e--;)if(t[e]===n)return e;return e}function Q(t){return F(t)?nt(t):Vr(t)}function tt(t){return F(t)?rt(t):w(t)}function nt(t){for(var n=_r.lastIndex=0;_r.test(t);)++n;return n}function rt(t){return t.match(_r)||[]}function et(t){return t.match(yr)||[]}var it,ut=200,ot=\"Unsupported core-js use. Try https://npms.io/search?q=ponyfill.\",at=\"Expected a function\",ft=\"__lodash_hash_undefined__\",ct=500,st=\"__lodash_placeholder__\",lt=1,pt=2,ht=4,vt=1,dt=2,gt=1,_t=2,yt=4,bt=8,wt=16,mt=32,xt=64,jt=128,At=256,zt=512,kt=30,Rt=\"...\",Ot=800,Et=16,St=1,It=2,Ct=1/0,$t=9007199254740991,Lt=1.7976931348623157e308,Bt=NaN,Pt=4294967295,Dt=Pt-1,Ut=Pt>>>1,Tt=[[\"ary\",jt],[\"bind\",gt],[\"bindKey\",_t],[\"curry\",bt],[\"curryRight\",wt],[\"flip\",zt],[\"partial\",mt],[\"partialRight\",xt],[\"rearg\",At]],Wt=\"[object Arguments]\",Nt=\"[object Array]\",Mt=\"[object AsyncFunction]\",Ft=\"[object Boolean]\",qt=\"[object Date]\",Vt=\"[object DOMException]\",Zt=\"[object Error]\",Yt=\"[object Function]\",Gt=\"[object GeneratorFunction]\",Kt=\"[object Map]\",Jt=\"[object Number]\",Xt=\"[object Null]\",Ht=\"[object Object]\",Qt=\"[object Proxy]\",tn=\"[object RegExp]\",nn=\"[object Set]\",rn=\"[object String]\",en=\"[object Symbol]\",un=\"[object Undefined]\",on=\"[object WeakMap]\",an=\"[object WeakSet]\",fn=\"[object ArrayBuffer]\",cn=\"[object DataView]\",sn=\"[object Float32Array]\",ln=\"[object Float64Array]\",pn=\"[object Int8Array]\",hn=\"[object Int16Array]\",vn=\"[object Int32Array]\",dn=\"[object Uint8Array]\",gn=\"[object Uint8ClampedArray]\",_n=\"[object Uint16Array]\",yn=\"[object Uint32Array]\",bn=/\\b__p \\+= '';/g,wn=/\\b(__p \\+=) '' \\+/g,mn=/(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g,xn=/&(?:amp|lt|gt|quot|#39);/g,jn=/[&<>\"']/g,An=RegExp(xn.source),zn=RegExp(jn.source),kn=/<%-([\\s\\S]+?)%>/g,Rn=/<%([\\s\\S]+?)%>/g,On=/<%=([\\s\\S]+?)%>/g,En=/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,Sn=/^\\w*$/,In=/^\\./,Cn=/[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,$n=/[\\\\^$.*+?()[\\]{}|]/g,Ln=RegExp($n.source),Bn=/^\\s+|\\s+$/g,Pn=/^\\s+/,Dn=/\\s+$/,Un=/\\{(?:\\n\\/\\* \\[wrapped with .+\\] \\*\\/)?\\n?/,Tn=/\\{\\n\\/\\* \\[wrapped with (.+)\\] \\*/,Wn=/,? & /,Nn=/[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g,Mn=/\\\\(\\\\)?/g,Fn=/\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g,qn=/\\w*$/,Vn=/^[-+]0x[0-9a-f]+$/i,Zn=/^0b[01]+$/i,Yn=/^\\[object .+?Constructor\\]$/,Gn=/^0o[0-7]+$/i,Kn=/^(?:0|[1-9]\\d*)$/,Jn=/[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g,Xn=/($^)/,Hn=/['\\n\\r\\u2028\\u2029\\\\]/g,Qn=\"\\\\u0300-\\\\u036f\\\\ufe20-\\\\ufe2f\\\\u20d0-\\\\u20ff\",tr=\"\\\\xac\\\\xb1\\\\xd7\\\\xf7\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf\\\\u2000-\\\\u206f \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000\",nr=\"[\"+tr+\"]\",rr=\"[\"+Qn+\"]\",er=\"[a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff]\",ir=\"[^\\\\ud800-\\\\udfff\"+tr+\"\\\\d+\\\\u2700-\\\\u27bfa-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xffA-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde]\",ur=\"\\\\ud83c[\\\\udffb-\\\\udfff]\",or=\"(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}\",ar=\"[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]\",fr=\"[A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde]\",cr=\"(?:\"+er+\"|\"+ir+\")\",sr=\"(?:[\\\\u0300-\\\\u036f\\\\ufe20-\\\\ufe2f\\\\u20d0-\\\\u20ff]|\\\\ud83c[\\\\udffb-\\\\udfff])?\",lr=\"(?:\\\\u200d(?:\"+[\"[^\\\\ud800-\\\\udfff]\",or,ar].join(\"|\")+\")[\\\\ufe0e\\\\ufe0f]?\"+sr+\")*\",pr=\"[\\\\ufe0e\\\\ufe0f]?\"+sr+lr,hr=\"(?:\"+[\"[\\\\u2700-\\\\u27bf]\",or,ar].join(\"|\")+\")\"+pr,vr=\"(?:\"+[\"[^\\\\ud800-\\\\udfff]\"+rr+\"?\",rr,or,ar,\"[\\\\ud800-\\\\udfff]\"].join(\"|\")+\")\",dr=RegExp(\"['’]\",\"g\"),gr=RegExp(rr,\"g\"),_r=RegExp(ur+\"(?=\"+ur+\")|\"+vr+pr,\"g\"),yr=RegExp([fr+\"?\"+er+\"+(?:['’](?:d|ll|m|re|s|t|ve))?(?=\"+[nr,fr,\"$\"].join(\"|\")+\")\",\"(?:[A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde]|[^\\\\ud800-\\\\udfff\\\\xac\\\\xb1\\\\xd7\\\\xf7\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf\\\\u2000-\\\\u206f \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000\\\\d+\\\\u2700-\\\\u27bfa-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xffA-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde])+(?:['’](?:D|LL|M|RE|S|T|VE))?(?=\"+[nr,fr+cr,\"$\"].join(\"|\")+\")\",fr+\"?\"+cr+\"+(?:['’](?:d|ll|m|re|s|t|ve))?\",fr+\"+(?:['’](?:D|LL|M|RE|S|T|VE))?\",\"\\\\d*(?:(?:1ST|2ND|3RD|(?![123])\\\\dTH)\\\\b)\",\"\\\\d*(?:(?:1st|2nd|3rd|(?![123])\\\\dth)\\\\b)\",\"\\\\d+\",hr].join(\"|\"),\"g\"),br=RegExp(\"[\\\\u200d\\\\ud800-\\\\udfff\"+Qn+\"\\\\ufe0e\\\\ufe0f]\"),wr=/[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,mr=[\"Array\",\"Buffer\",\"DataView\",\"Date\",\"Error\",\"Float32Array\",\"Float64Array\",\"Function\",\"Int8Array\",\"Int16Array\",\"Int32Array\",\"Map\",\"Math\",\"Object\",\"Promise\",\"RegExp\",\"Set\",\"String\",\"Symbol\",\"TypeError\",\"Uint8Array\",\"Uint8ClampedArray\",\"Uint16Array\",\"Uint32Array\",\"WeakMap\",\"_\",\"clearTimeout\",\"isFinite\",\"parseInt\",\"setTimeout\"],xr=-1,jr={};jr[sn]=jr[ln]=jr[pn]=jr[hn]=jr[vn]=jr[dn]=jr[gn]=jr[_n]=jr[yn]=!0,jr[Wt]=jr[Nt]=jr[fn]=jr[Ft]=jr[cn]=jr[qt]=jr[Zt]=jr[Yt]=jr[Kt]=jr[Jt]=jr[Ht]=jr[tn]=jr[nn]=jr[rn]=jr[on]=!1;var Ar={};Ar[Wt]=Ar[Nt]=Ar[fn]=Ar[cn]=Ar[Ft]=Ar[qt]=Ar[sn]=Ar[ln]=Ar[pn]=Ar[hn]=Ar[vn]=Ar[Kt]=Ar[Jt]=Ar[Ht]=Ar[tn]=Ar[nn]=Ar[rn]=Ar[en]=Ar[dn]=Ar[gn]=Ar[_n]=Ar[yn]=!0,Ar[Zt]=Ar[Yt]=Ar[on]=!1;var zr={\"À\":\"A\",\"Á\":\"A\",\"Â\":\"A\",\"Ã\":\"A\",\"Ä\":\"A\",\"Å\":\"A\",\"à\":\"a\",\"á\":\"a\",\"â\":\"a\",\"ã\":\"a\",\"ä\":\"a\",\"å\":\"a\",\"Ç\":\"C\",\"ç\":\"c\",\"Ð\":\"D\",\"ð\":\"d\",\"È\":\"E\",\"É\":\"E\",\"Ê\":\"E\",\"Ë\":\"E\",\"è\":\"e\",\"é\":\"e\",\"ê\":\"e\",\"ë\":\"e\",\"Ì\":\"I\",\"Í\":\"I\",\"Î\":\"I\",\"Ï\":\"I\",\"ì\":\"i\",\"í\":\"i\",\"î\":\"i\",\"ï\":\"i\",\"Ñ\":\"N\",\"ñ\":\"n\",\"Ò\":\"O\",\"Ó\":\"O\",\"Ô\":\"O\",\"Õ\":\"O\",\"Ö\":\"O\",\"Ø\":\"O\",\"ò\":\"o\",\"ó\":\"o\",\"ô\":\"o\",\"õ\":\"o\",\"ö\":\"o\",\"ø\":\"o\",\"Ù\":\"U\",\"Ú\":\"U\",\"Û\":\"U\",\"Ü\":\"U\",\"ù\":\"u\",\"ú\":\"u\",\"û\":\"u\",\"ü\":\"u\",\"Ý\":\"Y\",\"ý\":\"y\",\"ÿ\":\"y\",\"Æ\":\"Ae\",\"æ\":\"ae\",\"Þ\":\"Th\",\"þ\":\"th\",\"ß\":\"ss\",\"Ā\":\"A\",\"Ă\":\"A\",\"Ą\":\"A\",\"ā\":\"a\",\"ă\":\"a\",\"ą\":\"a\",\"Ć\":\"C\",\"Ĉ\":\"C\",\"Ċ\":\"C\",\"Č\":\"C\",\"ć\":\"c\",\"ĉ\":\"c\",\"ċ\":\"c\",\"č\":\"c\",\"Ď\":\"D\",\"Đ\":\"D\",\"ď\":\"d\",\"đ\":\"d\",\"Ē\":\"E\",\"Ĕ\":\"E\",\"Ė\":\"E\",\"Ę\":\"E\",\"Ě\":\"E\",\"ē\":\"e\",\"ĕ\":\"e\",\"ė\":\"e\",\"ę\":\"e\",\"ě\":\"e\",\"Ĝ\":\"G\",\"Ğ\":\"G\",\"Ġ\":\"G\",\"Ģ\":\"G\",\"ĝ\":\"g\",\"ğ\":\"g\",\"ġ\":\"g\",\"ģ\":\"g\",\"Ĥ\":\"H\",\"Ħ\":\"H\",\"ĥ\":\"h\",\"ħ\":\"h\",\"Ĩ\":\"I\",\"Ī\":\"I\",\"Ĭ\":\"I\",\"Į\":\"I\",\"İ\":\"I\",\"ĩ\":\"i\",\"ī\":\"i\",\"ĭ\":\"i\",\"į\":\"i\",\"ı\":\"i\",\"Ĵ\":\"J\",\"ĵ\":\"j\",\"Ķ\":\"K\",\"ķ\":\"k\",\"ĸ\":\"k\",\"Ĺ\":\"L\",\"Ļ\":\"L\",\"Ľ\":\"L\",\"Ŀ\":\"L\",\"Ł\":\"L\",\"ĺ\":\"l\",\"ļ\":\"l\",\"ľ\":\"l\",\"ŀ\":\"l\",\"ł\":\"l\",\"Ń\":\"N\",\"Ņ\":\"N\",\"Ň\":\"N\",\"Ŋ\":\"N\",\"ń\":\"n\",\"ņ\":\"n\",\"ň\":\"n\",\"ŋ\":\"n\",\"Ō\":\"O\",\"Ŏ\":\"O\",\"Ő\":\"O\",\"ō\":\"o\",\"ŏ\":\"o\",\"ő\":\"o\",\"Ŕ\":\"R\",\"Ŗ\":\"R\",\"Ř\":\"R\",\"ŕ\":\"r\",\"ŗ\":\"r\",\"ř\":\"r\",\"Ś\":\"S\",\"Ŝ\":\"S\",\"Ş\":\"S\",\"Š\":\"S\",\"ś\":\"s\",\"ŝ\":\"s\",\"ş\":\"s\",\"š\":\"s\",\"Ţ\":\"T\",\"Ť\":\"T\",\"Ŧ\":\"T\",\"ţ\":\"t\",\"ť\":\"t\",\"ŧ\":\"t\",\"Ũ\":\"U\",\"Ū\":\"U\",\"Ŭ\":\"U\",\"Ů\":\"U\",\"Ű\":\"U\",\"Ų\":\"U\",\"ũ\":\"u\",\"ū\":\"u\",\"ŭ\":\"u\",\"ů\":\"u\",\"ű\":\"u\",\"ų\":\"u\",\"Ŵ\":\"W\",\"ŵ\":\"w\",\"Ŷ\":\"Y\",\"ŷ\":\"y\",\"Ÿ\":\"Y\",\"Ź\":\"Z\",\"Ż\":\"Z\",\"Ž\":\"Z\",\"ź\":\"z\",\"ż\":\"z\",\"ž\":\"z\",\"Ĳ\":\"IJ\",\"ĳ\":\"ij\",\"Œ\":\"Oe\",\"œ\":\"oe\",\"ŉ\":\"'n\",\"ſ\":\"s\"},kr={\"&\":\"&amp;\",\"<\":\"&lt;\",\">\":\"&gt;\",'\"':\"&quot;\",\"'\":\"&#39;\"},Rr={\"&amp;\":\"&\",\"&lt;\":\"<\",\"&gt;\":\">\",\"&quot;\":'\"',\"&#39;\":\"'\"},Or={\"\\\\\":\"\\\\\",\"'\":\"'\",\"\\n\":\"n\",\"\\r\":\"r\",\"\\u2028\":\"u2028\",\"\\u2029\":\"u2029\"},Er=parseFloat,Sr=parseInt,Ir=\"object\"==typeof t&&t&&t.Object===Object&&t,Cr=\"object\"==typeof self&&self&&self.Object===Object&&self,$r=Ir||Cr||Function(\"return this\")(),Lr=\"object\"==typeof n&&n&&!n.nodeType&&n,Br=Lr&&\"object\"==typeof e&&e&&!e.nodeType&&e,Pr=Br&&Br.exports===Lr,Dr=Pr&&Ir.process,Ur=function(){try{return Dr&&Dr.binding&&Dr.binding(\"util\")}catch(t){}}(),Tr=Ur&&Ur.isArrayBuffer,Wr=Ur&&Ur.isDate,Nr=Ur&&Ur.isMap,Mr=Ur&&Ur.isRegExp,Fr=Ur&&Ur.isSet,qr=Ur&&Ur.isTypedArray,Vr=O(\"length\"),Zr=E(zr),Yr=E(kr),Gr=E(Rr),Kr=function t(n){function r(t){if(of(t)&&!_p(t)&&!(t instanceof w)){if(t instanceof i)return t;if(_s.call(t,\"__wrapped__\"))return no(t)}return new i(t)}function e(){}function i(t,n){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!n,this.__index__=0,this.__values__=it}function w(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=Pt,this.__views__=[]}function E(){var t=new w(this.__wrapped__);return t.__actions__=Di(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=Di(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=Di(this.__views__),t}function X(){if(this.__filtered__){var t=new w(this);t.__dir__=-1,t.__filtered__=!0}else t=this.clone(),t.__dir__*=-1;return t}function nt(){var t=this.__wrapped__.value(),n=this.__dir__,r=_p(t),e=n<0,i=r?t.length:0,u=ku(0,i,this.__views__),o=u.start,a=u.end,f=a-o,c=e?a:o-1,s=this.__iteratees__,l=s.length,p=0,h=Ys(f,this.__takeCount__);if(!r||!e&&i==f&&h==f)return yi(t,this.__actions__);var v=[];t:for(;f--&&p<h;){c+=n;for(var d=-1,g=t[c];++d<l;){var _=s[d],y=_.iteratee,b=_.type,w=y(g);if(b==It)g=w;else if(!w){if(b==St)continue t;break t}}v[p++]=g}return v}function rt(t){var n=-1,r=null==t?0:t.length;for(this.clear();++n<r;){var e=t[n];this.set(e[0],e[1])}}function Nn(){this.__data__=el?el(null):{},this.size=0}function Qn(t){var n=this.has(t)&&delete this.__data__[t];return this.size-=n?1:0,n}function tr(t){var n=this.__data__;if(el){var r=n[t];return r===ft?it:r}return _s.call(n,t)?n[t]:it}function nr(t){var n=this.__data__;return el?n[t]!==it:_s.call(n,t)}function rr(t,n){var r=this.__data__;return this.size+=this.has(t)?0:1,r[t]=el&&n===it?ft:n,this}function er(t){var n=-1,r=null==t?0:t.length;for(this.clear();++n<r;){var e=t[n];this.set(e[0],e[1])}}function ir(){this.__data__=[],this.size=0}function ur(t){var n=this.__data__,r=Jr(n,t);return!(r<0)&&(r==n.length-1?n.pop():Is.call(n,r,1),--this.size,!0)}function or(t){var n=this.__data__,r=Jr(n,t);return r<0?it:n[r][1]}function ar(t){return Jr(this.__data__,t)>-1}function fr(t,n){var r=this.__data__,e=Jr(r,t);return e<0?(++this.size,r.push([t,n])):r[e][1]=n,this}function cr(t){var n=-1,r=null==t?0:t.length;for(this.clear();++n<r;){var e=t[n];this.set(e[0],e[1])}}function sr(){this.size=0,this.__data__={hash:new rt,map:new(Qs||er),string:new rt}}function lr(t){var n=xu(this,t).delete(t);return this.size-=n?1:0,n}function pr(t){return xu(this,t).get(t)}function hr(t){return xu(this,t).has(t)}function vr(t,n){var r=xu(this,t),e=r.size;return r.set(t,n),this.size+=r.size==e?0:1,this}function _r(t){var n=-1,r=null==t?0:t.length;for(this.__data__=new cr;++n<r;)this.add(t[n])}function yr(t){return this.__data__.set(t,ft),this}function br(t){return this.__data__.has(t)}function wr(t){var n=this.__data__=new er(t);this.size=n.size}function zr(){this.__data__=new er,this.size=0}function kr(t){var n=this.__data__,r=n.delete(t);return this.size=n.size,r}function Rr(t){return this.__data__.get(t)}function Or(t){return this.__data__.has(t)}function Ir(t,n){var r=this.__data__;if(r instanceof er){var e=r.__data__;if(!Qs||e.length<ut-1)return e.push([t,n]),this.size=++r.size,this;r=this.__data__=new cr(e)}return r.set(t,n),this.size=r.size,this}function Cr(t,n){var r=_p(t),e=!r&&gp(t),i=!r&&!e&&bp(t),u=!r&&!e&&!i&&Ap(t),o=r||e||i||u,a=o?$(t.length,ss):[],f=a.length;for(var c in t)!n&&!_s.call(t,c)||o&&(\"length\"==c||i&&(\"offset\"==c||\"parent\"==c)||u&&(\"buffer\"==c||\"byteLength\"==c||\"byteOffset\"==c)||Lu(c,f))||a.push(c);return a}function Lr(t){var n=t.length;return n?t[Qe(0,n-1)]:it}function Br(t,n){return Xu(Di(t),re(n,0,t.length))}function Dr(t){return Xu(Di(t))}function Ur(t,n,r){(r===it||Va(t[n],r))&&(r!==it||n in t)||te(t,n,r)}function Vr(t,n,r){var e=t[n];_s.call(t,n)&&Va(e,r)&&(r!==it||n in t)||te(t,n,r)}function Jr(t,n){for(var r=t.length;r--;)if(Va(t[r][0],n))return r;return-1}function Xr(t,n,r,e){return dl(t,function(t,i,u){n(e,t,r(t),u)}),e}function Hr(t,n){return t&&Ui(n,Nf(n),t)}function Qr(t,n){return t&&Ui(n,Mf(n),t)}function te(t,n,r){\"__proto__\"==n&&Bs?Bs(t,n,{configurable:!0,enumerable:!0,value:r,writable:!0}):t[n]=r}function ne(t,n){for(var r=-1,e=n.length,i=es(e),u=null==t;++r<e;)i[r]=u?it:Uf(t,n[r]);return i}function re(t,n,r){return t===t&&(r!==it&&(t=t<=r?t:r),n!==it&&(t=t>=n?t:n)),t}function ee(t,n,r,e,i,u){var o,a=n&lt,f=n&pt,s=n&ht;if(r&&(o=i?r(t,e,i,u):r(t)),o!==it)return o;if(!uf(t))return t;var l=_p(t);if(l){if(o=Eu(t),!a)return Di(t,o)}else{var p=Rl(t),h=p==Yt||p==Gt;if(bp(t))return zi(t,a);if(p==Ht||p==Wt||h&&!i){if(o=f||h?{}:Su(t),!a)return f?Wi(t,Qr(o,t)):Ti(t,Hr(o,t))}else{if(!Ar[p])return i?t:{};o=Iu(t,p,ee,a)}}u||(u=new wr);var v=u.get(t);if(v)return v;u.set(t,o);var d=s?f?yu:_u:f?Mf:Nf,g=l?it:d(t);return c(g||t,function(e,i){g&&(i=e,e=t[i]),Vr(o,i,ee(e,n,r,i,t,u))}),o}function ie(t){var n=Nf(t);return function(r){return ue(r,t,n)}}function ue(t,n,r){var e=r.length;if(null==t)return!e;for(t=fs(t);e--;){var i=r[e],u=n[i],o=t[i];if(o===it&&!(i in t)||!u(o))return!1}return!0}function oe(t,n,r){if(\"function\"!=typeof t)throw new ls(at);return Sl(function(){t.apply(it,r)},n)}function ae(t,n,r,e){var i=-1,u=h,o=!0,a=t.length,f=[],c=n.length;if(!a)return f;r&&(n=d(n,B(r))),e?(u=v,o=!1):n.length>=ut&&(u=D,o=!1,n=new _r(n));t:for(;++i<a;){var s=t[i],l=null==r?s:r(s);if(s=e||0!==s?s:0,o&&l===l){for(var p=c;p--;)if(n[p]===l)continue t;f.push(s)}else u(n,l,e)||f.push(s)}return f}function fe(t,n){var r=!0;return dl(t,function(t,e,i){return r=!!n(t,e,i)}),r}function ce(t,n,r){for(var e=-1,i=t.length;++e<i;){var u=t[e],o=n(u);if(null!=o&&(a===it?o===o&&!_f(o):r(o,a)))var a=o,f=u}return f}function se(t,n,r,e){var i=t.length;for(r=jf(r),r<0&&(r=-r>i?0:i+r),e=e===it||e>i?i:jf(e),e<0&&(e+=i),e=r>e?0:Af(e);r<e;)t[r++]=n;return t}function le(t,n){var r=[];return dl(t,function(t,e,i){n(t,e,i)&&r.push(t)}),r}function pe(t,n,r,e,i){var u=-1,o=t.length;for(r||(r=$u),i||(i=[]);++u<o;){var a=t[u];n>0&&r(a)?n>1?pe(a,n-1,r,e,i):g(i,a):e||(i[i.length]=a)}return i}function he(t,n){return t&&_l(t,n,Nf)}function ve(t,n){return t&&yl(t,n,Nf)}function de(t,n){return p(n,function(n){return nf(t[n])})}function ge(t,n){n=ji(n,t);for(var r=0,e=n.length;null!=t&&r<e;)t=t[Hu(n[r++])];return r&&r==e?t:it}function _e(t,n,r){var e=n(t);return _p(t)?e:g(e,r(t))}function ye(t){return null==t?t===it?un:Xt:Ls&&Ls in fs(t)?zu(t):Vu(t)}function be(t,n){return t>n}function we(t,n){return null!=t&&_s.call(t,n)}function me(t,n){return null!=t&&n in fs(t)}function xe(t,n,r){return t>=Ys(n,r)&&t<Zs(n,r)}function je(t,n,r){for(var e=r?v:h,i=t[0].length,u=t.length,o=u,a=es(u),f=1/0,c=[];o--;){var s=t[o];o&&n&&(s=d(s,B(n))),f=Ys(s.length,f),a[o]=!r&&(n||i>=120&&s.length>=120)?new _r(o&&s):it}s=t[0];var l=-1,p=a[0];t:for(;++l<i&&c.length<f;){var g=s[l],_=n?n(g):g;if(g=r||0!==g?g:0,!(p?D(p,_):e(c,_,r))){for(o=u;--o;){var y=a[o];if(!(y?D(y,_):e(t[o],_,r)))continue t}p&&p.push(_),c.push(g)}}return c}function Ae(t,n,r,e){return he(t,function(t,i,u){n(e,r(t),i,u)}),e}function ze(t,n,r){n=ji(n,t),t=Yu(t,n);var e=null==t?t:t[Hu(mo(n))];return null==e?it:a(e,t,r)}function ke(t){return of(t)&&ye(t)==Wt}function Re(t){return of(t)&&ye(t)==fn}function Oe(t){return of(t)&&ye(t)==qt}function Ee(t,n,r,e,i){return t===n||(null==t||null==n||!of(t)&&!of(n)?t!==t&&n!==n:Se(t,n,r,e,Ee,i))}function Se(t,n,r,e,i,u){var o=_p(t),a=_p(n),f=o?Nt:Rl(t),c=a?Nt:Rl(n);f=f==Wt?Ht:f,c=c==Wt?Ht:c;var s=f==Ht,l=c==Ht,p=f==c;if(p&&bp(t)){if(!bp(n))return!1;o=!0,s=!1}if(p&&!s)return u||(u=new wr),o||Ap(t)?hu(t,n,r,e,i,u):vu(t,n,f,r,e,i,u);if(!(r&vt)){var h=s&&_s.call(t,\"__wrapped__\"),v=l&&_s.call(n,\"__wrapped__\");if(h||v){var d=h?t.value():t,g=v?n.value():n;return u||(u=new wr),i(d,g,r,e,u)}}return!!p&&(u||(u=new wr),du(t,n,r,e,i,u))}function Ie(t){return of(t)&&Rl(t)==Kt}function Ce(t,n,r,e){var i=r.length,u=i,o=!e;if(null==t)return!u;for(t=fs(t);i--;){var a=r[i];if(o&&a[2]?a[1]!==t[a[0]]:!(a[0]in t))return!1}for(;++i<u;){a=r[i];var f=a[0],c=t[f],s=a[1];if(o&&a[2]){if(c===it&&!(f in t))return!1}else{var l=new wr;if(e)var p=e(c,s,f,t,n,l);if(!(p===it?Ee(s,c,vt|dt,e,l):p))return!1}}return!0}function $e(t){return!(!uf(t)||Tu(t))&&(nf(t)?js:Yn).test(Qu(t))}function Le(t){return of(t)&&ye(t)==tn}function Be(t){return of(t)&&Rl(t)==nn}function Pe(t){return of(t)&&ef(t.length)&&!!jr[ye(t)]}function De(t){return\"function\"==typeof t?t:null==t?Ic:\"object\"==typeof t?_p(t)?Fe(t[0],t[1]):Me(t):Tc(t)}function Ue(t){if(!Wu(t))return Vs(t);var n=[];for(var r in fs(t))_s.call(t,r)&&\"constructor\"!=r&&n.push(r);return n}function Te(t){if(!uf(t))return qu(t);var n=Wu(t),r=[];for(var e in t)(\"constructor\"!=e||!n&&_s.call(t,e))&&r.push(e);return r}function We(t,n){return t<n}function Ne(t,n){var r=-1,e=Za(t)?es(t.length):[];return dl(t,function(t,i,u){e[++r]=n(t,i,u)}),e}function Me(t){var n=ju(t);return 1==n.length&&n[0][2]?Mu(n[0][0],n[0][1]):function(r){return r===t||Ce(r,t,n)}}function Fe(t,n){return Pu(t)&&Nu(n)?Mu(Hu(t),n):function(r){var e=Uf(r,t);return e===it&&e===n?Wf(r,t):Ee(n,e,vt|dt)}}function qe(t,n,r,e,i){t!==n&&_l(n,function(u,o){if(uf(u))i||(i=new wr),Ve(t,n,o,r,qe,e,i);else{var a=e?e(t[o],u,o+\"\",t,n,i):it;a===it&&(a=u),Ur(t,o,a)}},Mf)}function Ve(t,n,r,e,i,u,o){var a=t[r],f=n[r],c=o.get(f);if(c)return void Ur(t,r,c);var s=u?u(a,f,r+\"\",t,n,o):it,l=s===it;if(l){var p=_p(f),h=!p&&bp(f),v=!p&&!h&&Ap(f);s=f,p||h||v?_p(a)?s=a:Ya(a)?s=Di(a):h?(l=!1,s=zi(f,!0)):v?(l=!1,s=Ci(f,!0)):s=[]:vf(f)||gp(f)?(s=a,gp(a)?s=kf(a):(!uf(a)||e&&nf(a))&&(s=Su(f))):l=!1}l&&(o.set(f,s),i(s,f,e,u,o),o.delete(f)),Ur(t,r,s)}function Ze(t,n){var r=t.length;if(r)return n+=n<0?r:0,Lu(n,r)?t[n]:it}function Ye(t,n,r){var e=-1;return n=d(n.length?n:[Ic],B(mu())),I(Ne(t,function(t,r,i){return{criteria:d(n,function(n){return n(t)}),index:++e,value:t}}),function(t,n){return Li(t,n,r)})}function Ge(t,n){return Ke(t,n,function(n,r){return Wf(t,r)})}function Ke(t,n,r){for(var e=-1,i=n.length,u={};++e<i;){var o=n[e],a=ge(t,o);r(a,o)&&ui(u,ji(o,t),a)}return u}function Je(t){return function(n){return ge(n,t)}}function Xe(t,n,r,e){var i=e?z:A,u=-1,o=n.length,a=t;for(t===n&&(n=Di(n)),r&&(a=d(t,B(r)));++u<o;)for(var f=0,c=n[u],s=r?r(c):c;(f=i(a,s,f,e))>-1;)a!==t&&Is.call(a,f,1),Is.call(t,f,1);return t}function He(t,n){for(var r=t?n.length:0,e=r-1;r--;){var i=n[r];if(r==e||i!==u){var u=i;Lu(i)?Is.call(t,i,1):di(t,i)}}return t}function Qe(t,n){return t+Ws(Js()*(n-t+1))}function ti(t,n,r,e){for(var i=-1,u=Zs(Ts((n-t)/(r||1)),0),o=es(u);u--;)o[e?u:++i]=t,t+=r;return o}function ni(t,n){var r=\"\";if(!t||n<1||n>$t)return r;do{n%2&&(r+=t),(n=Ws(n/2))&&(t+=t)}while(n);return r}function ri(t,n){return Il(Zu(t,n,Ic),t+\"\")}function ei(t){return Lr(tc(t))}function ii(t,n){var r=tc(t);return Xu(r,re(n,0,r.length))}function ui(t,n,r,e){if(!uf(t))return t;n=ji(n,t);for(var i=-1,u=n.length,o=u-1,a=t;null!=a&&++i<u;){var f=Hu(n[i]),c=r;if(i!=o){var s=a[f];c=e?e(s,f,a):it,c===it&&(c=uf(s)?s:Lu(n[i+1])?[]:{})}Vr(a,f,c),a=a[f]}return t}function oi(t){return Xu(tc(t))}function ai(t,n,r){var e=-1,i=t.length;n<0&&(n=-n>i?0:i+n),r=r>i?i:r,r<0&&(r+=i),i=n>r?0:r-n>>>0,n>>>=0;for(var u=es(i);++e<i;)u[e]=t[e+n];return u}function fi(t,n){var r;return dl(t,function(t,e,i){return!(r=n(t,e,i))}),!!r}function ci(t,n,r){var e=0,i=null==t?e:t.length;if(\"number\"==typeof n&&n===n&&i<=Ut){for(;e<i;){var u=e+i>>>1,o=t[u];null!==o&&!_f(o)&&(r?o<=n:o<n)?e=u+1:i=u}return i}return si(t,n,Ic,r)}function si(t,n,r,e){n=r(n);for(var i=0,u=null==t?0:t.length,o=n!==n,a=null===n,f=_f(n),c=n===it;i<u;){var s=Ws((i+u)/2),l=r(t[s]),p=l!==it,h=null===l,v=l===l,d=_f(l);if(o)var g=e||v;else g=c?v&&(e||p):a?v&&p&&(e||!h):f?v&&p&&!h&&(e||!d):!h&&!d&&(e?l<=n:l<n);g?i=s+1:u=s}return Ys(u,Dt)}function li(t,n){for(var r=-1,e=t.length,i=0,u=[];++r<e;){var o=t[r],a=n?n(o):o;if(!r||!Va(a,f)){var f=a;u[i++]=0===o?0:o}}return u}function pi(t){return\"number\"==typeof t?t:_f(t)?Bt:+t}function hi(t){if(\"string\"==typeof t)return t;if(_p(t))return d(t,hi)+\"\";if(_f(t))return hl?hl.call(t):\"\";var n=t+\"\";return\"0\"==n&&1/t==-Ct?\"-0\":n}function vi(t,n,r){var e=-1,i=h,u=t.length,o=!0,a=[],f=a;if(r)o=!1,i=v;else if(u>=ut){var c=n?null:jl(t);if(c)return K(c);o=!1,i=D,f=new _r}else f=n?[]:a;t:for(;++e<u;){var s=t[e],l=n?n(s):s;if(s=r||0!==s?s:0,o&&l===l){for(var p=f.length;p--;)if(f[p]===l)continue t;n&&f.push(l),a.push(s)}else i(f,l,r)||(f!==a&&f.push(l),a.push(s))}return a}function di(t,n){return n=ji(n,t),null==(t=Yu(t,n))||delete t[Hu(mo(n))]}function gi(t,n,r,e){return ui(t,n,r(ge(t,n)),e)}function _i(t,n,r,e){for(var i=t.length,u=e?i:-1;(e?u--:++u<i)&&n(t[u],u,t););return r?ai(t,e?0:u,e?u+1:i):ai(t,e?u+1:0,e?i:u)}function yi(t,n){var r=t;return r instanceof w&&(r=r.value()),_(n,function(t,n){return n.func.apply(n.thisArg,g([t],n.args))},r)}function bi(t,n,r){var e=t.length;if(e<2)return e?vi(t[0]):[];for(var i=-1,u=es(e);++i<e;)for(var o=t[i],a=-1;++a<e;)a!=i&&(u[i]=ae(u[i]||o,t[a],n,r));return vi(pe(u,1),n,r)}function wi(t,n,r){for(var e=-1,i=t.length,u=n.length,o={};++e<i;){var a=e<u?n[e]:it;r(o,t[e],a)}return o}function mi(t){return Ya(t)?t:[]}function xi(t){return\"function\"==typeof t?t:Ic}function ji(t,n){return _p(t)?t:Pu(t,n)?[t]:Cl(Of(t))}function Ai(t,n,r){var e=t.length;return r=r===it?e:r,!n&&r>=e?t:ai(t,n,r)}function zi(t,n){if(n)return t.slice();var r=t.length,e=Rs?Rs(r):new t.constructor(r);return t.copy(e),e}function ki(t){var n=new t.constructor(t.byteLength);return new ks(n).set(new ks(t)),n}function Ri(t,n){var r=n?ki(t.buffer):t.buffer;return new t.constructor(r,t.byteOffset,t.byteLength)}function Oi(t,n,r){return _(n?r(Z(t),lt):Z(t),u,new t.constructor)}function Ei(t){var n=new t.constructor(t.source,qn.exec(t));return n.lastIndex=t.lastIndex,n}function Si(t,n,r){return _(n?r(K(t),lt):K(t),o,new t.constructor)}function Ii(t){return pl?fs(pl.call(t)):{}}function Ci(t,n){var r=n?ki(t.buffer):t.buffer;return new t.constructor(r,t.byteOffset,t.length)}function $i(t,n){if(t!==n){var r=t!==it,e=null===t,i=t===t,u=_f(t),o=n!==it,a=null===n,f=n===n,c=_f(n);if(!a&&!c&&!u&&t>n||u&&o&&f&&!a&&!c||e&&o&&f||!r&&f||!i)return 1;if(!e&&!u&&!c&&t<n||c&&r&&i&&!e&&!u||a&&r&&i||!o&&i||!f)return-1}return 0}function Li(t,n,r){for(var e=-1,i=t.criteria,u=n.criteria,o=i.length,a=r.length;++e<o;){var f=$i(i[e],u[e]);if(f){if(e>=a)return f;return f*(\"desc\"==r[e]?-1:1)}}return t.index-n.index}function Bi(t,n,r,e){for(var i=-1,u=t.length,o=r.length,a=-1,f=n.length,c=Zs(u-o,0),s=es(f+c),l=!e;++a<f;)s[a]=n[a];for(;++i<o;)(l||i<u)&&(s[r[i]]=t[i]);for(;c--;)s[a++]=t[i++];return s}function Pi(t,n,r,e){for(var i=-1,u=t.length,o=-1,a=r.length,f=-1,c=n.length,s=Zs(u-a,0),l=es(s+c),p=!e;++i<s;)l[i]=t[i];for(var h=i;++f<c;)l[h+f]=n[f];for(;++o<a;)(p||i<u)&&(l[h+r[o]]=t[i++]);return l}function Di(t,n){var r=-1,e=t.length;for(n||(n=es(e));++r<e;)n[r]=t[r];return n}function Ui(t,n,r,e){var i=!r;r||(r={});for(var u=-1,o=n.length;++u<o;){var a=n[u],f=e?e(r[a],t[a],a,r,t):it;f===it&&(f=t[a]),i?te(r,a,f):Vr(r,a,f)}return r}function Ti(t,n){return Ui(t,zl(t),n)}function Wi(t,n){return Ui(t,kl(t),n)}function Ni(t,n){return function(r,e){var i=_p(r)?f:Xr,u=n?n():{};return i(r,t,mu(e,2),u)}}function Mi(t){return ri(function(n,r){var e=-1,i=r.length,u=i>1?r[i-1]:it,o=i>2?r[2]:it;for(u=t.length>3&&\"function\"==typeof u?(i--,u):it,o&&Bu(r[0],r[1],o)&&(u=i<3?it:u,i=1),n=fs(n);++e<i;){var a=r[e];a&&t(n,a,e,u)}return n})}function Fi(t,n){return function(r,e){if(null==r)return r;if(!Za(r))return t(r,e);for(var i=r.length,u=n?i:-1,o=fs(r);(n?u--:++u<i)&&!1!==e(o[u],u,o););return r}}function qi(t){return function(n,r,e){for(var i=-1,u=fs(n),o=e(n),a=o.length;a--;){var f=o[t?a:++i];if(!1===r(u[f],f,u))break}return n}}function Vi(t,n,r){function e(){return(this&&this!==$r&&this instanceof e?u:t).apply(i?r:this,arguments)}var i=n&gt,u=Gi(t);return e}function Zi(t){return function(n){n=Of(n);var r=F(n)?tt(n):it,e=r?r[0]:n.charAt(0),i=r?Ai(r,1).join(\"\"):n.slice(1);return e[t]()+i}}function Yi(t){return function(n){return _(kc(oc(n).replace(dr,\"\")),t,\"\")}}function Gi(t){return function(){var n=arguments;switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3]);case 5:return new t(n[0],n[1],n[2],n[3],n[4]);case 6:return new t(n[0],n[1],n[2],n[3],n[4],n[5]);case 7:return new t(n[0],n[1],n[2],n[3],n[4],n[5],n[6])}var r=vl(t.prototype),e=t.apply(r,n);return uf(e)?e:r}}function Ki(t,n,r){function e(){for(var u=arguments.length,o=es(u),f=u,c=wu(e);f--;)o[f]=arguments[f];var s=u<3&&o[0]!==c&&o[u-1]!==c?[]:G(o,c);return(u-=s.length)<r?ou(t,n,Hi,e.placeholder,it,o,s,it,it,r-u):a(this&&this!==$r&&this instanceof e?i:t,this,o)}var i=Gi(t);return e}function Ji(t){return function(n,r,e){var i=fs(n);if(!Za(n)){var u=mu(r,3);n=Nf(n),r=function(t){return u(i[t],t,i)}}var o=t(n,r,e);return o>-1?i[u?n[o]:o]:it}}function Xi(t){return gu(function(n){var r=n.length,e=r,u=i.prototype.thru;for(t&&n.reverse();e--;){var o=n[e];if(\"function\"!=typeof o)throw new ls(at);if(u&&!a&&\"wrapper\"==bu(o))var a=new i([],!0)}for(e=a?e:r;++e<r;){o=n[e];var f=bu(o),c=\"wrapper\"==f?Al(o):it;a=c&&Uu(c[0])&&c[1]==(jt|bt|mt|At)&&!c[4].length&&1==c[9]?a[bu(c[0])].apply(a,c[3]):1==o.length&&Uu(o)?a[f]():a.thru(o)}return function(){var t=arguments,e=t[0];if(a&&1==t.length&&_p(e))return a.plant(e).value();for(var i=0,u=r?n[i].apply(this,t):e;++i<r;)u=n[i].call(this,u);return u}})}function Hi(t,n,r,e,i,u,o,a,f,c){function s(){for(var _=arguments.length,y=es(_),b=_;b--;)y[b]=arguments[b];if(v)var w=wu(s),m=W(y,w);if(e&&(y=Bi(y,e,i,v)),u&&(y=Pi(y,u,o,v)),_-=m,v&&_<c){var x=G(y,w);return ou(t,n,Hi,s.placeholder,r,y,x,a,f,c-_)}var j=p?r:this,A=h?j[t]:t;return _=y.length,a?y=Gu(y,a):d&&_>1&&y.reverse(),l&&f<_&&(y.length=f),this&&this!==$r&&this instanceof s&&(A=g||Gi(A)),A.apply(j,y)}var l=n&jt,p=n&gt,h=n&_t,v=n&(bt|wt),d=n&zt,g=h?it:Gi(t);return s}function Qi(t,n){return function(r,e){return Ae(r,t,n(e),{})}}function tu(t,n){return function(r,e){var i;if(r===it&&e===it)return n;if(r!==it&&(i=r),e!==it){if(i===it)return e;\"string\"==typeof r||\"string\"==typeof e?(r=hi(r),e=hi(e)):(r=pi(r),e=pi(e)),i=t(r,e)}return i}}function nu(t){return gu(function(n){return n=d(n,B(mu())),ri(function(r){var e=this;return t(n,function(t){return a(t,e,r)})})})}function ru(t,n){n=n===it?\" \":hi(n);var r=n.length;if(r<2)return r?ni(n,t):n;var e=ni(n,Ts(t/Q(n)));return F(n)?Ai(tt(e),0,t).join(\"\"):e.slice(0,t)}function eu(t,n,r,e){function i(){for(var n=-1,f=arguments.length,c=-1,s=e.length,l=es(s+f),p=this&&this!==$r&&this instanceof i?o:t;++c<s;)l[c]=e[c];for(;f--;)l[c++]=arguments[++n];return a(p,u?r:this,l)}var u=n&gt,o=Gi(t);return i}function iu(t){return function(n,r,e){return e&&\"number\"!=typeof e&&Bu(n,r,e)&&(r=e=it),n=xf(n),r===it?(r=n,n=0):r=xf(r),e=e===it?n<r?1:-1:xf(e),ti(n,r,e,t)}}function uu(t){return function(n,r){return\"string\"==typeof n&&\"string\"==typeof r||(n=zf(n),r=zf(r)),t(n,r)}}function ou(t,n,r,e,i,u,o,a,f,c){var s=n&bt,l=s?o:it,p=s?it:o,h=s?u:it,v=s?it:u;n|=s?mt:xt,(n&=~(s?xt:mt))&yt||(n&=~(gt|_t));var d=[t,n,i,h,l,v,p,a,f,c],g=r.apply(it,d);return Uu(t)&&El(g,d),g.placeholder=e,Ku(g,t,n)}function au(t){var n=as[t];return function(t,r){if(t=zf(t),r=null==r?0:Ys(jf(r),292)){var e=(Of(t)+\"e\").split(\"e\");return e=(Of(n(e[0]+\"e\"+(+e[1]+r)))+\"e\").split(\"e\"),+(e[0]+\"e\"+(+e[1]-r))}return n(t)}}function fu(t){return function(n){var r=Rl(n);return r==Kt?Z(n):r==nn?J(n):L(n,t(n))}}function cu(t,n,r,e,i,u,o,a){var f=n&_t;if(!f&&\"function\"!=typeof t)throw new ls(at);var c=e?e.length:0;if(c||(n&=~(mt|xt),e=i=it),o=o===it?o:Zs(jf(o),0),a=a===it?a:jf(a),c-=i?i.length:0,n&xt){var s=e,l=i;e=i=it}var p=f?it:Al(t),h=[t,n,r,e,i,s,l,u,o,a];if(p&&Fu(h,p),t=h[0],n=h[1],r=h[2],e=h[3],i=h[4],a=h[9]=h[9]===it?f?0:t.length:Zs(h[9]-c,0),!a&&n&(bt|wt)&&(n&=~(bt|wt)),n&&n!=gt)v=n==bt||n==wt?Ki(t,n,a):n!=mt&&n!=(gt|mt)||i.length?Hi.apply(it,h):eu(t,n,r,e);else var v=Vi(t,n,r);return Ku((p?bl:El)(v,h),t,n)}function su(t,n,r,e){return t===it||Va(t,vs[r])&&!_s.call(e,r)?n:t}function lu(t,n,r,e,i,u){return uf(t)&&uf(n)&&(u.set(n,t),qe(t,n,it,lu,u),u.delete(n)),t}function pu(t){return vf(t)?it:t}function hu(t,n,r,e,i,u){var o=r&vt,a=t.length,f=n.length;if(a!=f&&!(o&&f>a))return!1;var c=u.get(t);if(c&&u.get(n))return c==n;var s=-1,l=!0,p=r&dt?new _r:it;for(u.set(t,n),u.set(n,t);++s<a;){var h=t[s],v=n[s];if(e)var d=o?e(v,h,s,n,t,u):e(h,v,s,t,n,u);if(d!==it){if(d)continue;l=!1;break}if(p){if(!b(n,function(t,n){if(!D(p,n)&&(h===t||i(h,t,r,e,u)))return p.push(n)})){l=!1;break}}else if(h!==v&&!i(h,v,r,e,u)){l=!1;break}}return u.delete(t),u.delete(n),l}function vu(t,n,r,e,i,u,o){switch(r){case cn:if(t.byteLength!=n.byteLength||t.byteOffset!=n.byteOffset)return!1;t=t.buffer,n=n.buffer;case fn:return!(t.byteLength!=n.byteLength||!u(new ks(t),new ks(n)));case Ft:case qt:case Jt:return Va(+t,+n);case Zt:return t.name==n.name&&t.message==n.message;case tn:case rn:return t==n+\"\";case Kt:var a=Z;case nn:var f=e&vt;if(a||(a=K),t.size!=n.size&&!f)return!1;var c=o.get(t);if(c)return c==n;e|=dt,o.set(t,n);var s=hu(a(t),a(n),e,i,u,o);return o.delete(t),s;case en:if(pl)return pl.call(t)==pl.call(n)}return!1}function du(t,n,r,e,i,u){var o=r&vt,a=_u(t),f=a.length;if(f!=_u(n).length&&!o)return!1;for(var c=f;c--;){var s=a[c];if(!(o?s in n:_s.call(n,s)))return!1}var l=u.get(t);if(l&&u.get(n))return l==n;var p=!0;u.set(t,n),u.set(n,t);for(var h=o;++c<f;){s=a[c];var v=t[s],d=n[s];if(e)var g=o?e(d,v,s,n,t,u):e(v,d,s,t,n,u);if(!(g===it?v===d||i(v,d,r,e,u):g)){p=!1;break}h||(h=\"constructor\"==s)}if(p&&!h){var _=t.constructor,y=n.constructor;_!=y&&\"constructor\"in t&&\"constructor\"in n&&!(\"function\"==typeof _&&_ instanceof _&&\"function\"==typeof y&&y instanceof y)&&(p=!1)}return u.delete(t),u.delete(n),p}function gu(t){return Il(Zu(t,it,po),t+\"\")}function _u(t){return _e(t,Nf,zl)}function yu(t){return _e(t,Mf,kl)}function bu(t){for(var n=t.name+\"\",r=ul[n],e=_s.call(ul,n)?r.length:0;e--;){var i=r[e],u=i.func;if(null==u||u==t)return i.name}return n}function wu(t){return(_s.call(r,\"placeholder\")?r:t).placeholder}function mu(){var t=r.iteratee||Cc;return t=t===Cc?De:t,arguments.length?t(arguments[0],arguments[1]):t}function xu(t,n){var r=t.__data__;return Du(n)?r[\"string\"==typeof n?\"string\":\"hash\"]:r.map}function ju(t){for(var n=Nf(t),r=n.length;r--;){var e=n[r],i=t[e];n[r]=[e,i,Nu(i)]}return n}function Au(t,n){var r=M(t,n);return $e(r)?r:it}function zu(t){var n=_s.call(t,Ls),r=t[Ls];try{t[Ls]=it;var e=!0}catch(t){}var i=ws.call(t);return e&&(n?t[Ls]=r:delete t[Ls]),i}function ku(t,n,r){for(var e=-1,i=r.length;++e<i;){var u=r[e],o=u.size;switch(u.type){case\"drop\":t+=o;break;case\"dropRight\":n-=o;break;case\"take\":n=Ys(n,t+o);break;case\"takeRight\":t=Zs(t,n-o)}}return{start:t,end:n}}function Ru(t){var n=t.match(Tn);return n?n[1].split(Wn):[]}function Ou(t,n,r){n=ji(n,t);for(var e=-1,i=n.length,u=!1;++e<i;){var o=Hu(n[e]);if(!(u=null!=t&&r(t,o)))break;t=t[o]}return u||++e!=i?u:!!(i=null==t?0:t.length)&&ef(i)&&Lu(o,i)&&(_p(t)||gp(t))}function Eu(t){var n=t.length,r=t.constructor(n);return n&&\"string\"==typeof t[0]&&_s.call(t,\"index\")&&(r.index=t.index,r.input=t.input),r}function Su(t){return\"function\"!=typeof t.constructor||Wu(t)?{}:vl(Os(t))}function Iu(t,n,r,e){var i=t.constructor;switch(n){case fn:return ki(t);case Ft:case qt:return new i(+t);case cn:return Ri(t,e);case sn:case ln:case pn:case hn:case vn:case dn:case gn:case _n:case yn:return Ci(t,e);case Kt:return Oi(t,e,r);case Jt:case rn:return new i(t);case tn:return Ei(t);case nn:return Si(t,e,r);case en:return Ii(t)}}function Cu(t,n){var r=n.length;if(!r)return t;var e=r-1;return n[e]=(r>1?\"& \":\"\")+n[e],n=n.join(r>2?\", \":\" \"),t.replace(Un,\"{\\n/* [wrapped with \"+n+\"] */\\n\")}function $u(t){return _p(t)||gp(t)||!!(Cs&&t&&t[Cs])}function Lu(t,n){return!!(n=null==n?$t:n)&&(\"number\"==typeof t||Kn.test(t))&&t>-1&&t%1==0&&t<n}function Bu(t,n,r){if(!uf(r))return!1;var e=typeof n;return!!(\"number\"==e?Za(r)&&Lu(n,r.length):\"string\"==e&&n in r)&&Va(r[n],t)}function Pu(t,n){if(_p(t))return!1;var r=typeof t;return!(\"number\"!=r&&\"symbol\"!=r&&\"boolean\"!=r&&null!=t&&!_f(t))||(Sn.test(t)||!En.test(t)||null!=n&&t in fs(n))}function Du(t){var n=typeof t;return\"string\"==n||\"number\"==n||\"symbol\"==n||\"boolean\"==n?\"__proto__\"!==t:null===t}function Uu(t){var n=bu(t),e=r[n];if(\"function\"!=typeof e||!(n in w.prototype))return!1;if(t===e)return!0;var i=Al(e);return!!i&&t===i[0]}function Tu(t){return!!bs&&bs in t}function Wu(t){var n=t&&t.constructor;return t===(\"function\"==typeof n&&n.prototype||vs)}function Nu(t){return t===t&&!uf(t)}function Mu(t,n){return function(r){return null!=r&&(r[t]===n&&(n!==it||t in fs(r)))}}function Fu(t,n){var r=t[1],e=n[1],i=r|e,u=i<(gt|_t|jt),o=e==jt&&r==bt||e==jt&&r==At&&t[7].length<=n[8]||e==(jt|At)&&n[7].length<=n[8]&&r==bt;if(!u&&!o)return t;e&gt&&(t[2]=n[2],i|=r&gt?0:yt);var a=n[3];if(a){var f=t[3];t[3]=f?Bi(f,a,n[4]):a,t[4]=f?G(t[3],st):n[4]}return a=n[5],a&&(f=t[5],t[5]=f?Pi(f,a,n[6]):a,t[6]=f?G(t[5],st):n[6]),a=n[7],a&&(t[7]=a),e&jt&&(t[8]=null==t[8]?n[8]:Ys(t[8],n[8])),null==t[9]&&(t[9]=n[9]),t[0]=n[0],t[1]=i,t}function qu(t){var n=[];if(null!=t)for(var r in fs(t))n.push(r);return n}function Vu(t){return ws.call(t)}function Zu(t,n,r){return n=Zs(n===it?t.length-1:n,0),function(){for(var e=arguments,i=-1,u=Zs(e.length-n,0),o=es(u);++i<u;)o[i]=e[n+i];i=-1;for(var f=es(n+1);++i<n;)f[i]=e[i];return f[n]=r(o),a(t,this,f)}}function Yu(t,n){return n.length<2?t:ge(t,ai(n,0,-1))}function Gu(t,n){for(var r=t.length,e=Ys(n.length,r),i=Di(t);e--;){var u=n[e];t[e]=Lu(u,r)?i[u]:it}return t}function Ku(t,n,r){var e=n+\"\";return Il(t,Cu(e,to(Ru(e),r)))}function Ju(t){var n=0,r=0;return function(){var e=Gs(),i=Et-(e-r);if(r=e,i>0){if(++n>=Ot)return arguments[0]}else n=0;return t.apply(it,arguments)}}function Xu(t,n){var r=-1,e=t.length,i=e-1;for(n=n===it?e:n;++r<n;){var u=Qe(r,i),o=t[u];t[u]=t[r],t[r]=o}return t.length=n,t}function Hu(t){if(\"string\"==typeof t||_f(t))return t;var n=t+\"\";return\"0\"==n&&1/t==-Ct?\"-0\":n}function Qu(t){if(null!=t){try{return gs.call(t)}catch(t){}try{return t+\"\"}catch(t){}}return\"\"}function to(t,n){return c(Tt,function(r){var e=\"_.\"+r[0];n&r[1]&&!h(t,e)&&t.push(e)}),t.sort()}function no(t){if(t instanceof w)return t.clone();var n=new i(t.__wrapped__,t.__chain__);return n.__actions__=Di(t.__actions__),n.__index__=t.__index__,n.__values__=t.__values__,n}function ro(t,n,r){n=(r?Bu(t,n,r):n===it)?1:Zs(jf(n),0);var e=null==t?0:t.length;if(!e||n<1)return[];for(var i=0,u=0,o=es(Ts(e/n));i<e;)o[u++]=ai(t,i,i+=n);return o}function eo(t){for(var n=-1,r=null==t?0:t.length,e=0,i=[];++n<r;){var u=t[n];u&&(i[e++]=u)}return i}function io(){var t=arguments.length;if(!t)return[];for(var n=es(t-1),r=arguments[0],e=t;e--;)n[e-1]=arguments[e];return g(_p(r)?Di(r):[r],pe(n,1))}function uo(t,n,r){var e=null==t?0:t.length;return e?(n=r||n===it?1:jf(n),ai(t,n<0?0:n,e)):[]}function oo(t,n,r){var e=null==t?0:t.length;return e?(n=r||n===it?1:jf(n),n=e-n,ai(t,0,n<0?0:n)):[]}function ao(t,n){return t&&t.length?_i(t,mu(n,3),!0,!0):[]}function fo(t,n){return t&&t.length?_i(t,mu(n,3),!0):[]}function co(t,n,r,e){var i=null==t?0:t.length;return i?(r&&\"number\"!=typeof r&&Bu(t,n,r)&&(r=0,e=i),se(t,n,r,e)):[]}function so(t,n,r){var e=null==t?0:t.length;if(!e)return-1;var i=null==r?0:jf(r);return i<0&&(i=Zs(e+i,0)),j(t,mu(n,3),i)}function lo(t,n,r){var e=null==t?0:t.length;if(!e)return-1;var i=e-1;return r!==it&&(i=jf(r),i=r<0?Zs(e+i,0):Ys(i,e-1)),j(t,mu(n,3),i,!0)}function po(t){return(null==t?0:t.length)?pe(t,1):[]}function ho(t){return(null==t?0:t.length)?pe(t,Ct):[]}function vo(t,n){return(null==t?0:t.length)?(n=n===it?1:jf(n),pe(t,n)):[]}function go(t){for(var n=-1,r=null==t?0:t.length,e={};++n<r;){var i=t[n];e[i[0]]=i[1]}return e}function _o(t){return t&&t.length?t[0]:it}function yo(t,n,r){var e=null==t?0:t.length;if(!e)return-1;var i=null==r?0:jf(r);return i<0&&(i=Zs(e+i,0)),A(t,n,i)}function bo(t){return(null==t?0:t.length)?ai(t,0,-1):[]}function wo(t,n){return null==t?\"\":qs.call(t,n)}function mo(t){var n=null==t?0:t.length;return n?t[n-1]:it}function xo(t,n,r){var e=null==t?0:t.length;if(!e)return-1;var i=e;return r!==it&&(i=jf(r),i=i<0?Zs(e+i,0):Ys(i,e-1)),n===n?H(t,n,i):j(t,k,i,!0)}function jo(t,n){return t&&t.length?Ze(t,jf(n)):it}function Ao(t,n){return t&&t.length&&n&&n.length?Xe(t,n):t}function zo(t,n,r){return t&&t.length&&n&&n.length?Xe(t,n,mu(r,2)):t}function ko(t,n,r){return t&&t.length&&n&&n.length?Xe(t,n,it,r):t}function Ro(t,n){var r=[];if(!t||!t.length)return r;var e=-1,i=[],u=t.length;for(n=mu(n,3);++e<u;){var o=t[e];n(o,e,t)&&(r.push(o),i.push(e))}return He(t,i),r}function Oo(t){return null==t?t:Xs.call(t)}function Eo(t,n,r){var e=null==t?0:t.length;return e?(r&&\"number\"!=typeof r&&Bu(t,n,r)?(n=0,r=e):(n=null==n?0:jf(n),r=r===it?e:jf(r)),ai(t,n,r)):[]}function So(t,n){return ci(t,n)}function Io(t,n,r){return si(t,n,mu(r,2))}function Co(t,n){var r=null==t?0:t.length;if(r){var e=ci(t,n);if(e<r&&Va(t[e],n))return e}return-1}function $o(t,n){return ci(t,n,!0)}function Lo(t,n,r){return si(t,n,mu(r,2),!0)}function Bo(t,n){if(null==t?0:t.length){var r=ci(t,n,!0)-1;if(Va(t[r],n))return r}return-1}function Po(t){return t&&t.length?li(t):[]}function Do(t,n){return t&&t.length?li(t,mu(n,2)):[]}function Uo(t){var n=null==t?0:t.length;return n?ai(t,1,n):[]}function To(t,n,r){return t&&t.length?(n=r||n===it?1:jf(n),ai(t,0,n<0?0:n)):[]}function Wo(t,n,r){var e=null==t?0:t.length;return e?(n=r||n===it?1:jf(n),n=e-n,ai(t,n<0?0:n,e)):[]}function No(t,n){return t&&t.length?_i(t,mu(n,3),!1,!0):[]}function Mo(t,n){return t&&t.length?_i(t,mu(n,3)):[]}function Fo(t){return t&&t.length?vi(t):[]}function qo(t,n){return t&&t.length?vi(t,mu(n,2)):[]}function Vo(t,n){return n=\"function\"==typeof n?n:it,t&&t.length?vi(t,it,n):[]}function Zo(t){if(!t||!t.length)return[];var n=0;return t=p(t,function(t){if(Ya(t))return n=Zs(t.length,n),!0}),$(n,function(n){return d(t,O(n))})}function Yo(t,n){if(!t||!t.length)return[];var r=Zo(t);return null==n?r:d(r,function(t){return a(n,it,t)})}function Go(t,n){return wi(t||[],n||[],Vr)}function Ko(t,n){return wi(t||[],n||[],ui)}function Jo(t){var n=r(t);return n.__chain__=!0,n}function Xo(t,n){return n(t),t}function Ho(t,n){return n(t)}function Qo(){return Jo(this)}function ta(){return new i(this.value(),this.__chain__)}function na(){this.__values__===it&&(this.__values__=mf(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?it:this.__values__[this.__index__++]}}function ra(){return this}function ea(t){for(var n,r=this;r instanceof e;){var i=no(r);i.__index__=0,i.__values__=it,n?u.__wrapped__=i:n=i;var u=i;r=r.__wrapped__}return u.__wrapped__=t,n}function ia(){var t=this.__wrapped__;if(t instanceof w){var n=t;return this.__actions__.length&&(n=new w(this)),n=n.reverse(),n.__actions__.push({func:Ho,args:[Oo],thisArg:it}),new i(n,this.__chain__)}return this.thru(Oo)}function ua(){return yi(this.__wrapped__,this.__actions__)}function oa(t,n,r){var e=_p(t)?l:fe;return r&&Bu(t,n,r)&&(n=it),e(t,mu(n,3))}function aa(t,n){return(_p(t)?p:le)(t,mu(n,3))}function fa(t,n){return pe(va(t,n),1)}function ca(t,n){return pe(va(t,n),Ct)}function sa(t,n,r){return r=r===it?1:jf(r),pe(va(t,n),r)}function la(t,n){return(_p(t)?c:dl)(t,mu(n,3))}function pa(t,n){return(_p(t)?s:gl)(t,mu(n,3))}function ha(t,n,r,e){t=Za(t)?t:tc(t),r=r&&!e?jf(r):0;var i=t.length;return r<0&&(r=Zs(i+r,0)),gf(t)?r<=i&&t.indexOf(n,r)>-1:!!i&&A(t,n,r)>-1}function va(t,n){return(_p(t)?d:Ne)(t,mu(n,3))}function da(t,n,r,e){return null==t?[]:(_p(n)||(n=null==n?[]:[n]),r=e?it:r,_p(r)||(r=null==r?[]:[r]),Ye(t,n,r))}function ga(t,n,r){var e=_p(t)?_:S,i=arguments.length<3;return e(t,mu(n,4),r,i,dl)}function _a(t,n,r){var e=_p(t)?y:S,i=arguments.length<3;return e(t,mu(n,4),r,i,gl)}function ya(t,n){return(_p(t)?p:le)(t,Ca(mu(n,3)))}function ba(t){return(_p(t)?Lr:ei)(t)}function wa(t,n,r){return n=(r?Bu(t,n,r):n===it)?1:jf(n),(_p(t)?Br:ii)(t,n)}function ma(t){return(_p(t)?Dr:oi)(t)}function xa(t){if(null==t)return 0;if(Za(t))return gf(t)?Q(t):t.length;var n=Rl(t);return n==Kt||n==nn?t.size:Ue(t).length}function ja(t,n,r){var e=_p(t)?b:fi;return r&&Bu(t,n,r)&&(n=it),e(t,mu(n,3))}function Aa(t,n){if(\"function\"!=typeof n)throw new ls(at);return t=jf(t),function(){if(--t<1)return n.apply(this,arguments)}}function za(t,n,r){return n=r?it:n,n=t&&null==n?t.length:n,cu(t,jt,it,it,it,it,n)}function ka(t,n){var r;if(\"function\"!=typeof n)throw new ls(at);return t=jf(t),function(){return--t>0&&(r=n.apply(this,arguments)),t<=1&&(n=it),r}}function Ra(t,n,r){n=r?it:n;var e=cu(t,bt,it,it,it,it,it,n);return e.placeholder=Ra.placeholder,e}function Oa(t,n,r){n=r?it:n;var e=cu(t,wt,it,it,it,it,it,n);return e.placeholder=Oa.placeholder,e}function Ea(t,n,r){function e(n){var r=p,e=h;return p=h=it,y=n,d=t.apply(e,r)}function i(t){return y=t,g=Sl(a,n),b?e(t):d}function u(t){var r=t-_,e=t-y,i=n-r;return w?Ys(i,v-e):i}function o(t){var r=t-_,e=t-y;return _===it||r>=n||r<0||w&&e>=v}function a(){var t=up();if(o(t))return f(t);g=Sl(a,u(t))}function f(t){return g=it,m&&p?e(t):(p=h=it,d)}function c(){g!==it&&xl(g),y=0,p=_=h=g=it}function s(){return g===it?d:f(up())}function l(){var t=up(),r=o(t);if(p=arguments,h=this,_=t,r){if(g===it)return i(_);if(w)return g=Sl(a,n),e(_)}return g===it&&(g=Sl(a,n)),d}var p,h,v,d,g,_,y=0,b=!1,w=!1,m=!0;if(\"function\"!=typeof t)throw new ls(at);return n=zf(n)||0,uf(r)&&(b=!!r.leading,w=\"maxWait\"in r,v=w?Zs(zf(r.maxWait)||0,n):v,m=\"trailing\"in r?!!r.trailing:m),l.cancel=c,l.flush=s,l}function Sa(t){return cu(t,zt)}function Ia(t,n){if(\"function\"!=typeof t||null!=n&&\"function\"!=typeof n)throw new ls(at);var r=function(){var e=arguments,i=n?n.apply(this,e):e[0],u=r.cache;if(u.has(i))return u.get(i);var o=t.apply(this,e);return r.cache=u.set(i,o)||u,o};return r.cache=new(Ia.Cache||cr),r}function Ca(t){if(\"function\"!=typeof t)throw new ls(at);return function(){var n=arguments;switch(n.length){case 0:return!t.call(this);case 1:return!t.call(this,n[0]);case 2:return!t.call(this,n[0],n[1]);case 3:return!t.call(this,n[0],n[1],n[2])}return!t.apply(this,n)}}function $a(t){return ka(2,t)}function La(t,n){if(\"function\"!=typeof t)throw new ls(at);return n=n===it?n:jf(n),ri(t,n)}function Ba(t,n){if(\"function\"!=typeof t)throw new ls(at);return n=null==n?0:Zs(jf(n),0),ri(function(r){var e=r[n],i=Ai(r,0,n);return e&&g(i,e),a(t,this,i)})}function Pa(t,n,r){var e=!0,i=!0;if(\"function\"!=typeof t)throw new ls(at);return uf(r)&&(e=\"leading\"in r?!!r.leading:e,i=\"trailing\"in r?!!r.trailing:i),Ea(t,n,{leading:e,maxWait:n,trailing:i})}function Da(t){return za(t,1)}function Ua(t,n){return lp(xi(n),t)}function Ta(){if(!arguments.length)return[];var t=arguments[0];return _p(t)?t:[t]}function Wa(t){return ee(t,ht)}function Na(t,n){return n=\"function\"==typeof n?n:it,ee(t,ht,n)}function Ma(t){return ee(t,lt|ht)}function Fa(t,n){return n=\"function\"==typeof n?n:it,ee(t,lt|ht,n)}function qa(t,n){return null==n||ue(t,n,Nf(n))}function Va(t,n){return t===n||t!==t&&n!==n}function Za(t){return null!=t&&ef(t.length)&&!nf(t)}function Ya(t){return of(t)&&Za(t)}function Ga(t){return!0===t||!1===t||of(t)&&ye(t)==Ft}function Ka(t){return of(t)&&1===t.nodeType&&!vf(t)}function Ja(t){if(null==t)return!0;if(Za(t)&&(_p(t)||\"string\"==typeof t||\"function\"==typeof t.splice||bp(t)||Ap(t)||gp(t)))return!t.length;var n=Rl(t);if(n==Kt||n==nn)return!t.size;if(Wu(t))return!Ue(t).length;for(var r in t)if(_s.call(t,r))return!1;return!0}function Xa(t,n){return Ee(t,n)}function Ha(t,n,r){r=\"function\"==typeof r?r:it;var e=r?r(t,n):it;return e===it?Ee(t,n,it,r):!!e}function Qa(t){if(!of(t))return!1;var n=ye(t);return n==Zt||n==Vt||\"string\"==typeof t.message&&\"string\"==typeof t.name&&!vf(t)}function tf(t){return\"number\"==typeof t&&Fs(t)}function nf(t){if(!uf(t))return!1;var n=ye(t);return n==Yt||n==Gt||n==Mt||n==Qt}function rf(t){return\"number\"==typeof t&&t==jf(t)}function ef(t){return\"number\"==typeof t&&t>-1&&t%1==0&&t<=$t}function uf(t){var n=typeof t;return null!=t&&(\"object\"==n||\"function\"==n)}function of(t){return null!=t&&\"object\"==typeof t}function af(t,n){return t===n||Ce(t,n,ju(n))}function ff(t,n,r){return r=\"function\"==typeof r?r:it,Ce(t,n,ju(n),r)}function cf(t){return hf(t)&&t!=+t}function sf(t){if(Ol(t))throw new us(ot);return $e(t)}function lf(t){return null===t}function pf(t){return null==t}function hf(t){return\"number\"==typeof t||of(t)&&ye(t)==Jt}function vf(t){if(!of(t)||ye(t)!=Ht)return!1;var n=Os(t);if(null===n)return!0;var r=_s.call(n,\"constructor\")&&n.constructor;return\"function\"==typeof r&&r instanceof r&&gs.call(r)==ms}function df(t){return rf(t)&&t>=-$t&&t<=$t}function gf(t){return\"string\"==typeof t||!_p(t)&&of(t)&&ye(t)==rn}function _f(t){return\"symbol\"==typeof t||of(t)&&ye(t)==en}function yf(t){return t===it}function bf(t){return of(t)&&Rl(t)==on}function wf(t){return of(t)&&ye(t)==an}function mf(t){if(!t)return[];if(Za(t))return gf(t)?tt(t):Di(t);if($s&&t[$s])return V(t[$s]());var n=Rl(t);return(n==Kt?Z:n==nn?K:tc)(t)}function xf(t){if(!t)return 0===t?t:0;if((t=zf(t))===Ct||t===-Ct){return(t<0?-1:1)*Lt}return t===t?t:0}function jf(t){var n=xf(t),r=n%1;return n===n?r?n-r:n:0}function Af(t){return t?re(jf(t),0,Pt):0}function zf(t){if(\"number\"==typeof t)return t;if(_f(t))return Bt;if(uf(t)){var n=\"function\"==typeof t.valueOf?t.valueOf():t;t=uf(n)?n+\"\":n}if(\"string\"!=typeof t)return 0===t?t:+t;t=t.replace(Bn,\"\");var r=Zn.test(t);return r||Gn.test(t)?Sr(t.slice(2),r?2:8):Vn.test(t)?Bt:+t}function kf(t){return Ui(t,Mf(t))}function Rf(t){return t?re(jf(t),-$t,$t):0===t?t:0}function Of(t){return null==t?\"\":hi(t)}function Ef(t,n){var r=vl(t);return null==n?r:Hr(r,n)}function Sf(t,n){return x(t,mu(n,3),he)}function If(t,n){return x(t,mu(n,3),ve)}function Cf(t,n){return null==t?t:_l(t,mu(n,3),Mf)}function $f(t,n){return null==t?t:yl(t,mu(n,3),Mf)}function Lf(t,n){return t&&he(t,mu(n,3))}function Bf(t,n){return t&&ve(t,mu(n,3))}function Pf(t){return null==t?[]:de(t,Nf(t))}function Df(t){return null==t?[]:de(t,Mf(t))}function Uf(t,n,r){var e=null==t?it:ge(t,n);return e===it?r:e}function Tf(t,n){return null!=t&&Ou(t,n,we)}function Wf(t,n){return null!=t&&Ou(t,n,me)}function Nf(t){return Za(t)?Cr(t):Ue(t)}function Mf(t){return Za(t)?Cr(t,!0):Te(t)}function Ff(t,n){var r={};return n=mu(n,3),he(t,function(t,e,i){te(r,n(t,e,i),t)}),r}function qf(t,n){var r={};return n=mu(n,3),he(t,function(t,e,i){te(r,e,n(t,e,i))}),r}function Vf(t,n){return Zf(t,Ca(mu(n)))}function Zf(t,n){if(null==t)return{};var r=d(yu(t),function(t){return[t]});return n=mu(n),Ke(t,r,function(t,r){return n(t,r[0])})}function Yf(t,n,r){n=ji(n,t);var e=-1,i=n.length;for(i||(i=1,t=it);++e<i;){var u=null==t?it:t[Hu(n[e])];u===it&&(e=i,u=r),t=nf(u)?u.call(t):u}return t}function Gf(t,n,r){return null==t?t:ui(t,n,r)}function Kf(t,n,r,e){return e=\"function\"==typeof e?e:it,null==t?t:ui(t,n,r,e)}function Jf(t,n,r){var e=_p(t),i=e||bp(t)||Ap(t);if(n=mu(n,4),null==r){var u=t&&t.constructor;r=i?e?new u:[]:uf(t)&&nf(u)?vl(Os(t)):{}}return(i?c:he)(t,function(t,e,i){return n(r,t,e,i)}),r}function Xf(t,n){return null==t||di(t,n)}function Hf(t,n,r){return null==t?t:gi(t,n,xi(r))}function Qf(t,n,r,e){return e=\"function\"==typeof e?e:it,null==t?t:gi(t,n,xi(r),e)}function tc(t){return null==t?[]:P(t,Nf(t))}function nc(t){return null==t?[]:P(t,Mf(t))}function rc(t,n,r){return r===it&&(r=n,n=it),r!==it&&(r=zf(r),r=r===r?r:0),n!==it&&(n=zf(n),n=n===n?n:0),re(zf(t),n,r)}function ec(t,n,r){return n=xf(n),r===it?(r=n,n=0):r=xf(r),t=zf(t),xe(t,n,r)}function ic(t,n,r){if(r&&\"boolean\"!=typeof r&&Bu(t,n,r)&&(n=r=it),r===it&&(\"boolean\"==typeof n?(r=n,n=it):\"boolean\"==typeof t&&(r=t,t=it)),t===it&&n===it?(t=0,n=1):(t=xf(t),n===it?(n=t,t=0):n=xf(n)),t>n){var e=t;t=n,n=e}if(r||t%1||n%1){var i=Js();return Ys(t+i*(n-t+Er(\"1e-\"+((i+\"\").length-1))),n)}return Qe(t,n)}function uc(t){return Jp(Of(t).toLowerCase())}function oc(t){return(t=Of(t))&&t.replace(Jn,Zr).replace(gr,\"\")}function ac(t,n,r){t=Of(t),n=hi(n);var e=t.length;r=r===it?e:re(jf(r),0,e);var i=r;return(r-=n.length)>=0&&t.slice(r,i)==n}function fc(t){return t=Of(t),t&&zn.test(t)?t.replace(jn,Yr):t}function cc(t){return t=Of(t),t&&Ln.test(t)?t.replace($n,\"\\\\$&\"):t}function sc(t,n,r){t=Of(t),n=jf(n);var e=n?Q(t):0;if(!n||e>=n)return t;var i=(n-e)/2;return ru(Ws(i),r)+t+ru(Ts(i),r)}function lc(t,n,r){t=Of(t),n=jf(n);var e=n?Q(t):0;return n&&e<n?t+ru(n-e,r):t}function pc(t,n,r){t=Of(t),n=jf(n);var e=n?Q(t):0;return n&&e<n?ru(n-e,r)+t:t}function hc(t,n,r){return r||null==n?n=0:n&&(n=+n),Ks(Of(t).replace(Pn,\"\"),n||0)}function vc(t,n,r){return n=(r?Bu(t,n,r):n===it)?1:jf(n),ni(Of(t),n)}function dc(){var t=arguments,n=Of(t[0]);return t.length<3?n:n.replace(t[1],t[2])}function gc(t,n,r){return r&&\"number\"!=typeof r&&Bu(t,n,r)&&(n=r=it),(r=r===it?Pt:r>>>0)?(t=Of(t),t&&(\"string\"==typeof n||null!=n&&!xp(n))&&!(n=hi(n))&&F(t)?Ai(tt(t),0,r):t.split(n,r)):[]}function _c(t,n,r){return t=Of(t),r=null==r?0:re(jf(r),0,t.length),n=hi(n),t.slice(r,r+n.length)==n}function yc(t,n,e){var i=r.templateSettings;e&&Bu(t,n,e)&&(n=it),t=Of(t),n=Ep({},n,i,su);var u,o,a=Ep({},n.imports,i.imports,su),f=Nf(a),c=P(a,f),s=0,l=n.interpolate||Xn,p=\"__p += '\",h=cs((n.escape||Xn).source+\"|\"+l.source+\"|\"+(l===On?Fn:Xn).source+\"|\"+(n.evaluate||Xn).source+\"|$\",\"g\"),v=\"//# sourceURL=\"+(\"sourceURL\"in n?n.sourceURL:\"lodash.templateSources[\"+ ++xr+\"]\")+\"\\n\";t.replace(h,function(n,r,e,i,a,f){return e||(e=i),p+=t.slice(s,f).replace(Hn,N),r&&(u=!0,p+=\"' +\\n__e(\"+r+\") +\\n'\"),a&&(o=!0,p+=\"';\\n\"+a+\";\\n__p += '\"),e&&(p+=\"' +\\n((__t = (\"+e+\")) == null ? '' : __t) +\\n'\"),s=f+n.length,n}),p+=\"';\\n\";var d=n.variable;d||(p=\"with (obj) {\\n\"+p+\"\\n}\\n\"),p=(o?p.replace(bn,\"\"):p).replace(wn,\"$1\").replace(mn,\"$1;\"),p=\"function(\"+(d||\"obj\")+\") {\\n\"+(d?\"\":\"obj || (obj = {});\\n\")+\"var __t, __p = ''\"+(u?\", __e = _.escape\":\"\")+(o?\", __j = Array.prototype.join;\\nfunction print() { __p += __j.call(arguments, '') }\\n\":\";\\n\")+p+\"return __p\\n}\";var g=Xp(function(){return os(f,v+\"return \"+p).apply(it,c)});if(g.source=p,Qa(g))throw g;return g}function bc(t){return Of(t).toLowerCase()}function wc(t){return Of(t).toUpperCase()}function mc(t,n,r){if((t=Of(t))&&(r||n===it))return t.replace(Bn,\"\");if(!t||!(n=hi(n)))return t;var e=tt(t),i=tt(n);return Ai(e,U(e,i),T(e,i)+1).join(\"\")}function xc(t,n,r){if((t=Of(t))&&(r||n===it))return t.replace(Dn,\"\");if(!t||!(n=hi(n)))return t;var e=tt(t);return Ai(e,0,T(e,tt(n))+1).join(\"\")}function jc(t,n,r){if((t=Of(t))&&(r||n===it))return t.replace(Pn,\"\");if(!t||!(n=hi(n)))return t;var e=tt(t);return Ai(e,U(e,tt(n))).join(\"\")}function Ac(t,n){var r=kt,e=Rt;if(uf(n)){var i=\"separator\"in n?n.separator:i;r=\"length\"in n?jf(n.length):r,e=\"omission\"in n?hi(n.omission):e}t=Of(t);var u=t.length;if(F(t)){var o=tt(t);u=o.length}if(r>=u)return t;var a=r-Q(e);if(a<1)return e;var f=o?Ai(o,0,a).join(\"\"):t.slice(0,a);if(i===it)return f+e;if(o&&(a+=f.length-a),xp(i)){if(t.slice(a).search(i)){var c,s=f;for(i.global||(i=cs(i.source,Of(qn.exec(i))+\"g\")),i.lastIndex=0;c=i.exec(s);)var l=c.index;f=f.slice(0,l===it?a:l)}}else if(t.indexOf(hi(i),a)!=a){var p=f.lastIndexOf(i);p>-1&&(f=f.slice(0,p))}return f+e}function zc(t){return t=Of(t),t&&An.test(t)?t.replace(xn,Gr):t}function kc(t,n,r){return t=Of(t),n=r?it:n,n===it?q(t)?et(t):m(t):t.match(n)||[]}function Rc(t){var n=null==t?0:t.length,r=mu();return t=n?d(t,function(t){if(\"function\"!=typeof t[1])throw new ls(at);return[r(t[0]),t[1]]}):[],ri(function(r){for(var e=-1;++e<n;){var i=t[e];if(a(i[0],this,r))return a(i[1],this,r)}})}function Oc(t){return ie(ee(t,lt))}function Ec(t){return function(){return t}}function Sc(t,n){return null==t||t!==t?n:t}function Ic(t){return t}function Cc(t){return De(\"function\"==typeof t?t:ee(t,lt))}function $c(t){return Me(ee(t,lt))}function Lc(t,n){return Fe(t,ee(n,lt))}function Bc(t,n,r){var e=Nf(n),i=de(n,e);null!=r||uf(n)&&(i.length||!e.length)||(r=n,n=t,t=this,i=de(n,Nf(n)));var u=!(uf(r)&&\"chain\"in r&&!r.chain),o=nf(t);return c(i,function(r){var e=n[r];t[r]=e,o&&(t.prototype[r]=function(){var n=this.__chain__;if(u||n){var r=t(this.__wrapped__);return(r.__actions__=Di(this.__actions__)).push({func:e,args:arguments,thisArg:t}),r.__chain__=n,r}return e.apply(t,g([this.value()],arguments))})}),t}function Pc(){return $r._===this&&($r._=xs),this}function Dc(){}function Uc(t){return t=jf(t),ri(function(n){return Ze(n,t)})}function Tc(t){return Pu(t)?O(Hu(t)):Je(t)}function Wc(t){return function(n){return null==t?it:ge(t,n)}}function Nc(){return[]}function Mc(){return!1}function Fc(){return{}}function qc(){return\"\"}function Vc(){return!0}function Zc(t,n){if((t=jf(t))<1||t>$t)return[];var r=Pt,e=Ys(t,Pt);n=mu(n),t-=Pt;for(var i=$(e,n);++r<t;)n(r);return i}function Yc(t){return _p(t)?d(t,Hu):_f(t)?[t]:Di(Cl(Of(t)))}function Gc(t){var n=++ys;return Of(t)+n}function Kc(t){return t&&t.length?ce(t,Ic,be):it}function Jc(t,n){return t&&t.length?ce(t,mu(n,2),be):it}function Xc(t){return R(t,Ic)}function Hc(t,n){return R(t,mu(n,2))}function Qc(t){return t&&t.length?ce(t,Ic,We):it}function ts(t,n){return t&&t.length?ce(t,mu(n,2),We):it}function ns(t){return t&&t.length?C(t,Ic):0}function rs(t,n){return t&&t.length?C(t,mu(n,2)):0}n=null==n?$r:Kr.defaults($r.Object(),n,Kr.pick($r,mr));var es=n.Array,is=n.Date,us=n.Error,os=n.Function,as=n.Math,fs=n.Object,cs=n.RegExp,ss=n.String,ls=n.TypeError,ps=es.prototype,hs=os.prototype,vs=fs.prototype,ds=n[\"__core-js_shared__\"],gs=hs.toString,_s=vs.hasOwnProperty,ys=0,bs=function(){var t=/[^.]+$/.exec(ds&&ds.keys&&ds.keys.IE_PROTO||\"\");return t?\"Symbol(src)_1.\"+t:\"\"}(),ws=vs.toString,ms=gs.call(fs),xs=$r._,js=cs(\"^\"+gs.call(_s).replace($n,\"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g,\"$1.*?\")+\"$\"),As=Pr?n.Buffer:it,zs=n.Symbol,ks=n.Uint8Array,Rs=As?As.allocUnsafe:it,Os=Y(fs.getPrototypeOf,fs),Es=fs.create,Ss=vs.propertyIsEnumerable,Is=ps.splice,Cs=zs?zs.isConcatSpreadable:it,$s=zs?zs.iterator:it,Ls=zs?zs.toStringTag:it,Bs=function(){try{var t=Au(fs,\"defineProperty\");return t({},\"\",{}),t}catch(t){}}(),Ps=n.clearTimeout!==$r.clearTimeout&&n.clearTimeout,Ds=is&&is.now!==$r.Date.now&&is.now,Us=n.setTimeout!==$r.setTimeout&&n.setTimeout,Ts=as.ceil,Ws=as.floor,Ns=fs.getOwnPropertySymbols,Ms=As?As.isBuffer:it,Fs=n.isFinite,qs=ps.join,Vs=Y(fs.keys,fs),Zs=as.max,Ys=as.min,Gs=is.now,Ks=n.parseInt,Js=as.random,Xs=ps.reverse,Hs=Au(n,\"DataView\"),Qs=Au(n,\"Map\"),tl=Au(n,\"Promise\"),nl=Au(n,\"Set\"),rl=Au(n,\"WeakMap\"),el=Au(fs,\"create\"),il=rl&&new rl,ul={},ol=Qu(Hs),al=Qu(Qs),fl=Qu(tl),cl=Qu(nl),sl=Qu(rl),ll=zs?zs.prototype:it,pl=ll?ll.valueOf:it,hl=ll?ll.toString:it,vl=function(){function t(){}return function(n){if(!uf(n))return{};if(Es)return Es(n);t.prototype=n;var r=new t;return t.prototype=it,r}}();r.templateSettings={escape:kn,evaluate:Rn,interpolate:On,variable:\"\",imports:{_:r}},r.prototype=e.prototype,r.prototype.constructor=r,i.prototype=vl(e.prototype),i.prototype.constructor=i,w.prototype=vl(e.prototype),w.prototype.constructor=w,rt.prototype.clear=Nn,rt.prototype.delete=Qn,rt.prototype.get=tr,rt.prototype.has=nr,rt.prototype.set=rr,er.prototype.clear=ir,er.prototype.delete=ur,er.prototype.get=or,er.prototype.has=ar,er.prototype.set=fr,cr.prototype.clear=sr,cr.prototype.delete=lr,cr.prototype.get=pr,cr.prototype.has=hr,cr.prototype.set=vr,_r.prototype.add=_r.prototype.push=yr,_r.prototype.has=br,wr.prototype.clear=zr,wr.prototype.delete=kr,wr.prototype.get=Rr,wr.prototype.has=Or,wr.prototype.set=Ir;var dl=Fi(he),gl=Fi(ve,!0),_l=qi(),yl=qi(!0),bl=il?function(t,n){return il.set(t,n),t}:Ic,wl=Bs?function(t,n){return Bs(t,\"toString\",{configurable:!0,enumerable:!1,value:Ec(n),writable:!0})}:Ic,ml=ri,xl=Ps||function(t){return $r.clearTimeout(t)},jl=nl&&1/K(new nl([,-0]))[1]==Ct?function(t){return new nl(t)}:Dc,Al=il?function(t){return il.get(t)}:Dc,zl=Ns?function(t){return null==t?[]:(t=fs(t),p(Ns(t),function(n){return Ss.call(t,n)}))}:Nc,kl=Ns?function(t){for(var n=[];t;)g(n,zl(t)),t=Os(t);return n}:Nc,Rl=ye;(Hs&&Rl(new Hs(new ArrayBuffer(1)))!=cn||Qs&&Rl(new Qs)!=Kt||tl&&\"[object Promise]\"!=Rl(tl.resolve())||nl&&Rl(new nl)!=nn||rl&&Rl(new rl)!=on)&&(Rl=function(t){var n=ye(t),r=n==Ht?t.constructor:it,e=r?Qu(r):\"\";if(e)switch(e){case ol:return cn;case al:return Kt;case fl:return\"[object Promise]\";case cl:return nn;case sl:return on}return n});var Ol=ds?nf:Mc,El=Ju(bl),Sl=Us||function(t,n){return $r.setTimeout(t,n)},Il=Ju(wl),Cl=function(t){var n=Ia(t,function(t){return r.size===ct&&r.clear(),t}),r=n.cache;return n}(function(t){var n=[];return In.test(t)&&n.push(\"\"),t.replace(Cn,function(t,r,e,i){n.push(e?i.replace(Mn,\"$1\"):r||t)}),n}),$l=ri(function(t,n){return Ya(t)?ae(t,pe(n,1,Ya,!0)):[]}),Ll=ri(function(t,n){var r=mo(n);return Ya(r)&&(r=it),Ya(t)?ae(t,pe(n,1,Ya,!0),mu(r,2)):[]}),Bl=ri(function(t,n){var r=mo(n);return Ya(r)&&(r=it),Ya(t)?ae(t,pe(n,1,Ya,!0),it,r):[]}),Pl=ri(function(t){var n=d(t,mi);return n.length&&n[0]===t[0]?je(n):[]}),Dl=ri(function(t){var n=mo(t),r=d(t,mi);return n===mo(r)?n=it:r.pop(),r.length&&r[0]===t[0]?je(r,mu(n,2)):[]}),Ul=ri(function(t){var n=mo(t),r=d(t,mi);return n=\"function\"==typeof n?n:it,n&&r.pop(),r.length&&r[0]===t[0]?je(r,it,n):[]}),Tl=ri(Ao),Wl=gu(function(t,n){var r=null==t?0:t.length,e=ne(t,n);return He(t,d(n,function(t){return Lu(t,r)?+t:t}).sort($i)),e}),Nl=ri(function(t){return vi(pe(t,1,Ya,!0))}),Ml=ri(function(t){var n=mo(t);return Ya(n)&&(n=it),vi(pe(t,1,Ya,!0),mu(n,2))}),Fl=ri(function(t){var n=mo(t);return n=\"function\"==typeof n?n:it,vi(pe(t,1,Ya,!0),it,n)}),ql=ri(function(t,n){return Ya(t)?ae(t,n):[]}),Vl=ri(function(t){return bi(p(t,Ya))}),Zl=ri(function(t){var n=mo(t);return Ya(n)&&(n=it),bi(p(t,Ya),mu(n,2))}),Yl=ri(function(t){var n=mo(t);return n=\"function\"==typeof n?n:it,bi(p(t,Ya),it,n)}),Gl=ri(Zo),Kl=ri(function(t){var n=t.length,r=n>1?t[n-1]:it;return r=\"function\"==typeof r?(t.pop(),r):it,Yo(t,r)}),Jl=gu(function(t){var n=t.length,r=n?t[0]:0,e=this.__wrapped__,u=function(n){return ne(n,t)};return!(n>1||this.__actions__.length)&&e instanceof w&&Lu(r)?(e=e.slice(r,+r+(n?1:0)),e.__actions__.push({func:Ho,args:[u],thisArg:it}),new i(e,this.__chain__).thru(function(t){return n&&!t.length&&t.push(it),t})):this.thru(u)}),Xl=Ni(function(t,n,r){_s.call(t,r)?++t[r]:te(t,r,1)}),Hl=Ji(so),Ql=Ji(lo),tp=Ni(function(t,n,r){_s.call(t,r)?t[r].push(n):te(t,r,[n])}),np=ri(function(t,n,r){var e=-1,i=\"function\"==typeof n,u=Za(t)?es(t.length):[];return dl(t,function(t){u[++e]=i?a(n,t,r):ze(t,n,r)}),u}),rp=Ni(function(t,n,r){te(t,r,n)}),ep=Ni(function(t,n,r){t[r?0:1].push(n)},function(){return[[],[]]}),ip=ri(function(t,n){if(null==t)return[];var r=n.length;return r>1&&Bu(t,n[0],n[1])?n=[]:r>2&&Bu(n[0],n[1],n[2])&&(n=[n[0]]),Ye(t,pe(n,1),[])}),up=Ds||function(){return $r.Date.now()},op=ri(function(t,n,r){var e=gt;if(r.length){var i=G(r,wu(op));e|=mt}return cu(t,e,n,r,i)}),ap=ri(function(t,n,r){var e=gt|_t;if(r.length){var i=G(r,wu(ap));e|=mt}return cu(n,e,t,r,i)}),fp=ri(function(t,n){return oe(t,1,n)}),cp=ri(function(t,n,r){return oe(t,zf(n)||0,r)});Ia.Cache=cr;var sp=ml(function(t,n){n=1==n.length&&_p(n[0])?d(n[0],B(mu())):d(pe(n,1),B(mu()));var r=n.length;return ri(function(e){for(var i=-1,u=Ys(e.length,r);++i<u;)e[i]=n[i].call(this,e[i]);return a(t,this,e)})}),lp=ri(function(t,n){var r=G(n,wu(lp));return cu(t,mt,it,n,r)}),pp=ri(function(t,n){var r=G(n,wu(pp));return cu(t,xt,it,n,r)}),hp=gu(function(t,n){return cu(t,At,it,it,it,n)}),vp=uu(be),dp=uu(function(t,n){return t>=n}),gp=ke(function(){return arguments}())?ke:function(t){return of(t)&&_s.call(t,\"callee\")&&!Ss.call(t,\"callee\")},_p=es.isArray,yp=Tr?B(Tr):Re,bp=Ms||Mc,wp=Wr?B(Wr):Oe,mp=Nr?B(Nr):Ie,xp=Mr?B(Mr):Le,jp=Fr?B(Fr):Be,Ap=qr?B(qr):Pe,zp=uu(We),kp=uu(function(t,n){return t<=n}),Rp=Mi(function(t,n){if(Wu(n)||Za(n))return void Ui(n,Nf(n),t);for(var r in n)_s.call(n,r)&&Vr(t,r,n[r])}),Op=Mi(function(t,n){Ui(n,Mf(n),t)}),Ep=Mi(function(t,n,r,e){Ui(n,Mf(n),t,e)}),Sp=Mi(function(t,n,r,e){Ui(n,Nf(n),t,e)}),Ip=gu(ne),Cp=ri(function(t){return t.push(it,su),a(Ep,it,t)}),$p=ri(function(t){return t.push(it,lu),a(Up,it,t)}),Lp=Qi(function(t,n,r){t[n]=r},Ec(Ic)),Bp=Qi(function(t,n,r){_s.call(t,n)?t[n].push(r):t[n]=[r]},mu),Pp=ri(ze),Dp=Mi(function(t,n,r){qe(t,n,r)}),Up=Mi(function(t,n,r,e){qe(t,n,r,e)}),Tp=gu(function(t,n){var r={};if(null==t)return r;var e=!1;n=d(n,function(n){return n=ji(n,t),e||(e=n.length>1),n}),Ui(t,yu(t),r),e&&(r=ee(r,lt|pt|ht,pu));for(var i=n.length;i--;)di(r,n[i]);return r}),Wp=gu(function(t,n){return null==t?{}:Ge(t,n)}),Np=fu(Nf),Mp=fu(Mf),Fp=Yi(function(t,n,r){return n=n.toLowerCase(),t+(r?uc(n):n)}),qp=Yi(function(t,n,r){return t+(r?\"-\":\"\")+n.toLowerCase()}),Vp=Yi(function(t,n,r){return t+(r?\" \":\"\")+n.toLowerCase()}),Zp=Zi(\"toLowerCase\"),Yp=Yi(function(t,n,r){return t+(r?\"_\":\"\")+n.toLowerCase()}),Gp=Yi(function(t,n,r){return t+(r?\" \":\"\")+Jp(n)}),Kp=Yi(function(t,n,r){return t+(r?\" \":\"\")+n.toUpperCase()}),Jp=Zi(\"toUpperCase\"),Xp=ri(function(t,n){try{return a(t,it,n)}catch(t){return Qa(t)?t:new us(t)}}),Hp=gu(function(t,n){return c(n,function(n){n=Hu(n),te(t,n,op(t[n],t))}),t}),Qp=Xi(),th=Xi(!0),nh=ri(function(t,n){return function(r){return ze(r,t,n)}}),rh=ri(function(t,n){return function(r){return ze(t,r,n)}}),eh=nu(d),ih=nu(l),uh=nu(b),oh=iu(),ah=iu(!0),fh=tu(function(t,n){return t+n},0),ch=au(\"ceil\"),sh=tu(function(t,n){return t/n},1),lh=au(\"floor\"),ph=tu(function(t,n){return t*n},1),hh=au(\"round\"),vh=tu(function(t,n){return t-n},0);return r.after=Aa,r.ary=za,r.assign=Rp,r.assignIn=Op,r.assignInWith=Ep,r.assignWith=Sp,r.at=Ip,r.before=ka,r.bind=op,r.bindAll=Hp,r.bindKey=ap,r.castArray=Ta,r.chain=Jo,r.chunk=ro,r.compact=eo,r.concat=io,r.cond=Rc,r.conforms=Oc,r.constant=Ec,r.countBy=Xl,r.create=Ef,r.curry=Ra,r.curryRight=Oa,r.debounce=Ea,r.defaults=Cp,r.defaultsDeep=$p,r.defer=fp,r.delay=cp,r.difference=$l,r.differenceBy=Ll,r.differenceWith=Bl,r.drop=uo,r.dropRight=oo,r.dropRightWhile=ao,r.dropWhile=fo,r.fill=co,r.filter=aa,r.flatMap=fa,r.flatMapDeep=ca,r.flatMapDepth=sa,r.flatten=po,r.flattenDeep=ho,r.flattenDepth=vo,r.flip=Sa,r.flow=Qp,r.flowRight=th,r.fromPairs=go,r.functions=Pf,r.functionsIn=Df,r.groupBy=tp,r.initial=bo,r.intersection=Pl,r.intersectionBy=Dl,r.intersectionWith=Ul,r.invert=Lp,r.invertBy=Bp,r.invokeMap=np,r.iteratee=Cc,r.keyBy=rp,r.keys=Nf,r.keysIn=Mf,r.map=va,r.mapKeys=Ff,r.mapValues=qf,r.matches=$c,r.matchesProperty=Lc,r.memoize=Ia,r.merge=Dp,r.mergeWith=Up,r.method=nh,r.methodOf=rh,r.mixin=Bc,r.negate=Ca,r.nthArg=Uc,r.omit=Tp,r.omitBy=Vf,r.once=$a,r.orderBy=da,r.over=eh,r.overArgs=sp,r.overEvery=ih,r.overSome=uh,r.partial=lp,r.partialRight=pp,r.partition=ep,r.pick=Wp,r.pickBy=Zf,r.property=Tc,r.propertyOf=Wc,r.pull=Tl,r.pullAll=Ao,r.pullAllBy=zo,r.pullAllWith=ko,r.pullAt=Wl,r.range=oh,r.rangeRight=ah,r.rearg=hp,r.reject=ya,r.remove=Ro,r.rest=La,r.reverse=Oo,r.sampleSize=wa,r.set=Gf,r.setWith=Kf,r.shuffle=ma,r.slice=Eo,r.sortBy=ip,r.sortedUniq=Po,r.sortedUniqBy=Do,r.split=gc,r.spread=Ba,r.tail=Uo,r.take=To,r.takeRight=Wo,r.takeRightWhile=No,r.takeWhile=Mo,r.tap=Xo,r.throttle=Pa,r.thru=Ho,r.toArray=mf,r.toPairs=Np,r.toPairsIn=Mp,r.toPath=Yc,r.toPlainObject=kf,r.transform=Jf,r.unary=Da,r.union=Nl,r.unionBy=Ml,r.unionWith=Fl,r.uniq=Fo,r.uniqBy=qo,r.uniqWith=Vo,r.unset=Xf,r.unzip=Zo,r.unzipWith=Yo,r.update=Hf,r.updateWith=Qf,r.values=tc,r.valuesIn=nc,r.without=ql,r.words=kc,r.wrap=Ua,r.xor=Vl,r.xorBy=Zl,r.xorWith=Yl,r.zip=Gl,r.zipObject=Go,r.zipObjectDeep=Ko,r.zipWith=Kl,r.entries=Np,r.entriesIn=Mp,r.extend=Op,r.extendWith=Ep,Bc(r,r),r.add=fh,r.attempt=Xp,r.camelCase=Fp,r.capitalize=uc,r.ceil=ch,r.clamp=rc,r.clone=Wa,r.cloneDeep=Ma,r.cloneDeepWith=Fa,r.cloneWith=Na,r.conformsTo=qa,r.deburr=oc,r.defaultTo=Sc,r.divide=sh,r.endsWith=ac,r.eq=Va,r.escape=fc,r.escapeRegExp=cc,r.every=oa,r.find=Hl,r.findIndex=so,r.findKey=Sf,r.findLast=Ql,r.findLastIndex=lo,r.findLastKey=If,r.floor=lh,r.forEach=la,r.forEachRight=pa,r.forIn=Cf,r.forInRight=$f,r.forOwn=Lf,r.forOwnRight=Bf,r.get=Uf,r.gt=vp,r.gte=dp,r.has=Tf,r.hasIn=Wf,r.head=_o,r.identity=Ic,r.includes=ha,r.indexOf=yo,r.inRange=ec,r.invoke=Pp,r.isArguments=gp,r.isArray=_p,r.isArrayBuffer=yp,r.isArrayLike=Za,r.isArrayLikeObject=Ya,r.isBoolean=Ga,r.isBuffer=bp,r.isDate=wp,r.isElement=Ka,r.isEmpty=Ja,r.isEqual=Xa,r.isEqualWith=Ha,r.isError=Qa,r.isFinite=tf,r.isFunction=nf,r.isInteger=rf,r.isLength=ef,r.isMap=mp,r.isMatch=af,r.isMatchWith=ff,r.isNaN=cf,r.isNative=sf,r.isNil=pf,r.isNull=lf,r.isNumber=hf,r.isObject=uf,r.isObjectLike=of,r.isPlainObject=vf,r.isRegExp=xp,r.isSafeInteger=df,r.isSet=jp,r.isString=gf,r.isSymbol=_f,r.isTypedArray=Ap,r.isUndefined=yf,r.isWeakMap=bf,r.isWeakSet=wf,r.join=wo,r.kebabCase=qp,r.last=mo,r.lastIndexOf=xo,r.lowerCase=Vp,r.lowerFirst=Zp,r.lt=zp,r.lte=kp,r.max=Kc,r.maxBy=Jc,r.mean=Xc,r.meanBy=Hc,r.min=Qc,r.minBy=ts,r.stubArray=Nc,r.stubFalse=Mc,r.stubObject=Fc,r.stubString=qc,r.stubTrue=Vc,r.multiply=ph,r.nth=jo,r.noConflict=Pc,r.noop=Dc,r.now=up,r.pad=sc,r.padEnd=lc,r.padStart=pc,r.parseInt=hc,r.random=ic,r.reduce=ga,r.reduceRight=_a,r.repeat=vc,r.replace=dc,r.result=Yf,r.round=hh,r.runInContext=t,r.sample=ba,r.size=xa,r.snakeCase=Yp,r.some=ja,r.sortedIndex=So,r.sortedIndexBy=Io,r.sortedIndexOf=Co,r.sortedLastIndex=$o,r.sortedLastIndexBy=Lo,r.sortedLastIndexOf=Bo,r.startCase=Gp,r.startsWith=_c,r.subtract=vh,r.sum=ns,r.sumBy=rs,r.template=yc,r.times=Zc,r.toFinite=xf,r.toInteger=jf,r.toLength=Af,r.toLower=bc,r.toNumber=zf,r.toSafeInteger=Rf,r.toString=Of,r.toUpper=wc,r.trim=mc,r.trimEnd=xc,r.trimStart=jc,r.truncate=Ac,r.unescape=zc,r.uniqueId=Gc,r.upperCase=Kp,r.upperFirst=Jp,r.each=la,r.eachRight=pa,r.first=_o,Bc(r,function(){var t={};return he(r,function(n,e){_s.call(r.prototype,e)||(t[e]=n)}),t}(),{chain:!1}),r.VERSION=\"4.17.4\",c([\"bind\",\"bindKey\",\"curry\",\"curryRight\",\"partial\",\"partialRight\"],function(t){r[t].placeholder=r}),c([\"drop\",\"take\"],function(t,n){w.prototype[t]=function(r){r=r===it?1:Zs(jf(r),0);var e=this.__filtered__&&!n?new w(this):this.clone();return e.__filtered__?e.__takeCount__=Ys(r,e.__takeCount__):e.__views__.push({size:Ys(r,Pt),type:t+(e.__dir__<0?\"Right\":\"\")}),e},w.prototype[t+\"Right\"]=function(n){return this.reverse()[t](n).reverse()}}),c([\"filter\",\"map\",\"takeWhile\"],function(t,n){var r=n+1,e=r==St||3==r;w.prototype[t]=function(t){var n=this.clone();return n.__iteratees__.push({iteratee:mu(t,3),type:r}),n.__filtered__=n.__filtered__||e,n}}),c([\"head\",\"last\"],function(t,n){var r=\"take\"+(n?\"Right\":\"\");w.prototype[t]=function(){return this[r](1).value()[0]}}),c([\"initial\",\"tail\"],function(t,n){var r=\"drop\"+(n?\"\":\"Right\");w.prototype[t]=function(){return this.__filtered__?new w(this):this[r](1)}}),w.prototype.compact=function(){return this.filter(Ic)},w.prototype.find=function(t){return this.filter(t).head()},w.prototype.findLast=function(t){return this.reverse().find(t)},w.prototype.invokeMap=ri(function(t,n){return\"function\"==typeof t?new w(this):this.map(function(r){return ze(r,t,n)})}),w.prototype.reject=function(t){return this.filter(Ca(mu(t)))},w.prototype.slice=function(t,n){t=jf(t);var r=this;return r.__filtered__&&(t>0||n<0)?new w(r):(t<0?r=r.takeRight(-t):t&&(r=r.drop(t)),n!==it&&(n=jf(n),r=n<0?r.dropRight(-n):r.take(n-t)),r)},w.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},w.prototype.toArray=function(){return this.take(Pt)},he(w.prototype,function(t,n){var e=/^(?:filter|find|map|reject)|While$/.test(n),u=/^(?:head|last)$/.test(n),o=r[u?\"take\"+(\"last\"==n?\"Right\":\"\"):n],a=u||/^find/.test(n);o&&(r.prototype[n]=function(){var n=this.__wrapped__,f=u?[1]:arguments,c=n instanceof w,s=f[0],l=c||_p(n),p=function(t){var n=o.apply(r,g([t],f));return u&&h?n[0]:n};l&&e&&\"function\"==typeof s&&1!=s.length&&(c=l=!1);var h=this.__chain__,v=!!this.__actions__.length,d=a&&!h,_=c&&!v;if(!a&&l){n=_?n:new w(this);var y=t.apply(n,f);return y.__actions__.push({func:Ho,args:[p],thisArg:it}),new i(y,h)}return d&&_?t.apply(this,f):(y=this.thru(p),d?u?y.value()[0]:y.value():y)})}),c([\"pop\",\"push\",\"shift\",\"sort\",\"splice\",\"unshift\"],function(t){var n=ps[t],e=/^(?:push|sort|unshift)$/.test(t)?\"tap\":\"thru\",i=/^(?:pop|shift)$/.test(t);r.prototype[t]=function(){var t=arguments;if(i&&!this.__chain__){var r=this.value();return n.apply(_p(r)?r:[],t)}return this[e](function(r){return n.apply(_p(r)?r:[],t)})}}),he(w.prototype,function(t,n){var e=r[n];if(e){var i=e.name+\"\";(ul[i]||(ul[i]=[])).push({name:n,func:e})}}),ul[Hi(it,_t).name]=[{name:\"wrapper\",func:it}],w.prototype.clone=E,w.prototype.reverse=X,w.prototype.value=nt,r.prototype.at=Jl,r.prototype.chain=Qo,r.prototype.commit=ta,r.prototype.next=na,r.prototype.plant=ea,r.prototype.reverse=ia,r.prototype.toJSON=r.prototype.valueOf=r.prototype.value=ua,r.prototype.first=r.prototype.head,$s&&(r.prototype[$s]=ra),r}();$r._=Kr,(i=function(){return Kr}.call(n,r,n,e))!==it&&(e.exports=i)}).call(this)}).call(n,r(12),r(13)(t))},function(t,n){var r;r=function(){return this}();try{r=r||Function(\"return this\")()||(0,eval)(\"this\")}catch(t){\"object\"==typeof window&&(r=window)}t.exports=r},function(t,n){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,\"loaded\",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,\"id\",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,n,r){var e=r(15);\"string\"==typeof e&&(e=[[t.i,e,\"\"]]),e.locals&&(t.exports=e.locals);r(1)(\"fcb02d94\",e,!0)},function(t,n,r){n=t.exports=r(0)(void 0),n.push([t.i,\".layout-container{display:flex;flex-direction:column;flex:1 0 auto;overflow:hidden;position:relative}.layout-container>.preview{position:absolute;opacity:0;margin:0;pointer-events:none}.layout-container>.views{display:flex;position:absolute;top:0;right:0;bottom:0;left:0}.layout-container>.drag{position:absolute;margin:0;padding:0;display:none;cursor:move}.layout-container>.drag *{pointer-events:none!important}.layout-container>.drag.dragging{display:block}.layout-container .drag>.view{height:100%;width:100%}\",\"\"])},function(t,n,r){\"use strict\";var e=r(2),i=r.n(e),u=r(17);r.n(u);n.a=i.a.component(\"Pane\",{props:[\"title\"],render:function(){var t=arguments[0];return t(\"div\",{class:\"pane\"},[t(\"div\",{class:\"header\"},[this.title]),t(\"div\",{class:\"content\"},[this.$slots.default])])}})},function(t,n,r){var e=r(18);\"string\"==typeof e&&(e=[[t.i,e,\"\"]]),e.locals&&(t.exports=e.locals);r(1)(\"068ff878\",e,!0)},function(t,n,r){n=t.exports=r(0)(void 0),n.push([t.i,\".pane{position:relative;overflow:hidden;flex:1 1 auto;height:100%;width:100%;flex-direction:column;pointer-events:none}.pane>.header{height:40px;padding:10px;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.pane>.content{position:absolute;top:40px;right:0;bottom:0;left:0;display:flex;flex-direction:column;overflow:auto;pointer-events:auto}\",\"\"])},function(t,n,r){var e=r(20);\"string\"==typeof e&&(e=[[t.i,e,\"\"]]),e.locals&&(t.exports=e.locals);r(1)(\"766ec7a9\",e,!0)},function(t,n,r){n=t.exports=r(0)(void 0),n.push([t.i,\".layout-container,.split{background:transparent}.layout-container>*{margin:4px;box-sizing:border-box}.layout-container .view{border:1px solid transparent;transition:all .3s}.layout-container>.preview{background:hsla(0,0%,61%,.4);border:1px dashed #666;transition:all .3s}.layout-container>.drag{display:block;transform:scale(1) translate(0);transition:transform .3s}.layout-container>.drag.dragging{opacity:.5;box-shadow:0 0 20px 4px rgba(0,0,0,.4);transform:scale(.5) translate(0)}.split>.splitter{flex-basis:8px;position:relative;background:transparent;transition:all .3s}.split.resizeable.resizing>.splitter,.split.resizeable>.splitter:hover{background:hsla(0,0%,39%,.4);transition:all .3s}.pane{box-shadow:0 1px 3px 0 rgba(0,0,0,.3);overflow:hidden}.pane>.header{text-transform:uppercase;background:#eee;color:#444}.pane>.content{background:#fefefe;padding:10px}\",\"\"])}]);\n//# sourceMappingURL=vue-split-layout.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///29\n");

/***/ }),
/* 30 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { staticClass: \"app\" }, [\n    _c(\"div\", { staticClass: \"controls\" }, [\n      _c(\n        \"button\",\n        {\n          on: {\n            click: function($event) {\n              _vm.editable = !_vm.editable\n            }\n          }\n        },\n        [_vm._v(\"editable \" + _vm._s(_vm.editable))]\n      )\n    ]),\n    _vm._v(\" \"),\n    _c(\n      \"div\",\n      { staticClass: \"tables\" },\n      [\n        _c(\n          \"Split\",\n          { attrs: { resizeable: true, dir: \"horizontal\" } },\n          [\n            _c(\"editable\", {\n              attrs: {\n                headers: _vm.headers,\n                rows: _vm.dataList,\n                editable: _vm.editable\n              },\n              on: { commit: _vm.commit }\n            }),\n            _vm._v(\" \"),\n            _c(\"div\")\n          ],\n          1\n        )\n      ],\n      1\n    )\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__[\"a\"] = (esExports);\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n    require(\"vue-hot-reload-api\")      .rerender(\"data-v-1bd2bee3\", esExports)\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kZW1vL0FwcC52dWU/ZDlmYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixxQkFBcUI7QUFDekMsZUFBZSwwQkFBMEI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLHdCQUF3QjtBQUMvQjtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVMsc0NBQXNDLEVBQUU7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmLG1CQUFtQjtBQUNuQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjMwLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImFwcFwiIH0sIFtcbiAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbnRyb2xzXCIgfSwgW1xuICAgICAgX2MoXG4gICAgICAgIFwiYnV0dG9uXCIsXG4gICAgICAgIHtcbiAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICBfdm0uZWRpdGFibGUgPSAhX3ZtLmVkaXRhYmxlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBbX3ZtLl92KFwiZWRpdGFibGUgXCIgKyBfdm0uX3MoX3ZtLmVkaXRhYmxlKSldXG4gICAgICApXG4gICAgXSksXG4gICAgX3ZtLl92KFwiIFwiKSxcbiAgICBfYyhcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7IHN0YXRpY0NsYXNzOiBcInRhYmxlc1wiIH0sXG4gICAgICBbXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwiU3BsaXRcIixcbiAgICAgICAgICB7IGF0dHJzOiB7IHJlc2l6ZWFibGU6IHRydWUsIGRpcjogXCJob3Jpem9udGFsXCIgfSB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF9jKFwiZWRpdGFibGVcIiwge1xuICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgIGhlYWRlcnM6IF92bS5oZWFkZXJzLFxuICAgICAgICAgICAgICAgIHJvd3M6IF92bS5kYXRhTGlzdCxcbiAgICAgICAgICAgICAgICBlZGl0YWJsZTogX3ZtLmVkaXRhYmxlXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG9uOiB7IGNvbW1pdDogX3ZtLmNvbW1pdCB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImRpdlwiKVxuICAgICAgICAgIF0sXG4gICAgICAgICAgMVxuICAgICAgICApXG4gICAgICBdLFxuICAgICAgMVxuICAgIClcbiAgXSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG52YXIgZXNFeHBvcnRzID0geyByZW5kZXI6IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnMgfVxuZXhwb3J0IGRlZmF1bHQgZXNFeHBvcnRzXG5pZiAobW9kdWxlLmhvdCkge1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmIChtb2R1bGUuaG90LmRhdGEpIHtcbiAgICByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpICAgICAgLnJlcmVuZGVyKFwiZGF0YS12LTFiZDJiZWUzXCIsIGVzRXhwb3J0cylcbiAgfVxufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP3tcImlkXCI6XCJkYXRhLXYtMWJkMmJlZTNcIixcImhhc1Njb3BlZFwiOmZhbHNlLFwiYnVibGVcIjp7XCJ0cmFuc2Zvcm1zXCI6e319fSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAmYnVzdENhY2hlIS4vZGVtby9BcHAudnVlXG4vLyBtb2R1bGUgaWQgPSAzMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///30\n");

/***/ })
/******/ ]);